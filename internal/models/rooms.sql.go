// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rooms.sql

package models

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO Rooms (RoomName, Location, Capacity)
VALUES ($1, $2, $3)
RETURNING roomid, roomname, location, capacity
`

type CreateRoomParams struct {
	Roomname string `json:"roomname"`
	Location string `json:"location"`
	Capacity int32  `json:"capacity"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom, arg.Roomname, arg.Location, arg.Capacity)
	var i Room
	err := row.Scan(
		&i.Roomid,
		&i.Roomname,
		&i.Location,
		&i.Capacity,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM Rooms WHERE RoomID = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, roomid int32) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, roomid)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT roomid, roomname, location, capacity FROM Rooms WHERE RoomID = $1
`

func (q *Queries) GetRoom(ctx context.Context, roomid int32) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoom, roomid)
	var i Room
	err := row.Scan(
		&i.Roomid,
		&i.Roomname,
		&i.Location,
		&i.Capacity,
	)
	return i, err
}

const getRooms = `-- name: GetRooms :many
SELECT roomid, roomname, location, capacity FROM Rooms
`

func (q *Queries) GetRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.Roomid,
			&i.Roomname,
			&i.Location,
			&i.Capacity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE Rooms
SET RoomName = $2, Location = $3, Capacity = $4
WHERE RoomID = $1
RETURNING roomid, roomname, location, capacity
`

type UpdateRoomParams struct {
	Roomid   int32  `json:"roomid"`
	Roomname string `json:"roomname"`
	Location string `json:"location"`
	Capacity int32  `json:"capacity"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, updateRoom,
		arg.Roomid,
		arg.Roomname,
		arg.Location,
		arg.Capacity,
	)
	var i Room
	err := row.Scan(
		&i.Roomid,
		&i.Roomname,
		&i.Location,
		&i.Capacity,
	)
	return i, err
}
