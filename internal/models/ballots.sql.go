// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ballots.sql

package models

import (
	"context"
	"database/sql"
)

const createBallot = `-- name: CreateBallot :one
INSERT INTO Ballots (DebateID, JudgeID, Team1DebaterAScore, Team1DebaterAComments, Team1DebaterBScore, Team1DebaterBComments, Team1DebaterCScore, Team1DebaterCComments, Team1TotalScore, Team2DebaterAScore, Team2DebaterAComments, Team2DebaterBScore, Team2DebaterBComments, Team2DebaterCScore, Team2DebaterCComments, Team2TotalScore)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
RETURNING ballotid, debateid, judgeid, team1debaterascore, team1debateracomments, team1debaterbscore, team1debaterbcomments, team1debatercscore, team1debaterccomments, team1totalscore, team2debaterascore, team2debateracomments, team2debaterbscore, team2debaterbcomments, team2debatercscore, team2debaterccomments, team2totalscore
`

type CreateBallotParams struct {
	Debateid              int32          `json:"debateid"`
	Judgeid               int32          `json:"judgeid"`
	Team1debaterascore    sql.NullString `json:"team1debaterascore"`
	Team1debateracomments sql.NullString `json:"team1debateracomments"`
	Team1debaterbscore    sql.NullString `json:"team1debaterbscore"`
	Team1debaterbcomments sql.NullString `json:"team1debaterbcomments"`
	Team1debatercscore    sql.NullString `json:"team1debatercscore"`
	Team1debaterccomments sql.NullString `json:"team1debaterccomments"`
	Team1totalscore       sql.NullString `json:"team1totalscore"`
	Team2debaterascore    sql.NullString `json:"team2debaterascore"`
	Team2debateracomments sql.NullString `json:"team2debateracomments"`
	Team2debaterbscore    sql.NullString `json:"team2debaterbscore"`
	Team2debaterbcomments sql.NullString `json:"team2debaterbcomments"`
	Team2debatercscore    sql.NullString `json:"team2debatercscore"`
	Team2debaterccomments sql.NullString `json:"team2debaterccomments"`
	Team2totalscore       sql.NullString `json:"team2totalscore"`
}

func (q *Queries) CreateBallot(ctx context.Context, arg CreateBallotParams) (Ballot, error) {
	row := q.db.QueryRowContext(ctx, createBallot,
		arg.Debateid,
		arg.Judgeid,
		arg.Team1debaterascore,
		arg.Team1debateracomments,
		arg.Team1debaterbscore,
		arg.Team1debaterbcomments,
		arg.Team1debatercscore,
		arg.Team1debaterccomments,
		arg.Team1totalscore,
		arg.Team2debaterascore,
		arg.Team2debateracomments,
		arg.Team2debaterbscore,
		arg.Team2debaterbcomments,
		arg.Team2debatercscore,
		arg.Team2debaterccomments,
		arg.Team2totalscore,
	)
	var i Ballot
	err := row.Scan(
		&i.Ballotid,
		&i.Debateid,
		&i.Judgeid,
		&i.Team1debaterascore,
		&i.Team1debateracomments,
		&i.Team1debaterbscore,
		&i.Team1debaterbcomments,
		&i.Team1debatercscore,
		&i.Team1debaterccomments,
		&i.Team1totalscore,
		&i.Team2debaterascore,
		&i.Team2debateracomments,
		&i.Team2debaterbscore,
		&i.Team2debaterbcomments,
		&i.Team2debatercscore,
		&i.Team2debaterccomments,
		&i.Team2totalscore,
	)
	return i, err
}

const deleteBallot = `-- name: DeleteBallot :exec
DELETE FROM Ballots WHERE BallotID = $1
`

func (q *Queries) DeleteBallot(ctx context.Context, ballotid int32) error {
	_, err := q.db.ExecContext(ctx, deleteBallot, ballotid)
	return err
}

const getBallot = `-- name: GetBallot :one
SELECT ballotid, debateid, judgeid, team1debaterascore, team1debateracomments, team1debaterbscore, team1debaterbcomments, team1debatercscore, team1debaterccomments, team1totalscore, team2debaterascore, team2debateracomments, team2debaterbscore, team2debaterbcomments, team2debatercscore, team2debaterccomments, team2totalscore FROM Ballots WHERE BallotID = $1
`

func (q *Queries) GetBallot(ctx context.Context, ballotid int32) (Ballot, error) {
	row := q.db.QueryRowContext(ctx, getBallot, ballotid)
	var i Ballot
	err := row.Scan(
		&i.Ballotid,
		&i.Debateid,
		&i.Judgeid,
		&i.Team1debaterascore,
		&i.Team1debateracomments,
		&i.Team1debaterbscore,
		&i.Team1debaterbcomments,
		&i.Team1debatercscore,
		&i.Team1debaterccomments,
		&i.Team1totalscore,
		&i.Team2debaterascore,
		&i.Team2debateracomments,
		&i.Team2debaterbscore,
		&i.Team2debaterbcomments,
		&i.Team2debatercscore,
		&i.Team2debaterccomments,
		&i.Team2totalscore,
	)
	return i, err
}

const getBallots = `-- name: GetBallots :many
SELECT ballotid, debateid, judgeid, team1debaterascore, team1debateracomments, team1debaterbscore, team1debaterbcomments, team1debatercscore, team1debaterccomments, team1totalscore, team2debaterascore, team2debateracomments, team2debaterbscore, team2debaterbcomments, team2debatercscore, team2debaterccomments, team2totalscore FROM Ballots
`

func (q *Queries) GetBallots(ctx context.Context) ([]Ballot, error) {
	rows, err := q.db.QueryContext(ctx, getBallots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ballot{}
	for rows.Next() {
		var i Ballot
		if err := rows.Scan(
			&i.Ballotid,
			&i.Debateid,
			&i.Judgeid,
			&i.Team1debaterascore,
			&i.Team1debateracomments,
			&i.Team1debaterbscore,
			&i.Team1debaterbcomments,
			&i.Team1debatercscore,
			&i.Team1debaterccomments,
			&i.Team1totalscore,
			&i.Team2debaterascore,
			&i.Team2debateracomments,
			&i.Team2debaterbscore,
			&i.Team2debaterbcomments,
			&i.Team2debatercscore,
			&i.Team2debaterccomments,
			&i.Team2totalscore,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBallot = `-- name: UpdateBallot :one
UPDATE Ballots
SET DebateID = $2, JudgeID = $3, Team1DebaterAScore = $4, Team1DebaterAComments = $5, Team1DebaterBScore = $6, Team1DebaterBComments = $7, Team1DebaterCScore = $8, Team1DebaterCComments = $9, Team1TotalScore = $10, Team2DebaterAScore = $11, Team2DebaterAComments = $12, Team2DebaterBScore = $13, Team2DebaterBComments = $14, Team2DebaterCScore = $15, Team2DebaterCComments = $16, Team2TotalScore = $17
WHERE BallotID = $1
RETURNING ballotid, debateid, judgeid, team1debaterascore, team1debateracomments, team1debaterbscore, team1debaterbcomments, team1debatercscore, team1debaterccomments, team1totalscore, team2debaterascore, team2debateracomments, team2debaterbscore, team2debaterbcomments, team2debatercscore, team2debaterccomments, team2totalscore
`

type UpdateBallotParams struct {
	Ballotid              int32          `json:"ballotid"`
	Debateid              int32          `json:"debateid"`
	Judgeid               int32          `json:"judgeid"`
	Team1debaterascore    sql.NullString `json:"team1debaterascore"`
	Team1debateracomments sql.NullString `json:"team1debateracomments"`
	Team1debaterbscore    sql.NullString `json:"team1debaterbscore"`
	Team1debaterbcomments sql.NullString `json:"team1debaterbcomments"`
	Team1debatercscore    sql.NullString `json:"team1debatercscore"`
	Team1debaterccomments sql.NullString `json:"team1debaterccomments"`
	Team1totalscore       sql.NullString `json:"team1totalscore"`
	Team2debaterascore    sql.NullString `json:"team2debaterascore"`
	Team2debateracomments sql.NullString `json:"team2debateracomments"`
	Team2debaterbscore    sql.NullString `json:"team2debaterbscore"`
	Team2debaterbcomments sql.NullString `json:"team2debaterbcomments"`
	Team2debatercscore    sql.NullString `json:"team2debatercscore"`
	Team2debaterccomments sql.NullString `json:"team2debaterccomments"`
	Team2totalscore       sql.NullString `json:"team2totalscore"`
}

func (q *Queries) UpdateBallot(ctx context.Context, arg UpdateBallotParams) (Ballot, error) {
	row := q.db.QueryRowContext(ctx, updateBallot,
		arg.Ballotid,
		arg.Debateid,
		arg.Judgeid,
		arg.Team1debaterascore,
		arg.Team1debateracomments,
		arg.Team1debaterbscore,
		arg.Team1debaterbcomments,
		arg.Team1debatercscore,
		arg.Team1debaterccomments,
		arg.Team1totalscore,
		arg.Team2debaterascore,
		arg.Team2debateracomments,
		arg.Team2debaterbscore,
		arg.Team2debaterbcomments,
		arg.Team2debatercscore,
		arg.Team2debaterccomments,
		arg.Team2totalscore,
	)
	var i Ballot
	err := row.Scan(
		&i.Ballotid,
		&i.Debateid,
		&i.Judgeid,
		&i.Team1debaterascore,
		&i.Team1debateracomments,
		&i.Team1debaterbscore,
		&i.Team1debaterbcomments,
		&i.Team1debatercscore,
		&i.Team1debaterccomments,
		&i.Team1totalscore,
		&i.Team2debaterascore,
		&i.Team2debateracomments,
		&i.Team2debaterbscore,
		&i.Team2debaterbcomments,
		&i.Team2debatercscore,
		&i.Team2debaterccomments,
		&i.Team2totalscore,
	)
	return i, err
}
