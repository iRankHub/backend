// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: team_members.sql

package models

import (
	"context"
)

const addTeamMember = `-- name: AddTeamMember :exec
INSERT INTO TeamMembers (TeamID, StudentID)
VALUES ($1, $2)
`

type AddTeamMemberParams struct {
	Teamid    int32 `json:"teamid"`
	Studentid int32 `json:"studentid"`
}

func (q *Queries) AddTeamMember(ctx context.Context, arg AddTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, addTeamMember, arg.Teamid, arg.Studentid)
	return err
}

const getTeamMember = `-- name: GetTeamMember :one
SELECT teamid, studentid FROM TeamMembers WHERE TeamID = $1 AND StudentID = $2
`

type GetTeamMemberParams struct {
	Teamid    int32 `json:"teamid"`
	Studentid int32 `json:"studentid"`
}

func (q *Queries) GetTeamMember(ctx context.Context, arg GetTeamMemberParams) (Teammember, error) {
	row := q.db.QueryRowContext(ctx, getTeamMember, arg.Teamid, arg.Studentid)
	var i Teammember
	err := row.Scan(&i.Teamid, &i.Studentid)
	return i, err
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT teamid, studentid FROM TeamMembers WHERE TeamID = $1
`

func (q *Queries) GetTeamMembers(ctx context.Context, teamid int32) ([]Teammember, error) {
	rows, err := q.db.QueryContext(ctx, getTeamMembers, teamid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Teammember{}
	for rows.Next() {
		var i Teammember
		if err := rows.Scan(&i.Teamid, &i.Studentid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTeamMember = `-- name: RemoveTeamMember :exec
DELETE FROM TeamMembers WHERE TeamID = $1 AND StudentID = $2
`

type RemoveTeamMemberParams struct {
	Teamid    int32 `json:"teamid"`
	Studentid int32 `json:"studentid"`
}

func (q *Queries) RemoveTeamMember(ctx context.Context, arg RemoveTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeTeamMember, arg.Teamid, arg.Studentid)
	return err
}
