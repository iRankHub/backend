// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tournament.sql

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createLeague = `-- name: CreateLeague :one
INSERT INTO Leagues (Name, LeagueType, Details)
VALUES ($1, $2, $3)
RETURNING leagueid, name, leaguetype, details, deleted_at
`

type CreateLeagueParams struct {
	Name       string          `json:"name"`
	Leaguetype string          `json:"leaguetype"`
	Details    json.RawMessage `json:"details"`
}

// League Queries
func (q *Queries) CreateLeague(ctx context.Context, arg CreateLeagueParams) (League, error) {
	row := q.db.QueryRowContext(ctx, createLeague, arg.Name, arg.Leaguetype, arg.Details)
	var i League
	err := row.Scan(
		&i.Leagueid,
		&i.Name,
		&i.Leaguetype,
		&i.Details,
		&i.DeletedAt,
	)
	return i, err
}

const createTournamentEntry = `-- name: CreateTournamentEntry :one
INSERT INTO Tournaments (Name, StartDate, EndDate, Location, FormatID, LeagueID, NumberOfPreliminaryRounds, NumberOfEliminationRounds, JudgesPerDebatePreliminary, JudgesPerDebateElimination, TournamentFee)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING tournamentid, name, startdate, enddate, location, formatid, leagueid, numberofpreliminaryrounds, numberofeliminationrounds, judgesperdebatepreliminary, judgesperdebateelimination, tournamentfee, deleted_at
`

type CreateTournamentEntryParams struct {
	Name                       string        `json:"name"`
	Startdate                  time.Time     `json:"startdate"`
	Enddate                    time.Time     `json:"enddate"`
	Location                   string        `json:"location"`
	Formatid                   int32         `json:"formatid"`
	Leagueid                   sql.NullInt32 `json:"leagueid"`
	Numberofpreliminaryrounds  int32         `json:"numberofpreliminaryrounds"`
	Numberofeliminationrounds  int32         `json:"numberofeliminationrounds"`
	Judgesperdebatepreliminary int32         `json:"judgesperdebatepreliminary"`
	Judgesperdebateelimination int32         `json:"judgesperdebateelimination"`
	Tournamentfee              string        `json:"tournamentfee"`
}

// Tournament Queries
func (q *Queries) CreateTournamentEntry(ctx context.Context, arg CreateTournamentEntryParams) (Tournament, error) {
	row := q.db.QueryRowContext(ctx, createTournamentEntry,
		arg.Name,
		arg.Startdate,
		arg.Enddate,
		arg.Location,
		arg.Formatid,
		arg.Leagueid,
		arg.Numberofpreliminaryrounds,
		arg.Numberofeliminationrounds,
		arg.Judgesperdebatepreliminary,
		arg.Judgesperdebateelimination,
		arg.Tournamentfee,
	)
	var i Tournament
	err := row.Scan(
		&i.Tournamentid,
		&i.Name,
		&i.Startdate,
		&i.Enddate,
		&i.Location,
		&i.Formatid,
		&i.Leagueid,
		&i.Numberofpreliminaryrounds,
		&i.Numberofeliminationrounds,
		&i.Judgesperdebatepreliminary,
		&i.Judgesperdebateelimination,
		&i.Tournamentfee,
		&i.DeletedAt,
	)
	return i, err
}

const createTournamentFormat = `-- name: CreateTournamentFormat :one
INSERT INTO TournamentFormats (FormatName, Description, SpeakersPerTeam)
VALUES ($1, $2, $3)
RETURNING formatid, formatname, description, speakersperteam, deleted_at
`

type CreateTournamentFormatParams struct {
	Formatname      string         `json:"formatname"`
	Description     sql.NullString `json:"description"`
	Speakersperteam int32          `json:"speakersperteam"`
}

// Tournament Format Queries
func (q *Queries) CreateTournamentFormat(ctx context.Context, arg CreateTournamentFormatParams) (Tournamentformat, error) {
	row := q.db.QueryRowContext(ctx, createTournamentFormat, arg.Formatname, arg.Description, arg.Speakersperteam)
	var i Tournamentformat
	err := row.Scan(
		&i.Formatid,
		&i.Formatname,
		&i.Description,
		&i.Speakersperteam,
		&i.DeletedAt,
	)
	return i, err
}

const deleteLeagueByID = `-- name: DeleteLeagueByID :exec
UPDATE Leagues
SET deleted_at = CURRENT_TIMESTAMP
WHERE LeagueID = $1
`

func (q *Queries) DeleteLeagueByID(ctx context.Context, leagueid int32) error {
	_, err := q.db.ExecContext(ctx, deleteLeagueByID, leagueid)
	return err
}

const deleteTournamentByID = `-- name: DeleteTournamentByID :exec
UPDATE Tournaments
SET deleted_at = CURRENT_TIMESTAMP
WHERE TournamentID = $1
`

func (q *Queries) DeleteTournamentByID(ctx context.Context, tournamentid int32) error {
	_, err := q.db.ExecContext(ctx, deleteTournamentByID, tournamentid)
	return err
}

const deleteTournamentFormatByID = `-- name: DeleteTournamentFormatByID :exec
UPDATE TournamentFormats
SET deleted_at = CURRENT_TIMESTAMP
WHERE FormatID = $1
`

func (q *Queries) DeleteTournamentFormatByID(ctx context.Context, formatid int32) error {
	_, err := q.db.ExecContext(ctx, deleteTournamentFormatByID, formatid)
	return err
}

const getLeagueByID = `-- name: GetLeagueByID :one
SELECT leagueid, name, leaguetype, details, deleted_at FROM Leagues
WHERE LeagueID = $1 AND deleted_at IS NULL
`

func (q *Queries) GetLeagueByID(ctx context.Context, leagueid int32) (League, error) {
	row := q.db.QueryRowContext(ctx, getLeagueByID, leagueid)
	var i League
	err := row.Scan(
		&i.Leagueid,
		&i.Name,
		&i.Leaguetype,
		&i.Details,
		&i.DeletedAt,
	)
	return i, err
}

const getTournamentByID = `-- name: GetTournamentByID :one
SELECT t.tournamentid, t.name, t.startdate, t.enddate, t.location, t.formatid, t.leagueid, t.numberofpreliminaryrounds, t.numberofeliminationrounds, t.judgesperdebatepreliminary, t.judgesperdebateelimination, t.tournamentfee, t.deleted_at, tf.formatid, tf.formatname, tf.description, tf.speakersperteam, tf.deleted_at, l.leagueid, l.name, l.leaguetype, l.details, l.deleted_at
FROM Tournaments t
JOIN TournamentFormats tf ON t.FormatID = tf.FormatID
JOIN Leagues l ON t.LeagueID = l.LeagueID
LEFT JOIN TournamentCoordinators tc ON t.TournamentID = tc.TournamentID
WHERE t.TournamentID = $1 AND t.deleted_at IS NULL
`

type GetTournamentByIDRow struct {
	Tournamentid               int32           `json:"tournamentid"`
	Name                       string          `json:"name"`
	Startdate                  time.Time       `json:"startdate"`
	Enddate                    time.Time       `json:"enddate"`
	Location                   string          `json:"location"`
	Formatid                   int32           `json:"formatid"`
	Leagueid                   sql.NullInt32   `json:"leagueid"`
	Numberofpreliminaryrounds  int32           `json:"numberofpreliminaryrounds"`
	Numberofeliminationrounds  int32           `json:"numberofeliminationrounds"`
	Judgesperdebatepreliminary int32           `json:"judgesperdebatepreliminary"`
	Judgesperdebateelimination int32           `json:"judgesperdebateelimination"`
	Tournamentfee              string          `json:"tournamentfee"`
	DeletedAt                  sql.NullTime    `json:"deleted_at"`
	Formatid_2                 int32           `json:"formatid_2"`
	Formatname                 string          `json:"formatname"`
	Description                sql.NullString  `json:"description"`
	Speakersperteam            int32           `json:"speakersperteam"`
	DeletedAt_2                sql.NullTime    `json:"deleted_at_2"`
	Leagueid_2                 int32           `json:"leagueid_2"`
	Name_2                     string          `json:"name_2"`
	Leaguetype                 string          `json:"leaguetype"`
	Details                    json.RawMessage `json:"details"`
	DeletedAt_3                sql.NullTime    `json:"deleted_at_3"`
}

func (q *Queries) GetTournamentByID(ctx context.Context, tournamentid int32) (GetTournamentByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTournamentByID, tournamentid)
	var i GetTournamentByIDRow
	err := row.Scan(
		&i.Tournamentid,
		&i.Name,
		&i.Startdate,
		&i.Enddate,
		&i.Location,
		&i.Formatid,
		&i.Leagueid,
		&i.Numberofpreliminaryrounds,
		&i.Numberofeliminationrounds,
		&i.Judgesperdebatepreliminary,
		&i.Judgesperdebateelimination,
		&i.Tournamentfee,
		&i.DeletedAt,
		&i.Formatid_2,
		&i.Formatname,
		&i.Description,
		&i.Speakersperteam,
		&i.DeletedAt_2,
		&i.Leagueid_2,
		&i.Name_2,
		&i.Leaguetype,
		&i.Details,
		&i.DeletedAt_3,
	)
	return i, err
}

const getTournamentFormatByID = `-- name: GetTournamentFormatByID :one
SELECT formatid, formatname, description, speakersperteam, deleted_at FROM TournamentFormats
WHERE FormatID = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTournamentFormatByID(ctx context.Context, formatid int32) (Tournamentformat, error) {
	row := q.db.QueryRowContext(ctx, getTournamentFormatByID, formatid)
	var i Tournamentformat
	err := row.Scan(
		&i.Formatid,
		&i.Formatname,
		&i.Description,
		&i.Speakersperteam,
		&i.DeletedAt,
	)
	return i, err
}

const listLeaguesPaginated = `-- name: ListLeaguesPaginated :many
SELECT leagueid, name, leaguetype, details, deleted_at FROM Leagues
WHERE deleted_at IS NULL
ORDER BY LeagueID
LIMIT $1 OFFSET $2
`

type ListLeaguesPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLeaguesPaginated(ctx context.Context, arg ListLeaguesPaginatedParams) ([]League, error) {
	rows, err := q.db.QueryContext(ctx, listLeaguesPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []League{}
	for rows.Next() {
		var i League
		if err := rows.Scan(
			&i.Leagueid,
			&i.Name,
			&i.Leaguetype,
			&i.Details,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTournamentFormatsPaginated = `-- name: ListTournamentFormatsPaginated :many
SELECT formatid, formatname, description, speakersperteam, deleted_at FROM TournamentFormats
WHERE deleted_at IS NULL
ORDER BY FormatID
LIMIT $1 OFFSET $2
`

type ListTournamentFormatsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTournamentFormatsPaginated(ctx context.Context, arg ListTournamentFormatsPaginatedParams) ([]Tournamentformat, error) {
	rows, err := q.db.QueryContext(ctx, listTournamentFormatsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tournamentformat{}
	for rows.Next() {
		var i Tournamentformat
		if err := rows.Scan(
			&i.Formatid,
			&i.Formatname,
			&i.Description,
			&i.Speakersperteam,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTournamentsPaginated = `-- name: ListTournamentsPaginated :many
SELECT t.tournamentid, t.name, t.startdate, t.enddate, t.location, t.formatid, t.leagueid, t.numberofpreliminaryrounds, t.numberofeliminationrounds, t.judgesperdebatepreliminary, t.judgesperdebateelimination, t.tournamentfee, t.deleted_at, tf.formatid, tf.formatname, tf.description, tf.speakersperteam, tf.deleted_at, l.leagueid, l.name, l.leaguetype, l.details, l.deleted_at
FROM Tournaments t
JOIN TournamentFormats tf ON t.FormatID = tf.FormatID
JOIN Leagues l ON t.LeagueID = l.LeagueID
LEFT JOIN TournamentCoordinators tc ON t.TournamentID = tc.TournamentID
WHERE t.deleted_at IS NULL
ORDER BY t.TournamentID
LIMIT $1 OFFSET $2
`

type ListTournamentsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListTournamentsPaginatedRow struct {
	Tournamentid               int32           `json:"tournamentid"`
	Name                       string          `json:"name"`
	Startdate                  time.Time       `json:"startdate"`
	Enddate                    time.Time       `json:"enddate"`
	Location                   string          `json:"location"`
	Formatid                   int32           `json:"formatid"`
	Leagueid                   sql.NullInt32   `json:"leagueid"`
	Numberofpreliminaryrounds  int32           `json:"numberofpreliminaryrounds"`
	Numberofeliminationrounds  int32           `json:"numberofeliminationrounds"`
	Judgesperdebatepreliminary int32           `json:"judgesperdebatepreliminary"`
	Judgesperdebateelimination int32           `json:"judgesperdebateelimination"`
	Tournamentfee              string          `json:"tournamentfee"`
	DeletedAt                  sql.NullTime    `json:"deleted_at"`
	Formatid_2                 int32           `json:"formatid_2"`
	Formatname                 string          `json:"formatname"`
	Description                sql.NullString  `json:"description"`
	Speakersperteam            int32           `json:"speakersperteam"`
	DeletedAt_2                sql.NullTime    `json:"deleted_at_2"`
	Leagueid_2                 int32           `json:"leagueid_2"`
	Name_2                     string          `json:"name_2"`
	Leaguetype                 string          `json:"leaguetype"`
	Details                    json.RawMessage `json:"details"`
	DeletedAt_3                sql.NullTime    `json:"deleted_at_3"`
}

func (q *Queries) ListTournamentsPaginated(ctx context.Context, arg ListTournamentsPaginatedParams) ([]ListTournamentsPaginatedRow, error) {
	rows, err := q.db.QueryContext(ctx, listTournamentsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTournamentsPaginatedRow{}
	for rows.Next() {
		var i ListTournamentsPaginatedRow
		if err := rows.Scan(
			&i.Tournamentid,
			&i.Name,
			&i.Startdate,
			&i.Enddate,
			&i.Location,
			&i.Formatid,
			&i.Leagueid,
			&i.Numberofpreliminaryrounds,
			&i.Numberofeliminationrounds,
			&i.Judgesperdebatepreliminary,
			&i.Judgesperdebateelimination,
			&i.Tournamentfee,
			&i.DeletedAt,
			&i.Formatid_2,
			&i.Formatname,
			&i.Description,
			&i.Speakersperteam,
			&i.DeletedAt_2,
			&i.Leagueid_2,
			&i.Name_2,
			&i.Leaguetype,
			&i.Details,
			&i.DeletedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLeague = `-- name: UpdateLeague :one
UPDATE Leagues
SET Name = $2, LeagueType = $3, Details = $4
WHERE LeagueID = $1
RETURNING leagueid, name, leaguetype, details, deleted_at
`

type UpdateLeagueParams struct {
	Leagueid   int32           `json:"leagueid"`
	Name       string          `json:"name"`
	Leaguetype string          `json:"leaguetype"`
	Details    json.RawMessage `json:"details"`
}

func (q *Queries) UpdateLeague(ctx context.Context, arg UpdateLeagueParams) (League, error) {
	row := q.db.QueryRowContext(ctx, updateLeague,
		arg.Leagueid,
		arg.Name,
		arg.Leaguetype,
		arg.Details,
	)
	var i League
	err := row.Scan(
		&i.Leagueid,
		&i.Name,
		&i.Leaguetype,
		&i.Details,
		&i.DeletedAt,
	)
	return i, err
}

const updateTournamentDetails = `-- name: UpdateTournamentDetails :one
UPDATE Tournaments
SET Name = $2, StartDate = $3, EndDate = $4, Location = $5, FormatID = $6, LeagueID = $7, NumberOfPreliminaryRounds = $8, NumberOfEliminationRounds = $9, JudgesPerDebatePreliminary = $10, JudgesPerDebateElimination = $11, TournamentFee = $12
WHERE TournamentID = $1
RETURNING tournamentid, name, startdate, enddate, location, formatid, leagueid, numberofpreliminaryrounds, numberofeliminationrounds, judgesperdebatepreliminary, judgesperdebateelimination, tournamentfee, deleted_at
`

type UpdateTournamentDetailsParams struct {
	Tournamentid               int32         `json:"tournamentid"`
	Name                       string        `json:"name"`
	Startdate                  time.Time     `json:"startdate"`
	Enddate                    time.Time     `json:"enddate"`
	Location                   string        `json:"location"`
	Formatid                   int32         `json:"formatid"`
	Leagueid                   sql.NullInt32 `json:"leagueid"`
	Numberofpreliminaryrounds  int32         `json:"numberofpreliminaryrounds"`
	Numberofeliminationrounds  int32         `json:"numberofeliminationrounds"`
	Judgesperdebatepreliminary int32         `json:"judgesperdebatepreliminary"`
	Judgesperdebateelimination int32         `json:"judgesperdebateelimination"`
	Tournamentfee              string        `json:"tournamentfee"`
}

func (q *Queries) UpdateTournamentDetails(ctx context.Context, arg UpdateTournamentDetailsParams) (Tournament, error) {
	row := q.db.QueryRowContext(ctx, updateTournamentDetails,
		arg.Tournamentid,
		arg.Name,
		arg.Startdate,
		arg.Enddate,
		arg.Location,
		arg.Formatid,
		arg.Leagueid,
		arg.Numberofpreliminaryrounds,
		arg.Numberofeliminationrounds,
		arg.Judgesperdebatepreliminary,
		arg.Judgesperdebateelimination,
		arg.Tournamentfee,
	)
	var i Tournament
	err := row.Scan(
		&i.Tournamentid,
		&i.Name,
		&i.Startdate,
		&i.Enddate,
		&i.Location,
		&i.Formatid,
		&i.Leagueid,
		&i.Numberofpreliminaryrounds,
		&i.Numberofeliminationrounds,
		&i.Judgesperdebatepreliminary,
		&i.Judgesperdebateelimination,
		&i.Tournamentfee,
		&i.DeletedAt,
	)
	return i, err
}

const updateTournamentFormatDetails = `-- name: UpdateTournamentFormatDetails :one
UPDATE TournamentFormats
SET FormatName = $2, Description = $3, SpeakersPerTeam = $4
WHERE FormatID = $1
RETURNING formatid, formatname, description, speakersperteam, deleted_at
`

type UpdateTournamentFormatDetailsParams struct {
	Formatid        int32          `json:"formatid"`
	Formatname      string         `json:"formatname"`
	Description     sql.NullString `json:"description"`
	Speakersperteam int32          `json:"speakersperteam"`
}

func (q *Queries) UpdateTournamentFormatDetails(ctx context.Context, arg UpdateTournamentFormatDetailsParams) (Tournamentformat, error) {
	row := q.db.QueryRowContext(ctx, updateTournamentFormatDetails,
		arg.Formatid,
		arg.Formatname,
		arg.Description,
		arg.Speakersperteam,
	)
	var i Tournamentformat
	err := row.Scan(
		&i.Formatid,
		&i.Formatname,
		&i.Description,
		&i.Speakersperteam,
		&i.DeletedAt,
	)
	return i, err
}
