// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tournament.sql

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createInvitation = `-- name: CreateInvitation :one
INSERT INTO TournamentInvitations (TournamentID, SchoolID, VolunteerID, StudentID, UserID, Status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING invitationid, tournamentid, schoolid, volunteerid, studentid, userid, status, invitedat, remindersentat, respondedat
`

type CreateInvitationParams struct {
	Tournamentid int32         `json:"tournamentid"`
	Schoolid     sql.NullInt32 `json:"schoolid"`
	Volunteerid  sql.NullInt32 `json:"volunteerid"`
	Studentid    sql.NullInt32 `json:"studentid"`
	Userid       sql.NullInt32 `json:"userid"`
	Status       string        `json:"status"`
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Tournamentinvitation, error) {
	row := q.db.QueryRowContext(ctx, createInvitation,
		arg.Tournamentid,
		arg.Schoolid,
		arg.Volunteerid,
		arg.Studentid,
		arg.Userid,
		arg.Status,
	)
	var i Tournamentinvitation
	err := row.Scan(
		&i.Invitationid,
		&i.Tournamentid,
		&i.Schoolid,
		&i.Volunteerid,
		&i.Studentid,
		&i.Userid,
		&i.Status,
		&i.Invitedat,
		&i.Remindersentat,
		&i.Respondedat,
	)
	return i, err
}

const createLeague = `-- name: CreateLeague :one
INSERT INTO Leagues (Name, LeagueType, Details)
VALUES ($1, $2, $3)
RETURNING leagueid, name, leaguetype, details, deleted_at
`

type CreateLeagueParams struct {
	Name       string          `json:"name"`
	Leaguetype string          `json:"leaguetype"`
	Details    json.RawMessage `json:"details"`
}

// League Queries
func (q *Queries) CreateLeague(ctx context.Context, arg CreateLeagueParams) (League, error) {
	row := q.db.QueryRowContext(ctx, createLeague, arg.Name, arg.Leaguetype, arg.Details)
	var i League
	err := row.Scan(
		&i.Leagueid,
		&i.Name,
		&i.Leaguetype,
		&i.Details,
		&i.DeletedAt,
	)
	return i, err
}

const createTournamentEntry = `-- name: CreateTournamentEntry :one
INSERT INTO Tournaments (Name, StartDate, EndDate, Location, FormatID, LeagueID, CoordinatorID, NumberOfPreliminaryRounds, NumberOfEliminationRounds, JudgesPerDebatePreliminary, JudgesPerDebateElimination, TournamentFee, ImageUrl)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING tournamentid, name, startdate, enddate, location, formatid, leagueid, coordinatorid, numberofpreliminaryrounds, numberofeliminationrounds, judgesperdebatepreliminary, judgesperdebateelimination, tournamentfee, imageurl, created_at, updated_at, deleted_at
`

type CreateTournamentEntryParams struct {
	Name                       string         `json:"name"`
	Startdate                  time.Time      `json:"startdate"`
	Enddate                    time.Time      `json:"enddate"`
	Location                   string         `json:"location"`
	Formatid                   int32          `json:"formatid"`
	Leagueid                   sql.NullInt32  `json:"leagueid"`
	Coordinatorid              int32          `json:"coordinatorid"`
	Numberofpreliminaryrounds  int32          `json:"numberofpreliminaryrounds"`
	Numberofeliminationrounds  int32          `json:"numberofeliminationrounds"`
	Judgesperdebatepreliminary int32          `json:"judgesperdebatepreliminary"`
	Judgesperdebateelimination int32          `json:"judgesperdebateelimination"`
	Tournamentfee              string         `json:"tournamentfee"`
	Imageurl                   sql.NullString `json:"imageurl"`
}

// Tournament Queries
func (q *Queries) CreateTournamentEntry(ctx context.Context, arg CreateTournamentEntryParams) (Tournament, error) {
	row := q.db.QueryRowContext(ctx, createTournamentEntry,
		arg.Name,
		arg.Startdate,
		arg.Enddate,
		arg.Location,
		arg.Formatid,
		arg.Leagueid,
		arg.Coordinatorid,
		arg.Numberofpreliminaryrounds,
		arg.Numberofeliminationrounds,
		arg.Judgesperdebatepreliminary,
		arg.Judgesperdebateelimination,
		arg.Tournamentfee,
		arg.Imageurl,
	)
	var i Tournament
	err := row.Scan(
		&i.Tournamentid,
		&i.Name,
		&i.Startdate,
		&i.Enddate,
		&i.Location,
		&i.Formatid,
		&i.Leagueid,
		&i.Coordinatorid,
		&i.Numberofpreliminaryrounds,
		&i.Numberofeliminationrounds,
		&i.Judgesperdebatepreliminary,
		&i.Judgesperdebateelimination,
		&i.Tournamentfee,
		&i.Imageurl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createTournamentFormat = `-- name: CreateTournamentFormat :one
INSERT INTO TournamentFormats (FormatName, Description, SpeakersPerTeam)
VALUES ($1, $2, $3)
RETURNING formatid, formatname, description, speakersperteam, deleted_at
`

type CreateTournamentFormatParams struct {
	Formatname      string         `json:"formatname"`
	Description     sql.NullString `json:"description"`
	Speakersperteam int32          `json:"speakersperteam"`
}

// Tournament Format Queries
func (q *Queries) CreateTournamentFormat(ctx context.Context, arg CreateTournamentFormatParams) (Tournamentformat, error) {
	row := q.db.QueryRowContext(ctx, createTournamentFormat, arg.Formatname, arg.Description, arg.Speakersperteam)
	var i Tournamentformat
	err := row.Scan(
		&i.Formatid,
		&i.Formatname,
		&i.Description,
		&i.Speakersperteam,
		&i.DeletedAt,
	)
	return i, err
}

const deleteLeagueByID = `-- name: DeleteLeagueByID :exec
UPDATE Leagues
SET deleted_at = CURRENT_TIMESTAMP
WHERE LeagueID = $1
`

func (q *Queries) DeleteLeagueByID(ctx context.Context, leagueid int32) error {
	_, err := q.db.ExecContext(ctx, deleteLeagueByID, leagueid)
	return err
}

const deleteTournamentByID = `-- name: DeleteTournamentByID :exec
UPDATE Tournaments
SET deleted_at = CURRENT_TIMESTAMP
WHERE TournamentID = $1
`

func (q *Queries) DeleteTournamentByID(ctx context.Context, tournamentid int32) error {
	_, err := q.db.ExecContext(ctx, deleteTournamentByID, tournamentid)
	return err
}

const deleteTournamentFormatByID = `-- name: DeleteTournamentFormatByID :exec
UPDATE TournamentFormats
SET deleted_at = CURRENT_TIMESTAMP
WHERE FormatID = $1
`

func (q *Queries) DeleteTournamentFormatByID(ctx context.Context, formatid int32) error {
	_, err := q.db.ExecContext(ctx, deleteTournamentFormatByID, formatid)
	return err
}

const getActiveTournaments = `-- name: GetActiveTournaments :many
SELECT tournamentid, name, startdate, enddate, location, formatid, leagueid, coordinatorid, numberofpreliminaryrounds, numberofeliminationrounds, judgesperdebatepreliminary, judgesperdebateelimination, tournamentfee, imageurl, created_at, updated_at, deleted_at FROM Tournaments
WHERE StartDate > CURRENT_TIMESTAMP
  AND deleted_at IS NULL
ORDER BY StartDate
`

func (q *Queries) GetActiveTournaments(ctx context.Context) ([]Tournament, error) {
	rows, err := q.db.QueryContext(ctx, getActiveTournaments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tournament{}
	for rows.Next() {
		var i Tournament
		if err := rows.Scan(
			&i.Tournamentid,
			&i.Name,
			&i.Startdate,
			&i.Enddate,
			&i.Location,
			&i.Formatid,
			&i.Leagueid,
			&i.Coordinatorid,
			&i.Numberofpreliminaryrounds,
			&i.Numberofeliminationrounds,
			&i.Judgesperdebatepreliminary,
			&i.Judgesperdebateelimination,
			&i.Tournamentfee,
			&i.Imageurl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllInvitations = `-- name: GetAllInvitations :many
SELECT invitationid, tournamentid, status
FROM tournamentinvitations
ORDER BY invitationid
`

type GetAllInvitationsRow struct {
	Invitationid int32  `json:"invitationid"`
	Tournamentid int32  `json:"tournamentid"`
	Status       string `json:"status"`
}

func (q *Queries) GetAllInvitations(ctx context.Context) ([]GetAllInvitationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllInvitations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllInvitationsRow{}
	for rows.Next() {
		var i GetAllInvitationsRow
		if err := rows.Scan(&i.Invitationid, &i.Tournamentid, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvitationByID = `-- name: GetInvitationByID :one
SELECT invitationid, tournamentid, schoolid, volunteerid, studentid, userid, status, invitedat, remindersentat, respondedat FROM TournamentInvitations
WHERE InvitationID = $1
`

func (q *Queries) GetInvitationByID(ctx context.Context, invitationid int32) (Tournamentinvitation, error) {
	row := q.db.QueryRowContext(ctx, getInvitationByID, invitationid)
	var i Tournamentinvitation
	err := row.Scan(
		&i.Invitationid,
		&i.Tournamentid,
		&i.Schoolid,
		&i.Volunteerid,
		&i.Studentid,
		&i.Userid,
		&i.Status,
		&i.Invitedat,
		&i.Remindersentat,
		&i.Respondedat,
	)
	return i, err
}

const getInvitationStatus = `-- name: GetInvitationStatus :one
SELECT status
FROM tournamentinvitations
WHERE invitationid = $1
`

func (q *Queries) GetInvitationStatus(ctx context.Context, invitationid int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getInvitationStatus, invitationid)
	var status string
	err := row.Scan(&status)
	return status, err
}

const getInvitationsByUserID = `-- name: GetInvitationsByUserID :many
SELECT invitationid, tournamentid, schoolid, volunteerid, studentid, userid, status, invitedat, remindersentat, respondedat FROM TournamentInvitations
WHERE UserID = $1
`

func (q *Queries) GetInvitationsByUserID(ctx context.Context, userid sql.NullInt32) ([]Tournamentinvitation, error) {
	rows, err := q.db.QueryContext(ctx, getInvitationsByUserID, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tournamentinvitation{}
	for rows.Next() {
		var i Tournamentinvitation
		if err := rows.Scan(
			&i.Invitationid,
			&i.Tournamentid,
			&i.Schoolid,
			&i.Volunteerid,
			&i.Studentid,
			&i.Userid,
			&i.Status,
			&i.Invitedat,
			&i.Remindersentat,
			&i.Respondedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeagueByID = `-- name: GetLeagueByID :one
SELECT leagueid, name, leaguetype, details, deleted_at FROM Leagues
WHERE LeagueID = $1 AND deleted_at IS NULL
`

func (q *Queries) GetLeagueByID(ctx context.Context, leagueid int32) (League, error) {
	row := q.db.QueryRowContext(ctx, getLeagueByID, leagueid)
	var i League
	err := row.Scan(
		&i.Leagueid,
		&i.Name,
		&i.Leaguetype,
		&i.Details,
		&i.DeletedAt,
	)
	return i, err
}

const getPendingInvitations = `-- name: GetPendingInvitations :many
SELECT ti.invitationid, ti.tournamentid, ti.schoolid, ti.volunteerid, ti.studentid, ti.userid, ti.status, ti.invitedat, ti.remindersentat, ti.respondedat,
       s.SchoolName, s.ContactEmail, s.SchoolEmail,
       v.VolunteerID, v.FirstName as VolunteerFirstName, v.LastName as VolunteerLastName, u.Email as VolunteerEmail,
       st.StudentID, st.Email as StudentEmail, st.FirstName as StudentFirstName, st.LastName as StudentLastName
FROM TournamentInvitations ti
LEFT JOIN Schools s ON ti.SchoolID = s.SchoolID
LEFT JOIN Volunteers v ON ti.VolunteerID = v.VolunteerID
LEFT JOIN Users u ON ti.UserID = u.UserID
LEFT JOIN Students st ON ti.StudentID = st.StudentID
WHERE ti.Status = 'pending'
  AND ti.TournamentID = $1
`

type GetPendingInvitationsRow struct {
	Invitationid       int32          `json:"invitationid"`
	Tournamentid       int32          `json:"tournamentid"`
	Schoolid           sql.NullInt32  `json:"schoolid"`
	Volunteerid        sql.NullInt32  `json:"volunteerid"`
	Studentid          sql.NullInt32  `json:"studentid"`
	Userid             sql.NullInt32  `json:"userid"`
	Status             string         `json:"status"`
	Invitedat          time.Time      `json:"invitedat"`
	Remindersentat     sql.NullTime   `json:"remindersentat"`
	Respondedat        sql.NullTime   `json:"respondedat"`
	Schoolname         sql.NullString `json:"schoolname"`
	Contactemail       sql.NullString `json:"contactemail"`
	Schoolemail        sql.NullString `json:"schoolemail"`
	Volunteerid_2      sql.NullInt32  `json:"volunteerid_2"`
	Volunteerfirstname sql.NullString `json:"volunteerfirstname"`
	Volunteerlastname  sql.NullString `json:"volunteerlastname"`
	Volunteeremail     sql.NullString `json:"volunteeremail"`
	Studentid_2        sql.NullInt32  `json:"studentid_2"`
	Studentemail       sql.NullString `json:"studentemail"`
	Studentfirstname   sql.NullString `json:"studentfirstname"`
	Studentlastname    sql.NullString `json:"studentlastname"`
}

func (q *Queries) GetPendingInvitations(ctx context.Context, tournamentid int32) ([]GetPendingInvitationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPendingInvitations, tournamentid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPendingInvitationsRow{}
	for rows.Next() {
		var i GetPendingInvitationsRow
		if err := rows.Scan(
			&i.Invitationid,
			&i.Tournamentid,
			&i.Schoolid,
			&i.Volunteerid,
			&i.Studentid,
			&i.Userid,
			&i.Status,
			&i.Invitedat,
			&i.Remindersentat,
			&i.Respondedat,
			&i.Schoolname,
			&i.Contactemail,
			&i.Schoolemail,
			&i.Volunteerid_2,
			&i.Volunteerfirstname,
			&i.Volunteerlastname,
			&i.Volunteeremail,
			&i.Studentid_2,
			&i.Studentemail,
			&i.Studentfirstname,
			&i.Studentlastname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamsByInvitation = `-- name: GetTeamsByInvitation :many
SELECT t.teamid, t.name, t.schoolid, t.invitationid, t.tournamentid, COUNT(tm.StudentID) as number_of_speakers
FROM Teams t
LEFT JOIN TeamMembers tm ON t.TeamID = tm.TeamID
WHERE t.InvitationID = $1
GROUP BY t.TeamID
`

type GetTeamsByInvitationRow struct {
	Teamid           int32         `json:"teamid"`
	Name             string        `json:"name"`
	Schoolid         int32         `json:"schoolid"`
	Invitationid     sql.NullInt32 `json:"invitationid"`
	Tournamentid     int32         `json:"tournamentid"`
	NumberOfSpeakers int64         `json:"number_of_speakers"`
}

func (q *Queries) GetTeamsByInvitation(ctx context.Context, invitationid sql.NullInt32) ([]GetTeamsByInvitationRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeamsByInvitation, invitationid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTeamsByInvitationRow{}
	for rows.Next() {
		var i GetTeamsByInvitationRow
		if err := rows.Scan(
			&i.Teamid,
			&i.Name,
			&i.Schoolid,
			&i.Invitationid,
			&i.Tournamentid,
			&i.NumberOfSpeakers,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTournamentByID = `-- name: GetTournamentByID :one
SELECT t.tournamentid, t.name, t.startdate, t.enddate, t.location, t.formatid, t.leagueid, t.coordinatorid, t.numberofpreliminaryrounds, t.numberofeliminationrounds, t.judgesperdebatepreliminary, t.judgesperdebateelimination, t.tournamentfee, t.imageurl, t.created_at, t.updated_at, t.deleted_at, tf.FormatName, tf.Description AS FormatDescription, tf.SpeakersPerTeam,
       l.Name AS LeagueName, l.LeagueType, l.Details AS LeagueDetails
FROM Tournaments t
JOIN TournamentFormats tf ON t.FormatID = tf.FormatID
JOIN Leagues l ON t.LeagueID = l.LeagueID
WHERE t.TournamentID = $1 AND t.deleted_at IS NULL
`

type GetTournamentByIDRow struct {
	Tournamentid               int32           `json:"tournamentid"`
	Name                       string          `json:"name"`
	Startdate                  time.Time       `json:"startdate"`
	Enddate                    time.Time       `json:"enddate"`
	Location                   string          `json:"location"`
	Formatid                   int32           `json:"formatid"`
	Leagueid                   sql.NullInt32   `json:"leagueid"`
	Coordinatorid              int32           `json:"coordinatorid"`
	Numberofpreliminaryrounds  int32           `json:"numberofpreliminaryrounds"`
	Numberofeliminationrounds  int32           `json:"numberofeliminationrounds"`
	Judgesperdebatepreliminary int32           `json:"judgesperdebatepreliminary"`
	Judgesperdebateelimination int32           `json:"judgesperdebateelimination"`
	Tournamentfee              string          `json:"tournamentfee"`
	Imageurl                   sql.NullString  `json:"imageurl"`
	CreatedAt                  sql.NullTime    `json:"created_at"`
	UpdatedAt                  sql.NullTime    `json:"updated_at"`
	DeletedAt                  sql.NullTime    `json:"deleted_at"`
	Formatname                 string          `json:"formatname"`
	Formatdescription          sql.NullString  `json:"formatdescription"`
	Speakersperteam            int32           `json:"speakersperteam"`
	Leaguename                 string          `json:"leaguename"`
	Leaguetype                 string          `json:"leaguetype"`
	Leaguedetails              json.RawMessage `json:"leaguedetails"`
}

func (q *Queries) GetTournamentByID(ctx context.Context, tournamentid int32) (GetTournamentByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTournamentByID, tournamentid)
	var i GetTournamentByIDRow
	err := row.Scan(
		&i.Tournamentid,
		&i.Name,
		&i.Startdate,
		&i.Enddate,
		&i.Location,
		&i.Formatid,
		&i.Leagueid,
		&i.Coordinatorid,
		&i.Numberofpreliminaryrounds,
		&i.Numberofeliminationrounds,
		&i.Judgesperdebatepreliminary,
		&i.Judgesperdebateelimination,
		&i.Tournamentfee,
		&i.Imageurl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Formatname,
		&i.Formatdescription,
		&i.Speakersperteam,
		&i.Leaguename,
		&i.Leaguetype,
		&i.Leaguedetails,
	)
	return i, err
}

const getTournamentFormatByID = `-- name: GetTournamentFormatByID :one
SELECT formatid, formatname, description, speakersperteam, deleted_at FROM TournamentFormats
WHERE FormatID = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTournamentFormatByID(ctx context.Context, formatid int32) (Tournamentformat, error) {
	row := q.db.QueryRowContext(ctx, getTournamentFormatByID, formatid)
	var i Tournamentformat
	err := row.Scan(
		&i.Formatid,
		&i.Formatname,
		&i.Description,
		&i.Speakersperteam,
		&i.DeletedAt,
	)
	return i, err
}

const listLeaguesPaginated = `-- name: ListLeaguesPaginated :many
SELECT leagueid, name, leaguetype, details, deleted_at FROM Leagues
WHERE deleted_at IS NULL
ORDER BY LeagueID
LIMIT $1 OFFSET $2
`

type ListLeaguesPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLeaguesPaginated(ctx context.Context, arg ListLeaguesPaginatedParams) ([]League, error) {
	rows, err := q.db.QueryContext(ctx, listLeaguesPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []League{}
	for rows.Next() {
		var i League
		if err := rows.Scan(
			&i.Leagueid,
			&i.Name,
			&i.Leaguetype,
			&i.Details,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTournamentFormatsPaginated = `-- name: ListTournamentFormatsPaginated :many
SELECT formatid, formatname, description, speakersperteam, deleted_at FROM TournamentFormats
WHERE deleted_at IS NULL
ORDER BY FormatID
LIMIT $1 OFFSET $2
`

type ListTournamentFormatsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTournamentFormatsPaginated(ctx context.Context, arg ListTournamentFormatsPaginatedParams) ([]Tournamentformat, error) {
	rows, err := q.db.QueryContext(ctx, listTournamentFormatsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tournamentformat{}
	for rows.Next() {
		var i Tournamentformat
		if err := rows.Scan(
			&i.Formatid,
			&i.Formatname,
			&i.Description,
			&i.Speakersperteam,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTournamentsPaginated = `-- name: ListTournamentsPaginated :many
SELECT t.tournamentid, t.name, t.startdate, t.enddate, t.location, t.formatid, t.leagueid, t.coordinatorid, t.numberofpreliminaryrounds, t.numberofeliminationrounds, t.judgesperdebatepreliminary, t.judgesperdebateelimination, t.tournamentfee, t.imageurl, t.created_at, t.updated_at, t.deleted_at, tf.FormatName, l.Name AS LeagueName
FROM Tournaments t
JOIN TournamentFormats tf ON t.FormatID = tf.FormatID
JOIN Leagues l ON t.LeagueID = l.LeagueID
WHERE t.deleted_at IS NULL
ORDER BY t.StartDate DESC
LIMIT $1 OFFSET $2
`

type ListTournamentsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListTournamentsPaginatedRow struct {
	Tournamentid               int32          `json:"tournamentid"`
	Name                       string         `json:"name"`
	Startdate                  time.Time      `json:"startdate"`
	Enddate                    time.Time      `json:"enddate"`
	Location                   string         `json:"location"`
	Formatid                   int32          `json:"formatid"`
	Leagueid                   sql.NullInt32  `json:"leagueid"`
	Coordinatorid              int32          `json:"coordinatorid"`
	Numberofpreliminaryrounds  int32          `json:"numberofpreliminaryrounds"`
	Numberofeliminationrounds  int32          `json:"numberofeliminationrounds"`
	Judgesperdebatepreliminary int32          `json:"judgesperdebatepreliminary"`
	Judgesperdebateelimination int32          `json:"judgesperdebateelimination"`
	Tournamentfee              string         `json:"tournamentfee"`
	Imageurl                   sql.NullString `json:"imageurl"`
	CreatedAt                  sql.NullTime   `json:"created_at"`
	UpdatedAt                  sql.NullTime   `json:"updated_at"`
	DeletedAt                  sql.NullTime   `json:"deleted_at"`
	Formatname                 string         `json:"formatname"`
	Leaguename                 string         `json:"leaguename"`
}

func (q *Queries) ListTournamentsPaginated(ctx context.Context, arg ListTournamentsPaginatedParams) ([]ListTournamentsPaginatedRow, error) {
	rows, err := q.db.QueryContext(ctx, listTournamentsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTournamentsPaginatedRow{}
	for rows.Next() {
		var i ListTournamentsPaginatedRow
		if err := rows.Scan(
			&i.Tournamentid,
			&i.Name,
			&i.Startdate,
			&i.Enddate,
			&i.Location,
			&i.Formatid,
			&i.Leagueid,
			&i.Coordinatorid,
			&i.Numberofpreliminaryrounds,
			&i.Numberofeliminationrounds,
			&i.Judgesperdebatepreliminary,
			&i.Judgesperdebateelimination,
			&i.Tournamentfee,
			&i.Imageurl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Formatname,
			&i.Leaguename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerTeam = `-- name: RegisterTeam :one
INSERT INTO Teams (Name, SchoolID, TournamentID, InvitationID)
VALUES ($1, $2, $3, $4)
RETURNING teamid, name, schoolid, invitationid, tournamentid
`

type RegisterTeamParams struct {
	Name         string        `json:"name"`
	Schoolid     int32         `json:"schoolid"`
	Tournamentid int32         `json:"tournamentid"`
	Invitationid sql.NullInt32 `json:"invitationid"`
}

func (q *Queries) RegisterTeam(ctx context.Context, arg RegisterTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, registerTeam,
		arg.Name,
		arg.Schoolid,
		arg.Tournamentid,
		arg.Invitationid,
	)
	var i Team
	err := row.Scan(
		&i.Teamid,
		&i.Name,
		&i.Schoolid,
		&i.Invitationid,
		&i.Tournamentid,
	)
	return i, err
}

const updateInvitationStatus = `-- name: UpdateInvitationStatus :exec
UPDATE TournamentInvitations
SET Status = $2, RespondedAt = CURRENT_TIMESTAMP
WHERE InvitationID = $1
`

type UpdateInvitationStatusParams struct {
	Invitationid int32  `json:"invitationid"`
	Status       string `json:"status"`
}

func (q *Queries) UpdateInvitationStatus(ctx context.Context, arg UpdateInvitationStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateInvitationStatus, arg.Invitationid, arg.Status)
	return err
}

const updateInvitationStatusWithUserCheck = `-- name: UpdateInvitationStatusWithUserCheck :exec
UPDATE TournamentInvitations
SET Status = $2, RespondedAt = CURRENT_TIMESTAMP
WHERE InvitationID = $1 AND UserID = $3
`

type UpdateInvitationStatusWithUserCheckParams struct {
	Invitationid int32         `json:"invitationid"`
	Status       string        `json:"status"`
	Userid       sql.NullInt32 `json:"userid"`
}

func (q *Queries) UpdateInvitationStatusWithUserCheck(ctx context.Context, arg UpdateInvitationStatusWithUserCheckParams) error {
	_, err := q.db.ExecContext(ctx, updateInvitationStatusWithUserCheck, arg.Invitationid, arg.Status, arg.Userid)
	return err
}

const updateLeague = `-- name: UpdateLeague :one
UPDATE Leagues
SET Name = $2, LeagueType = $3, Details = $4
WHERE LeagueID = $1
RETURNING leagueid, name, leaguetype, details, deleted_at
`

type UpdateLeagueParams struct {
	Leagueid   int32           `json:"leagueid"`
	Name       string          `json:"name"`
	Leaguetype string          `json:"leaguetype"`
	Details    json.RawMessage `json:"details"`
}

func (q *Queries) UpdateLeague(ctx context.Context, arg UpdateLeagueParams) (League, error) {
	row := q.db.QueryRowContext(ctx, updateLeague,
		arg.Leagueid,
		arg.Name,
		arg.Leaguetype,
		arg.Details,
	)
	var i League
	err := row.Scan(
		&i.Leagueid,
		&i.Name,
		&i.Leaguetype,
		&i.Details,
		&i.DeletedAt,
	)
	return i, err
}

const updateReminderSentAt = `-- name: UpdateReminderSentAt :one
UPDATE TournamentInvitations
SET ReminderSentAt = $2
WHERE InvitationID = $1
RETURNING invitationid, tournamentid, schoolid, volunteerid, studentid, userid, status, invitedat, remindersentat, respondedat
`

type UpdateReminderSentAtParams struct {
	Invitationid   int32        `json:"invitationid"`
	Remindersentat sql.NullTime `json:"remindersentat"`
}

func (q *Queries) UpdateReminderSentAt(ctx context.Context, arg UpdateReminderSentAtParams) (Tournamentinvitation, error) {
	row := q.db.QueryRowContext(ctx, updateReminderSentAt, arg.Invitationid, arg.Remindersentat)
	var i Tournamentinvitation
	err := row.Scan(
		&i.Invitationid,
		&i.Tournamentid,
		&i.Schoolid,
		&i.Volunteerid,
		&i.Studentid,
		&i.Userid,
		&i.Status,
		&i.Invitedat,
		&i.Remindersentat,
		&i.Respondedat,
	)
	return i, err
}

const updateTournamentDetails = `-- name: UpdateTournamentDetails :one
UPDATE Tournaments
SET Name = $2, StartDate = $3, EndDate = $4, Location = $5, FormatID = $6, LeagueID = $7,
    NumberOfPreliminaryRounds = $8, NumberOfEliminationRounds = $9,
    JudgesPerDebatePreliminary = $10, JudgesPerDebateElimination = $11, TournamentFee = $12, ImageUrl = $13
WHERE TournamentID = $1
RETURNING tournamentid, name, startdate, enddate, location, formatid, leagueid, coordinatorid, numberofpreliminaryrounds, numberofeliminationrounds, judgesperdebatepreliminary, judgesperdebateelimination, tournamentfee, imageurl, created_at, updated_at, deleted_at
`

type UpdateTournamentDetailsParams struct {
	Tournamentid               int32          `json:"tournamentid"`
	Name                       string         `json:"name"`
	Startdate                  time.Time      `json:"startdate"`
	Enddate                    time.Time      `json:"enddate"`
	Location                   string         `json:"location"`
	Formatid                   int32          `json:"formatid"`
	Leagueid                   sql.NullInt32  `json:"leagueid"`
	Numberofpreliminaryrounds  int32          `json:"numberofpreliminaryrounds"`
	Numberofeliminationrounds  int32          `json:"numberofeliminationrounds"`
	Judgesperdebatepreliminary int32          `json:"judgesperdebatepreliminary"`
	Judgesperdebateelimination int32          `json:"judgesperdebateelimination"`
	Tournamentfee              string         `json:"tournamentfee"`
	Imageurl                   sql.NullString `json:"imageurl"`
}

func (q *Queries) UpdateTournamentDetails(ctx context.Context, arg UpdateTournamentDetailsParams) (Tournament, error) {
	row := q.db.QueryRowContext(ctx, updateTournamentDetails,
		arg.Tournamentid,
		arg.Name,
		arg.Startdate,
		arg.Enddate,
		arg.Location,
		arg.Formatid,
		arg.Leagueid,
		arg.Numberofpreliminaryrounds,
		arg.Numberofeliminationrounds,
		arg.Judgesperdebatepreliminary,
		arg.Judgesperdebateelimination,
		arg.Tournamentfee,
		arg.Imageurl,
	)
	var i Tournament
	err := row.Scan(
		&i.Tournamentid,
		&i.Name,
		&i.Startdate,
		&i.Enddate,
		&i.Location,
		&i.Formatid,
		&i.Leagueid,
		&i.Coordinatorid,
		&i.Numberofpreliminaryrounds,
		&i.Numberofeliminationrounds,
		&i.Judgesperdebatepreliminary,
		&i.Judgesperdebateelimination,
		&i.Tournamentfee,
		&i.Imageurl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateTournamentFormatDetails = `-- name: UpdateTournamentFormatDetails :one
UPDATE TournamentFormats
SET FormatName = $2, Description = $3, SpeakersPerTeam = $4
WHERE FormatID = $1
RETURNING formatid, formatname, description, speakersperteam, deleted_at
`

type UpdateTournamentFormatDetailsParams struct {
	Formatid        int32          `json:"formatid"`
	Formatname      string         `json:"formatname"`
	Description     sql.NullString `json:"description"`
	Speakersperteam int32          `json:"speakersperteam"`
}

func (q *Queries) UpdateTournamentFormatDetails(ctx context.Context, arg UpdateTournamentFormatDetailsParams) (Tournamentformat, error) {
	row := q.db.QueryRowContext(ctx, updateTournamentFormatDetails,
		arg.Formatid,
		arg.Formatname,
		arg.Description,
		arg.Speakersperteam,
	)
	var i Tournamentformat
	err := row.Scan(
		&i.Formatid,
		&i.Formatname,
		&i.Description,
		&i.Speakersperteam,
		&i.DeletedAt,
	)
	return i, err
}
