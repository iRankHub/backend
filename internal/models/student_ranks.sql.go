// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: student_ranks.sql

package models

import (
	"context"
	"database/sql"
)

const createStudentRank = `-- name: CreateStudentRank :one
INSERT INTO StudentRanks (StudentID, TournamentID, RankValue, RankComments)
VALUES ($1, $2, $3, $4)
RETURNING rankid, studentid, tournamentid, rankvalue, rankcomments
`

type CreateStudentRankParams struct {
	Studentid    int32          `json:"studentid"`
	Tournamentid int32          `json:"tournamentid"`
	Rankvalue    string         `json:"rankvalue"`
	Rankcomments sql.NullString `json:"rankcomments"`
}

func (q *Queries) CreateStudentRank(ctx context.Context, arg CreateStudentRankParams) (Studentrank, error) {
	row := q.db.QueryRowContext(ctx, createStudentRank,
		arg.Studentid,
		arg.Tournamentid,
		arg.Rankvalue,
		arg.Rankcomments,
	)
	var i Studentrank
	err := row.Scan(
		&i.Rankid,
		&i.Studentid,
		&i.Tournamentid,
		&i.Rankvalue,
		&i.Rankcomments,
	)
	return i, err
}

const deleteStudentRank = `-- name: DeleteStudentRank :exec
DELETE FROM StudentRanks WHERE RankID = $1
`

func (q *Queries) DeleteStudentRank(ctx context.Context, rankid int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudentRank, rankid)
	return err
}

const getStudentRank = `-- name: GetStudentRank :one
SELECT rankid, studentid, tournamentid, rankvalue, rankcomments FROM StudentRanks WHERE RankID = $1
`

func (q *Queries) GetStudentRank(ctx context.Context, rankid int32) (Studentrank, error) {
	row := q.db.QueryRowContext(ctx, getStudentRank, rankid)
	var i Studentrank
	err := row.Scan(
		&i.Rankid,
		&i.Studentid,
		&i.Tournamentid,
		&i.Rankvalue,
		&i.Rankcomments,
	)
	return i, err
}

const getStudentRanks = `-- name: GetStudentRanks :many
SELECT rankid, studentid, tournamentid, rankvalue, rankcomments FROM StudentRanks
`

func (q *Queries) GetStudentRanks(ctx context.Context) ([]Studentrank, error) {
	rows, err := q.db.QueryContext(ctx, getStudentRanks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Studentrank{}
	for rows.Next() {
		var i Studentrank
		if err := rows.Scan(
			&i.Rankid,
			&i.Studentid,
			&i.Tournamentid,
			&i.Rankvalue,
			&i.Rankcomments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentRank = `-- name: UpdateStudentRank :one
UPDATE StudentRanks
SET StudentID = $2, TournamentID = $3, RankValue = $4, RankComments = $5
WHERE RankID = $1
RETURNING rankid, studentid, tournamentid, rankvalue, rankcomments
`

type UpdateStudentRankParams struct {
	Rankid       int32          `json:"rankid"`
	Studentid    int32          `json:"studentid"`
	Tournamentid int32          `json:"tournamentid"`
	Rankvalue    string         `json:"rankvalue"`
	Rankcomments sql.NullString `json:"rankcomments"`
}

func (q *Queries) UpdateStudentRank(ctx context.Context, arg UpdateStudentRankParams) (Studentrank, error) {
	row := q.db.QueryRowContext(ctx, updateStudentRank,
		arg.Rankid,
		arg.Studentid,
		arg.Tournamentid,
		arg.Rankvalue,
		arg.Rankcomments,
	)
	var i Studentrank
	err := row.Scan(
		&i.Rankid,
		&i.Studentid,
		&i.Tournamentid,
		&i.Rankvalue,
		&i.Rankcomments,
	)
	return i, err
}
