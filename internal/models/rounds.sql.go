// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rounds.sql

package models

import (
	"context"
)

const createRound = `-- name: CreateRound :one
INSERT INTO Rounds (TournamentID, RoundNumber, IsEliminationRound)
VALUES ($1, $2, $3)
RETURNING roundid, tournamentid, roundnumber, iseliminationround
`

type CreateRoundParams struct {
	Tournamentid       int32 `json:"tournamentid"`
	Roundnumber        int32 `json:"roundnumber"`
	Iseliminationround bool  `json:"iseliminationround"`
}

func (q *Queries) CreateRound(ctx context.Context, arg CreateRoundParams) (Round, error) {
	row := q.db.QueryRowContext(ctx, createRound, arg.Tournamentid, arg.Roundnumber, arg.Iseliminationround)
	var i Round
	err := row.Scan(
		&i.Roundid,
		&i.Tournamentid,
		&i.Roundnumber,
		&i.Iseliminationround,
	)
	return i, err
}

const deleteRound = `-- name: DeleteRound :exec
DELETE FROM Rounds WHERE RoundID = $1
`

func (q *Queries) DeleteRound(ctx context.Context, roundid int32) error {
	_, err := q.db.ExecContext(ctx, deleteRound, roundid)
	return err
}

const getRound = `-- name: GetRound :one
SELECT roundid, tournamentid, roundnumber, iseliminationround FROM Rounds WHERE RoundID = $1
`

func (q *Queries) GetRound(ctx context.Context, roundid int32) (Round, error) {
	row := q.db.QueryRowContext(ctx, getRound, roundid)
	var i Round
	err := row.Scan(
		&i.Roundid,
		&i.Tournamentid,
		&i.Roundnumber,
		&i.Iseliminationround,
	)
	return i, err
}

const getRounds = `-- name: GetRounds :many
SELECT roundid, tournamentid, roundnumber, iseliminationround FROM Rounds
`

func (q *Queries) GetRounds(ctx context.Context) ([]Round, error) {
	rows, err := q.db.QueryContext(ctx, getRounds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Round{}
	for rows.Next() {
		var i Round
		if err := rows.Scan(
			&i.Roundid,
			&i.Tournamentid,
			&i.Roundnumber,
			&i.Iseliminationround,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRound = `-- name: UpdateRound :one
UPDATE Rounds
SET TournamentID = $2, RoundNumber = $3, IsEliminationRound = $4
WHERE RoundID = $1
RETURNING roundid, tournamentid, roundnumber, iseliminationround
`

type UpdateRoundParams struct {
	Roundid            int32 `json:"roundid"`
	Tournamentid       int32 `json:"tournamentid"`
	Roundnumber        int32 `json:"roundnumber"`
	Iseliminationround bool  `json:"iseliminationround"`
}

func (q *Queries) UpdateRound(ctx context.Context, arg UpdateRoundParams) (Round, error) {
	row := q.db.QueryRowContext(ctx, updateRound,
		arg.Roundid,
		arg.Tournamentid,
		arg.Roundnumber,
		arg.Iseliminationround,
	)
	var i Round
	err := row.Scan(
		&i.Roundid,
		&i.Tournamentid,
		&i.Roundnumber,
		&i.Iseliminationround,
	)
	return i, err
}
