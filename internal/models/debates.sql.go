// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: debates.sql

package models

import (
	"context"
	"database/sql"
	"time"
)

const createDebate = `-- name: CreateDebate :one
INSERT INTO Debates (RoundID, TournamentID, Team1ID, Team2ID, StartTime, EndTime, RoomID, Status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING debateid, roundid, tournamentid, team1id, team2id, starttime, endtime, roomid, status
`

type CreateDebateParams struct {
	Roundid      int32        `json:"roundid"`
	Tournamentid int32        `json:"tournamentid"`
	Team1id      int32        `json:"team1id"`
	Team2id      int32        `json:"team2id"`
	Starttime    time.Time    `json:"starttime"`
	Endtime      sql.NullTime `json:"endtime"`
	Roomid       int32        `json:"roomid"`
	Status       string       `json:"status"`
}

func (q *Queries) CreateDebate(ctx context.Context, arg CreateDebateParams) (Debate, error) {
	row := q.db.QueryRowContext(ctx, createDebate,
		arg.Roundid,
		arg.Tournamentid,
		arg.Team1id,
		arg.Team2id,
		arg.Starttime,
		arg.Endtime,
		arg.Roomid,
		arg.Status,
	)
	var i Debate
	err := row.Scan(
		&i.Debateid,
		&i.Roundid,
		&i.Tournamentid,
		&i.Team1id,
		&i.Team2id,
		&i.Starttime,
		&i.Endtime,
		&i.Roomid,
		&i.Status,
	)
	return i, err
}

const deleteDebate = `-- name: DeleteDebate :exec
DELETE FROM Debates WHERE DebateID = $1
`

func (q *Queries) DeleteDebate(ctx context.Context, debateid int32) error {
	_, err := q.db.ExecContext(ctx, deleteDebate, debateid)
	return err
}

const getDebate = `-- name: GetDebate :one
SELECT debateid, roundid, tournamentid, team1id, team2id, starttime, endtime, roomid, status FROM Debates WHERE DebateID = $1
`

func (q *Queries) GetDebate(ctx context.Context, debateid int32) (Debate, error) {
	row := q.db.QueryRowContext(ctx, getDebate, debateid)
	var i Debate
	err := row.Scan(
		&i.Debateid,
		&i.Roundid,
		&i.Tournamentid,
		&i.Team1id,
		&i.Team2id,
		&i.Starttime,
		&i.Endtime,
		&i.Roomid,
		&i.Status,
	)
	return i, err
}

const getDebates = `-- name: GetDebates :many
SELECT debateid, roundid, tournamentid, team1id, team2id, starttime, endtime, roomid, status FROM Debates
`

func (q *Queries) GetDebates(ctx context.Context) ([]Debate, error) {
	rows, err := q.db.QueryContext(ctx, getDebates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Debate{}
	for rows.Next() {
		var i Debate
		if err := rows.Scan(
			&i.Debateid,
			&i.Roundid,
			&i.Tournamentid,
			&i.Team1id,
			&i.Team2id,
			&i.Starttime,
			&i.Endtime,
			&i.Roomid,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDebate = `-- name: UpdateDebate :one
UPDATE Debates
SET RoundID = $2, TournamentID = $3, Team1ID = $4, Team2ID = $5, StartTime = $6, EndTime = $7, RoomID = $8, Status = $9
WHERE DebateID = $1
RETURNING debateid, roundid, tournamentid, team1id, team2id, starttime, endtime, roomid, status
`

type UpdateDebateParams struct {
	Debateid     int32        `json:"debateid"`
	Roundid      int32        `json:"roundid"`
	Tournamentid int32        `json:"tournamentid"`
	Team1id      int32        `json:"team1id"`
	Team2id      int32        `json:"team2id"`
	Starttime    time.Time    `json:"starttime"`
	Endtime      sql.NullTime `json:"endtime"`
	Roomid       int32        `json:"roomid"`
	Status       string       `json:"status"`
}

func (q *Queries) UpdateDebate(ctx context.Context, arg UpdateDebateParams) (Debate, error) {
	row := q.db.QueryRowContext(ctx, updateDebate,
		arg.Debateid,
		arg.Roundid,
		arg.Tournamentid,
		arg.Team1id,
		arg.Team2id,
		arg.Starttime,
		arg.Endtime,
		arg.Roomid,
		arg.Status,
	)
	var i Debate
	err := row.Scan(
		&i.Debateid,
		&i.Roundid,
		&i.Tournamentid,
		&i.Team1id,
		&i.Team2id,
		&i.Starttime,
		&i.Endtime,
		&i.Roomid,
		&i.Status,
	)
	return i, err
}
