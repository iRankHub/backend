// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: volunteer_ratings.sql

package models

import (
	"context"
	"database/sql"
)

const createVolunteerRating = `-- name: CreateVolunteerRating :one
INSERT INTO VolunteerRatings (VolunteerID, RatingTypeID, RatingScore, RatingComments, CumulativeRating)
VALUES ($1, $2, $3, $4, $5)
RETURNING ratingid, volunteerid, ratingtypeid, ratingscore, ratingcomments, cumulativerating
`

type CreateVolunteerRatingParams struct {
	Volunteerid      int32          `json:"volunteerid"`
	Ratingtypeid     int32          `json:"ratingtypeid"`
	Ratingscore      string         `json:"ratingscore"`
	Ratingcomments   sql.NullString `json:"ratingcomments"`
	Cumulativerating sql.NullString `json:"cumulativerating"`
}

func (q *Queries) CreateVolunteerRating(ctx context.Context, arg CreateVolunteerRatingParams) (Volunteerrating, error) {
	row := q.db.QueryRowContext(ctx, createVolunteerRating,
		arg.Volunteerid,
		arg.Ratingtypeid,
		arg.Ratingscore,
		arg.Ratingcomments,
		arg.Cumulativerating,
	)
	var i Volunteerrating
	err := row.Scan(
		&i.Ratingid,
		&i.Volunteerid,
		&i.Ratingtypeid,
		&i.Ratingscore,
		&i.Ratingcomments,
		&i.Cumulativerating,
	)
	return i, err
}

const deleteVolunteerRating = `-- name: DeleteVolunteerRating :exec
DELETE FROM VolunteerRatings WHERE RatingID = $1
`

func (q *Queries) DeleteVolunteerRating(ctx context.Context, ratingid int32) error {
	_, err := q.db.ExecContext(ctx, deleteVolunteerRating, ratingid)
	return err
}

const getVolunteerRating = `-- name: GetVolunteerRating :one
SELECT ratingid, volunteerid, ratingtypeid, ratingscore, ratingcomments, cumulativerating FROM VolunteerRatings WHERE RatingID = $1
`

func (q *Queries) GetVolunteerRating(ctx context.Context, ratingid int32) (Volunteerrating, error) {
	row := q.db.QueryRowContext(ctx, getVolunteerRating, ratingid)
	var i Volunteerrating
	err := row.Scan(
		&i.Ratingid,
		&i.Volunteerid,
		&i.Ratingtypeid,
		&i.Ratingscore,
		&i.Ratingcomments,
		&i.Cumulativerating,
	)
	return i, err
}

const getVolunteerRatings = `-- name: GetVolunteerRatings :many
SELECT ratingid, volunteerid, ratingtypeid, ratingscore, ratingcomments, cumulativerating FROM VolunteerRatings
`

func (q *Queries) GetVolunteerRatings(ctx context.Context) ([]Volunteerrating, error) {
	rows, err := q.db.QueryContext(ctx, getVolunteerRatings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Volunteerrating{}
	for rows.Next() {
		var i Volunteerrating
		if err := rows.Scan(
			&i.Ratingid,
			&i.Volunteerid,
			&i.Ratingtypeid,
			&i.Ratingscore,
			&i.Ratingcomments,
			&i.Cumulativerating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVolunteerRating = `-- name: UpdateVolunteerRating :one
UPDATE VolunteerRatings
SET VolunteerID = $2, RatingTypeID = $3, RatingScore = $4, RatingComments = $5, CumulativeRating = $6
WHERE RatingID = $1
RETURNING ratingid, volunteerid, ratingtypeid, ratingscore, ratingcomments, cumulativerating
`

type UpdateVolunteerRatingParams struct {
	Ratingid         int32          `json:"ratingid"`
	Volunteerid      int32          `json:"volunteerid"`
	Ratingtypeid     int32          `json:"ratingtypeid"`
	Ratingscore      string         `json:"ratingscore"`
	Ratingcomments   sql.NullString `json:"ratingcomments"`
	Cumulativerating sql.NullString `json:"cumulativerating"`
}

func (q *Queries) UpdateVolunteerRating(ctx context.Context, arg UpdateVolunteerRatingParams) (Volunteerrating, error) {
	row := q.db.QueryRowContext(ctx, updateVolunteerRating,
		arg.Ratingid,
		arg.Volunteerid,
		arg.Ratingtypeid,
		arg.Ratingscore,
		arg.Ratingcomments,
		arg.Cumulativerating,
	)
	var i Volunteerrating
	err := row.Scan(
		&i.Ratingid,
		&i.Volunteerid,
		&i.Ratingtypeid,
		&i.Ratingscore,
		&i.Ratingcomments,
		&i.Cumulativerating,
	)
	return i, err
}
