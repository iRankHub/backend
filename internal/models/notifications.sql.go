// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notifications.sql

package models

import (
	"context"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO Notifications (UserID, Type, Message)
VALUES ($1, $2, $3)
RETURNING notificationid, userid, type, message, isread, createdat
`

type CreateNotificationParams struct {
	Userid  int32  `json:"userid"`
	Type    string `json:"type"`
	Message string `json:"message"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.Userid, arg.Type, arg.Message)
	var i Notification
	err := row.Scan(
		&i.Notificationid,
		&i.Userid,
		&i.Type,
		&i.Message,
		&i.Isread,
		&i.Createdat,
	)
	return i, err
}

const getUnreadNotifications = `-- name: GetUnreadNotifications :many
SELECT notificationid, userid, type, message, isread, createdat FROM Notifications
WHERE UserID = $1 AND IsRead = FALSE
ORDER BY CreatedAt DESC
`

func (q *Queries) GetUnreadNotifications(ctx context.Context, userid int32) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadNotifications, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.Notificationid,
			&i.Userid,
			&i.Type,
			&i.Message,
			&i.Isread,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markNotificationsAsRead = `-- name: MarkNotificationsAsRead :exec
UPDATE Notifications
SET IsRead = TRUE
WHERE UserID = $1 AND IsRead = FALSE
`

func (q *Queries) MarkNotificationsAsRead(ctx context.Context, userid int32) error {
	_, err := q.db.ExecContext(ctx, markNotificationsAsRead, userid)
	return err
}
