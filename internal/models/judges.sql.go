// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: judges.sql

package models

import (
	"context"
)

const checkHeadJudgeExists = `-- name: CheckHeadJudgeExists :one
SELECT EXISTS (
    SELECT 1
    FROM judgeassignments ja
    JOIN debates d ON ja.debateid = d.debateid
    WHERE ja.tournamentid = $1
    AND d.roomid = $2
    AND ja.roundnumber = $3
    AND ja.iselimination = $4
    AND ja.isheadjudge = true
)
`

type CheckHeadJudgeExistsParams struct {
	Tournamentid  int32 `json:"tournamentid"`
	Roomid        int32 `json:"roomid"`
	Roundnumber   int32 `json:"roundnumber"`
	Iselimination bool  `json:"iselimination"`
}

func (q *Queries) CheckHeadJudgeExists(ctx context.Context, arg CheckHeadJudgeExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkHeadJudgeExists,
		arg.Tournamentid,
		arg.Roomid,
		arg.Roundnumber,
		arg.Iselimination,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const demoteCurrentHeadJudge = `-- name: DemoteCurrentHeadJudge :exec
UPDATE judgeassignments ja
SET isheadjudge = false
WHERE ja.tournamentid = $1
AND ja.roundnumber = $2
AND ja.debateid IN (
    SELECT d.debateid
    FROM debates d
    WHERE d.roomid = $3
    AND d.tournamentid = $1
)
AND ja.iselimination = $4
AND ja.isheadjudge = true
`

type DemoteCurrentHeadJudgeParams struct {
	Tournamentid  int32 `json:"tournamentid"`
	Roundnumber   int32 `json:"roundnumber"`
	Roomid        int32 `json:"roomid"`
	Iselimination bool  `json:"iselimination"`
}

func (q *Queries) DemoteCurrentHeadJudge(ctx context.Context, arg DemoteCurrentHeadJudgeParams) error {
	_, err := q.db.ExecContext(ctx, demoteCurrentHeadJudge,
		arg.Tournamentid,
		arg.Roundnumber,
		arg.Roomid,
		arg.Iselimination,
	)
	return err
}

const getEligibleHeadJudge = `-- name: GetEligibleHeadJudge :one
SELECT ja.judgeid
FROM judgeassignments ja
JOIN debates d ON ja.debateid = d.debateid
WHERE ja.tournamentid = $1
AND ja.roundnumber = $2
AND d.roomid = $3
AND ja.iselimination = $4
AND ja.judgeid != $5
AND NOT ja.isheadjudge
LIMIT 1
`

type GetEligibleHeadJudgeParams struct {
	Tournamentid  int32 `json:"tournamentid"`
	Roundnumber   int32 `json:"roundnumber"`
	Roomid        int32 `json:"roomid"`
	Iselimination bool  `json:"iselimination"`
	Judgeid       int32 `json:"judgeid"`
}

func (q *Queries) GetEligibleHeadJudge(ctx context.Context, arg GetEligibleHeadJudgeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getEligibleHeadJudge,
		arg.Tournamentid,
		arg.Roundnumber,
		arg.Roomid,
		arg.Iselimination,
		arg.Judgeid,
	)
	var judgeid int32
	err := row.Scan(&judgeid)
	return judgeid, err
}

const getJudgeAssignment = `-- name: GetJudgeAssignment :one
SELECT ja.assignmentid, ja.tournamentid, ja.judgeid, ja.debateid, ja.roundnumber, ja.iselimination, ja.isheadjudge, d.roomid as roomid, d.debateid
FROM judgeassignments ja
JOIN debates d ON ja.debateid = d.debateid
WHERE ja.tournamentid = $1
AND ja.judgeid = $2
AND ja.roundnumber = $3
AND ja.iselimination = $4
`

type GetJudgeAssignmentParams struct {
	Tournamentid  int32 `json:"tournamentid"`
	Judgeid       int32 `json:"judgeid"`
	Roundnumber   int32 `json:"roundnumber"`
	Iselimination bool  `json:"iselimination"`
}

type GetJudgeAssignmentRow struct {
	Assignmentid  int32 `json:"assignmentid"`
	Tournamentid  int32 `json:"tournamentid"`
	Judgeid       int32 `json:"judgeid"`
	Debateid      int32 `json:"debateid"`
	Roundnumber   int32 `json:"roundnumber"`
	Iselimination bool  `json:"iselimination"`
	Isheadjudge   bool  `json:"isheadjudge"`
	Roomid        int32 `json:"roomid"`
	Debateid_2    int32 `json:"debateid_2"`
}

func (q *Queries) GetJudgeAssignment(ctx context.Context, arg GetJudgeAssignmentParams) (GetJudgeAssignmentRow, error) {
	row := q.db.QueryRowContext(ctx, getJudgeAssignment,
		arg.Tournamentid,
		arg.Judgeid,
		arg.Roundnumber,
		arg.Iselimination,
	)
	var i GetJudgeAssignmentRow
	err := row.Scan(
		&i.Assignmentid,
		&i.Tournamentid,
		&i.Judgeid,
		&i.Debateid,
		&i.Roundnumber,
		&i.Iselimination,
		&i.Isheadjudge,
		&i.Roomid,
		&i.Debateid_2,
	)
	return i, err
}

const transferBallotOwnership = `-- name: TransferBallotOwnership :exec
UPDATE ballots
SET judgeid = $2,
    last_updated_by = $2,
    last_updated_at = CURRENT_TIMESTAMP
WHERE judgeid = $1
AND debateid = $3
`

type TransferBallotOwnershipParams struct {
	Judgeid   int32 `json:"judgeid"`
	Judgeid_2 int32 `json:"judgeid_2"`
	Debateid  int32 `json:"debateid"`
}

func (q *Queries) TransferBallotOwnership(ctx context.Context, arg TransferBallotOwnershipParams) error {
	_, err := q.db.ExecContext(ctx, transferBallotOwnership, arg.Judgeid, arg.Judgeid_2, arg.Debateid)
	return err
}

const updateJudgeAssignment = `-- name: UpdateJudgeAssignment :exec
UPDATE judgeassignments ja
SET debateid = (
    SELECT d.debateid
    FROM debates d
    WHERE d.roomid = $4
    AND d.tournamentid = $2
    AND d.roundnumber = $3
    AND d.iseliminationround = $6
    LIMIT 1
),
isheadjudge = $5
WHERE ja.judgeid = $1
AND ja.tournamentid = $2
AND ja.roundnumber = $3
`

type UpdateJudgeAssignmentParams struct {
	Judgeid            int32 `json:"judgeid"`
	Tournamentid       int32 `json:"tournamentid"`
	Roundnumber        int32 `json:"roundnumber"`
	Roomid             int32 `json:"roomid"`
	Isheadjudge        bool  `json:"isheadjudge"`
	Iseliminationround bool  `json:"iseliminationround"`
}

func (q *Queries) UpdateJudgeAssignment(ctx context.Context, arg UpdateJudgeAssignmentParams) error {
	_, err := q.db.ExecContext(ctx, updateJudgeAssignment,
		arg.Judgeid,
		arg.Tournamentid,
		arg.Roundnumber,
		arg.Roomid,
		arg.Isheadjudge,
		arg.Iseliminationround,
	)
	return err
}

const updateJudgeToHeadJudge = `-- name: UpdateJudgeToHeadJudge :exec
UPDATE judgeassignments ja
SET isheadjudge = true
WHERE ja.judgeid = $1
AND ja.tournamentid = $2
AND ja.roundnumber = $3
AND ja.debateid IN (
    SELECT d.debateid
    FROM debates d
    WHERE d.roomid = $4
    AND d.tournamentid = $2
)
AND ja.iselimination = $5
`

type UpdateJudgeToHeadJudgeParams struct {
	Judgeid       int32 `json:"judgeid"`
	Tournamentid  int32 `json:"tournamentid"`
	Roundnumber   int32 `json:"roundnumber"`
	Roomid        int32 `json:"roomid"`
	Iselimination bool  `json:"iselimination"`
}

func (q *Queries) UpdateJudgeToHeadJudge(ctx context.Context, arg UpdateJudgeToHeadJudgeParams) error {
	_, err := q.db.ExecContext(ctx, updateJudgeToHeadJudge,
		arg.Judgeid,
		arg.Tournamentid,
		arg.Roundnumber,
		arg.Roomid,
		arg.Iselimination,
	)
	return err
}
