// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tournaments.sql

package models

import (
	"context"
	"time"
)

const createTournament = `-- name: CreateTournament :one
INSERT INTO Tournaments (Name, StartDate, EndDate, Location, FormatID)
VALUES ($1, $2, $3, $4, $5)
RETURNING tournamentid, name, startdate, enddate, location, formatid
`

type CreateTournamentParams struct {
	Name      string    `json:"name"`
	Startdate time.Time `json:"startdate"`
	Enddate   time.Time `json:"enddate"`
	Location  string    `json:"location"`
	Formatid  int32     `json:"formatid"`
}

func (q *Queries) CreateTournament(ctx context.Context, arg CreateTournamentParams) (Tournament, error) {
	row := q.db.QueryRowContext(ctx, createTournament,
		arg.Name,
		arg.Startdate,
		arg.Enddate,
		arg.Location,
		arg.Formatid,
	)
	var i Tournament
	err := row.Scan(
		&i.Tournamentid,
		&i.Name,
		&i.Startdate,
		&i.Enddate,
		&i.Location,
		&i.Formatid,
	)
	return i, err
}

const deleteTournament = `-- name: DeleteTournament :exec
DELETE FROM Tournaments WHERE TournamentID = $1
`

func (q *Queries) DeleteTournament(ctx context.Context, tournamentid int32) error {
	_, err := q.db.ExecContext(ctx, deleteTournament, tournamentid)
	return err
}

const getTournament = `-- name: GetTournament :one
SELECT tournamentid, name, startdate, enddate, location, formatid FROM Tournaments WHERE TournamentID = $1
`

func (q *Queries) GetTournament(ctx context.Context, tournamentid int32) (Tournament, error) {
	row := q.db.QueryRowContext(ctx, getTournament, tournamentid)
	var i Tournament
	err := row.Scan(
		&i.Tournamentid,
		&i.Name,
		&i.Startdate,
		&i.Enddate,
		&i.Location,
		&i.Formatid,
	)
	return i, err
}

const getTournaments = `-- name: GetTournaments :many
SELECT tournamentid, name, startdate, enddate, location, formatid FROM Tournaments
`

func (q *Queries) GetTournaments(ctx context.Context) ([]Tournament, error) {
	rows, err := q.db.QueryContext(ctx, getTournaments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tournament{}
	for rows.Next() {
		var i Tournament
		if err := rows.Scan(
			&i.Tournamentid,
			&i.Name,
			&i.Startdate,
			&i.Enddate,
			&i.Location,
			&i.Formatid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTournament = `-- name: UpdateTournament :one
UPDATE Tournaments
SET Name = $2, StartDate = $3, EndDate = $4, Location = $5, FormatID = $6
WHERE TournamentID = $1
RETURNING tournamentid, name, startdate, enddate, location, formatid
`

type UpdateTournamentParams struct {
	Tournamentid int32     `json:"tournamentid"`
	Name         string    `json:"name"`
	Startdate    time.Time `json:"startdate"`
	Enddate      time.Time `json:"enddate"`
	Location     string    `json:"location"`
	Formatid     int32     `json:"formatid"`
}

func (q *Queries) UpdateTournament(ctx context.Context, arg UpdateTournamentParams) (Tournament, error) {
	row := q.db.QueryRowContext(ctx, updateTournament,
		arg.Tournamentid,
		arg.Name,
		arg.Startdate,
		arg.Enddate,
		arg.Location,
		arg.Formatid,
	)
	var i Tournament
	err := row.Scan(
		&i.Tournamentid,
		&i.Name,
		&i.Startdate,
		&i.Enddate,
		&i.Location,
		&i.Formatid,
	)
	return i, err
}
