// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: judge_reviews.sql

package models

import (
	"context"
	"database/sql"
)

const createJudgeReview = `-- name: CreateJudgeReview :one
INSERT INTO JudgeReviews (StudentID, JudgeID, Rating, Comments)
VALUES ($1, $2, $3, $4)
RETURNING reviewid, studentid, judgeid, rating, comments
`

type CreateJudgeReviewParams struct {
	Studentid int32          `json:"studentid"`
	Judgeid   int32          `json:"judgeid"`
	Rating    string         `json:"rating"`
	Comments  sql.NullString `json:"comments"`
}

func (q *Queries) CreateJudgeReview(ctx context.Context, arg CreateJudgeReviewParams) (Judgereview, error) {
	row := q.db.QueryRowContext(ctx, createJudgeReview,
		arg.Studentid,
		arg.Judgeid,
		arg.Rating,
		arg.Comments,
	)
	var i Judgereview
	err := row.Scan(
		&i.Reviewid,
		&i.Studentid,
		&i.Judgeid,
		&i.Rating,
		&i.Comments,
	)
	return i, err
}

const deleteJudgeReview = `-- name: DeleteJudgeReview :exec
DELETE FROM JudgeReviews WHERE ReviewID = $1
`

func (q *Queries) DeleteJudgeReview(ctx context.Context, reviewid int32) error {
	_, err := q.db.ExecContext(ctx, deleteJudgeReview, reviewid)
	return err
}

const getJudgeReview = `-- name: GetJudgeReview :one
SELECT reviewid, studentid, judgeid, rating, comments FROM JudgeReviews WHERE ReviewID = $1
`

func (q *Queries) GetJudgeReview(ctx context.Context, reviewid int32) (Judgereview, error) {
	row := q.db.QueryRowContext(ctx, getJudgeReview, reviewid)
	var i Judgereview
	err := row.Scan(
		&i.Reviewid,
		&i.Studentid,
		&i.Judgeid,
		&i.Rating,
		&i.Comments,
	)
	return i, err
}

const getJudgeReviews = `-- name: GetJudgeReviews :many
SELECT reviewid, studentid, judgeid, rating, comments FROM JudgeReviews
`

func (q *Queries) GetJudgeReviews(ctx context.Context) ([]Judgereview, error) {
	rows, err := q.db.QueryContext(ctx, getJudgeReviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Judgereview{}
	for rows.Next() {
		var i Judgereview
		if err := rows.Scan(
			&i.Reviewid,
			&i.Studentid,
			&i.Judgeid,
			&i.Rating,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJudgeReview = `-- name: UpdateJudgeReview :one
UPDATE JudgeReviews
SET StudentID = $2, JudgeID = $3, Rating = $4, Comments = $5
WHERE ReviewID = $1
RETURNING reviewid, studentid, judgeid, rating, comments
`

type UpdateJudgeReviewParams struct {
	Reviewid  int32          `json:"reviewid"`
	Studentid int32          `json:"studentid"`
	Judgeid   int32          `json:"judgeid"`
	Rating    string         `json:"rating"`
	Comments  sql.NullString `json:"comments"`
}

func (q *Queries) UpdateJudgeReview(ctx context.Context, arg UpdateJudgeReviewParams) (Judgereview, error) {
	row := q.db.QueryRowContext(ctx, updateJudgeReview,
		arg.Reviewid,
		arg.Studentid,
		arg.Judgeid,
		arg.Rating,
		arg.Comments,
	)
	var i Judgereview
	err := row.Scan(
		&i.Reviewid,
		&i.Studentid,
		&i.Judgeid,
		&i.Rating,
		&i.Comments,
	)
	return i, err
}
