// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: judge_assignments.sql

package models

import (
	"context"
)

const createJudgeAssignment = `-- name: CreateJudgeAssignment :one
INSERT INTO JudgeAssignments (VolunteerID, TournamentID, DebateID)
VALUES ($1, $2, $3)
RETURNING assignmentid, volunteerid, tournamentid, debateid
`

type CreateJudgeAssignmentParams struct {
	Volunteerid  int32 `json:"volunteerid"`
	Tournamentid int32 `json:"tournamentid"`
	Debateid     int32 `json:"debateid"`
}

func (q *Queries) CreateJudgeAssignment(ctx context.Context, arg CreateJudgeAssignmentParams) (Judgeassignment, error) {
	row := q.db.QueryRowContext(ctx, createJudgeAssignment, arg.Volunteerid, arg.Tournamentid, arg.Debateid)
	var i Judgeassignment
	err := row.Scan(
		&i.Assignmentid,
		&i.Volunteerid,
		&i.Tournamentid,
		&i.Debateid,
	)
	return i, err
}

const deleteJudgeAssignment = `-- name: DeleteJudgeAssignment :exec
DELETE FROM JudgeAssignments WHERE AssignmentID = $1
`

func (q *Queries) DeleteJudgeAssignment(ctx context.Context, assignmentid int32) error {
	_, err := q.db.ExecContext(ctx, deleteJudgeAssignment, assignmentid)
	return err
}

const getJudgeAssignment = `-- name: GetJudgeAssignment :one
SELECT assignmentid, volunteerid, tournamentid, debateid FROM JudgeAssignments WHERE AssignmentID = $1
`

func (q *Queries) GetJudgeAssignment(ctx context.Context, assignmentid int32) (Judgeassignment, error) {
	row := q.db.QueryRowContext(ctx, getJudgeAssignment, assignmentid)
	var i Judgeassignment
	err := row.Scan(
		&i.Assignmentid,
		&i.Volunteerid,
		&i.Tournamentid,
		&i.Debateid,
	)
	return i, err
}

const getJudgeAssignments = `-- name: GetJudgeAssignments :many
SELECT assignmentid, volunteerid, tournamentid, debateid FROM JudgeAssignments
`

func (q *Queries) GetJudgeAssignments(ctx context.Context) ([]Judgeassignment, error) {
	rows, err := q.db.QueryContext(ctx, getJudgeAssignments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Judgeassignment{}
	for rows.Next() {
		var i Judgeassignment
		if err := rows.Scan(
			&i.Assignmentid,
			&i.Volunteerid,
			&i.Tournamentid,
			&i.Debateid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJudgeAssignment = `-- name: UpdateJudgeAssignment :one
UPDATE JudgeAssignments
SET VolunteerID = $2, TournamentID = $3, DebateID = $4
WHERE AssignmentID = $1
RETURNING assignmentid, volunteerid, tournamentid, debateid
`

type UpdateJudgeAssignmentParams struct {
	Assignmentid int32 `json:"assignmentid"`
	Volunteerid  int32 `json:"volunteerid"`
	Tournamentid int32 `json:"tournamentid"`
	Debateid     int32 `json:"debateid"`
}

func (q *Queries) UpdateJudgeAssignment(ctx context.Context, arg UpdateJudgeAssignmentParams) (Judgeassignment, error) {
	row := q.db.QueryRowContext(ctx, updateJudgeAssignment,
		arg.Assignmentid,
		arg.Volunteerid,
		arg.Tournamentid,
		arg.Debateid,
	)
	var i Judgeassignment
	err := row.Scan(
		&i.Assignmentid,
		&i.Volunteerid,
		&i.Tournamentid,
		&i.Debateid,
	)
	return i, err
}
