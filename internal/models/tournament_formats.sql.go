// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tournament_formats.sql

package models

import (
	"context"
	"database/sql"
)

const createTournamentFormat = `-- name: CreateTournamentFormat :one
INSERT INTO TournamentFormats (FormatName, Description)
VALUES ($1, $2)
RETURNING formatid, formatname, description
`

type CreateTournamentFormatParams struct {
	Formatname  string         `json:"formatname"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateTournamentFormat(ctx context.Context, arg CreateTournamentFormatParams) (Tournamentformat, error) {
	row := q.db.QueryRowContext(ctx, createTournamentFormat, arg.Formatname, arg.Description)
	var i Tournamentformat
	err := row.Scan(&i.Formatid, &i.Formatname, &i.Description)
	return i, err
}

const deleteTournamentFormat = `-- name: DeleteTournamentFormat :exec
DELETE FROM TournamentFormats WHERE FormatID = $1
`

func (q *Queries) DeleteTournamentFormat(ctx context.Context, formatid int32) error {
	_, err := q.db.ExecContext(ctx, deleteTournamentFormat, formatid)
	return err
}

const getTournamentFormat = `-- name: GetTournamentFormat :one
SELECT formatid, formatname, description FROM TournamentFormats WHERE FormatID = $1
`

func (q *Queries) GetTournamentFormat(ctx context.Context, formatid int32) (Tournamentformat, error) {
	row := q.db.QueryRowContext(ctx, getTournamentFormat, formatid)
	var i Tournamentformat
	err := row.Scan(&i.Formatid, &i.Formatname, &i.Description)
	return i, err
}

const getTournamentFormats = `-- name: GetTournamentFormats :many
SELECT formatid, formatname, description FROM TournamentFormats
`

func (q *Queries) GetTournamentFormats(ctx context.Context) ([]Tournamentformat, error) {
	rows, err := q.db.QueryContext(ctx, getTournamentFormats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tournamentformat{}
	for rows.Next() {
		var i Tournamentformat
		if err := rows.Scan(&i.Formatid, &i.Formatname, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTournamentFormat = `-- name: UpdateTournamentFormat :one
UPDATE TournamentFormats
SET FormatName = $2, Description = $3
WHERE FormatID = $1
RETURNING formatid, formatname, description
`

type UpdateTournamentFormatParams struct {
	Formatid    int32          `json:"formatid"`
	Formatname  string         `json:"formatname"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateTournamentFormat(ctx context.Context, arg UpdateTournamentFormatParams) (Tournamentformat, error) {
	row := q.db.QueryRowContext(ctx, updateTournamentFormat, arg.Formatid, arg.Formatname, arg.Description)
	var i Tournamentformat
	err := row.Scan(&i.Formatid, &i.Formatname, &i.Description)
	return i, err
}
