// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package models

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO Users (Name, Email, Password, UserRole)
VALUES ($1, $2, $3, $4)
RETURNING userid, name, email, password, userrole, verificationstatus, approvalstatus
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Userrole string `json:"userrole"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Userrole,
	)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Userrole,
		&i.Verificationstatus,
		&i.Approvalstatus,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM Users
WHERE UserID = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userid int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userid)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT userid, name, email, password, userrole, verificationstatus, approvalstatus FROM Users
WHERE Email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Userrole,
		&i.Verificationstatus,
		&i.Approvalstatus,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT userid, name, email, password, userrole, verificationstatus, approvalstatus FROM Users
WHERE UserID = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userid int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userid)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Userrole,
		&i.Verificationstatus,
		&i.Approvalstatus,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE Users
SET Name = $2, Email = $3, Password = $4, UserRole = $5, VerificationStatus = $6, ApprovalStatus = $7
WHERE UserID = $1
RETURNING userid, name, email, password, userrole, verificationstatus, approvalstatus
`

type UpdateUserParams struct {
	Userid             int32        `json:"userid"`
	Name               string       `json:"name"`
	Email              string       `json:"email"`
	Password           string       `json:"password"`
	Userrole           string       `json:"userrole"`
	Verificationstatus sql.NullBool `json:"verificationstatus"`
	Approvalstatus     sql.NullBool `json:"approvalstatus"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Userid,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Userrole,
		arg.Verificationstatus,
		arg.Approvalstatus,
	)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Userrole,
		&i.Verificationstatus,
		&i.Approvalstatus,
	)
	return i, err
}
