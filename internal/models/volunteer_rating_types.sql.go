// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: volunteer_rating_types.sql

package models

import (
	"context"
)

const createVolunteerRatingType = `-- name: CreateVolunteerRatingType :one
INSERT INTO VolunteerRatingTypes (RatingTypeName)
VALUES ($1)
RETURNING ratingtypeid, ratingtypename
`

func (q *Queries) CreateVolunteerRatingType(ctx context.Context, ratingtypename string) (Volunteerratingtype, error) {
	row := q.db.QueryRowContext(ctx, createVolunteerRatingType, ratingtypename)
	var i Volunteerratingtype
	err := row.Scan(&i.Ratingtypeid, &i.Ratingtypename)
	return i, err
}

const deleteVolunteerRatingType = `-- name: DeleteVolunteerRatingType :exec
DELETE FROM VolunteerRatingTypes WHERE RatingTypeID = $1
`

func (q *Queries) DeleteVolunteerRatingType(ctx context.Context, ratingtypeid int32) error {
	_, err := q.db.ExecContext(ctx, deleteVolunteerRatingType, ratingtypeid)
	return err
}

const getVolunteerRatingType = `-- name: GetVolunteerRatingType :one
SELECT ratingtypeid, ratingtypename FROM VolunteerRatingTypes WHERE RatingTypeID = $1
`

func (q *Queries) GetVolunteerRatingType(ctx context.Context, ratingtypeid int32) (Volunteerratingtype, error) {
	row := q.db.QueryRowContext(ctx, getVolunteerRatingType, ratingtypeid)
	var i Volunteerratingtype
	err := row.Scan(&i.Ratingtypeid, &i.Ratingtypename)
	return i, err
}

const getVolunteerRatingTypes = `-- name: GetVolunteerRatingTypes :many
SELECT ratingtypeid, ratingtypename FROM VolunteerRatingTypes
`

func (q *Queries) GetVolunteerRatingTypes(ctx context.Context) ([]Volunteerratingtype, error) {
	rows, err := q.db.QueryContext(ctx, getVolunteerRatingTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Volunteerratingtype{}
	for rows.Next() {
		var i Volunteerratingtype
		if err := rows.Scan(&i.Ratingtypeid, &i.Ratingtypename); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVolunteerRatingType = `-- name: UpdateVolunteerRatingType :one
UPDATE VolunteerRatingTypes
SET RatingTypeName = $2
WHERE RatingTypeID = $1
RETURNING ratingtypeid, ratingtypename
`

type UpdateVolunteerRatingTypeParams struct {
	Ratingtypeid   int32  `json:"ratingtypeid"`
	Ratingtypename string `json:"ratingtypename"`
}

func (q *Queries) UpdateVolunteerRatingType(ctx context.Context, arg UpdateVolunteerRatingTypeParams) (Volunteerratingtype, error) {
	row := q.db.QueryRowContext(ctx, updateVolunteerRatingType, arg.Ratingtypeid, arg.Ratingtypename)
	var i Volunteerratingtype
	err := row.Scan(&i.Ratingtypeid, &i.Ratingtypename)
	return i, err
}
