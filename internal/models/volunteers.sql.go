// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: volunteers.sql

package models

import (
	"context"
	"database/sql"
)

const createVolunteer = `-- name: CreateVolunteer :one
INSERT INTO Volunteers (FirstName, LastName, DateOfBirth, Role, GraduateYear, Password, SafeGuardCertificate, UserID)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING volunteerid, idebatevolunteerid, firstname, lastname, dateofbirth, role, graduateyear, password, safeguardcertificate, userid
`

type CreateVolunteerParams struct {
	Firstname            string        `json:"firstname"`
	Lastname             string        `json:"lastname"`
	Dateofbirth          sql.NullTime  `json:"dateofbirth"`
	Role                 string        `json:"role"`
	Graduateyear         sql.NullInt32 `json:"graduateyear"`
	Password             string        `json:"password"`
	Safeguardcertificate sql.NullBool  `json:"safeguardcertificate"`
	Userid               int32         `json:"userid"`
}

func (q *Queries) CreateVolunteer(ctx context.Context, arg CreateVolunteerParams) (Volunteer, error) {
	row := q.db.QueryRowContext(ctx, createVolunteer,
		arg.Firstname,
		arg.Lastname,
		arg.Dateofbirth,
		arg.Role,
		arg.Graduateyear,
		arg.Password,
		arg.Safeguardcertificate,
		arg.Userid,
	)
	var i Volunteer
	err := row.Scan(
		&i.Volunteerid,
		&i.Idebatevolunteerid,
		&i.Firstname,
		&i.Lastname,
		&i.Dateofbirth,
		&i.Role,
		&i.Graduateyear,
		&i.Password,
		&i.Safeguardcertificate,
		&i.Userid,
	)
	return i, err
}

const deleteVolunteer = `-- name: DeleteVolunteer :exec
DELETE FROM Volunteers
WHERE VolunteerID = $1
`

func (q *Queries) DeleteVolunteer(ctx context.Context, volunteerid int32) error {
	_, err := q.db.ExecContext(ctx, deleteVolunteer, volunteerid)
	return err
}

const getVolunteerByID = `-- name: GetVolunteerByID :one
SELECT volunteerid, idebatevolunteerid, firstname, lastname, dateofbirth, role, graduateyear, password, safeguardcertificate, userid FROM Volunteers
WHERE VolunteerID = $1
`

func (q *Queries) GetVolunteerByID(ctx context.Context, volunteerid int32) (Volunteer, error) {
	row := q.db.QueryRowContext(ctx, getVolunteerByID, volunteerid)
	var i Volunteer
	err := row.Scan(
		&i.Volunteerid,
		&i.Idebatevolunteerid,
		&i.Firstname,
		&i.Lastname,
		&i.Dateofbirth,
		&i.Role,
		&i.Graduateyear,
		&i.Password,
		&i.Safeguardcertificate,
		&i.Userid,
	)
	return i, err
}

const updateVolunteer = `-- name: UpdateVolunteer :one
UPDATE Volunteers
SET FirstName = $2, LastName = $3, DateOfBirth = $4, Role = $5, GraduateYear = $6, Password = $7, SafeGuardCertificate = $8
WHERE VolunteerID = $1
RETURNING volunteerid, idebatevolunteerid, firstname, lastname, dateofbirth, role, graduateyear, password, safeguardcertificate, userid
`

type UpdateVolunteerParams struct {
	Volunteerid          int32         `json:"volunteerid"`
	Firstname            string        `json:"firstname"`
	Lastname             string        `json:"lastname"`
	Dateofbirth          sql.NullTime  `json:"dateofbirth"`
	Role                 string        `json:"role"`
	Graduateyear         sql.NullInt32 `json:"graduateyear"`
	Password             string        `json:"password"`
	Safeguardcertificate sql.NullBool  `json:"safeguardcertificate"`
}

func (q *Queries) UpdateVolunteer(ctx context.Context, arg UpdateVolunteerParams) (Volunteer, error) {
	row := q.db.QueryRowContext(ctx, updateVolunteer,
		arg.Volunteerid,
		arg.Firstname,
		arg.Lastname,
		arg.Dateofbirth,
		arg.Role,
		arg.Graduateyear,
		arg.Password,
		arg.Safeguardcertificate,
	)
	var i Volunteer
	err := row.Scan(
		&i.Volunteerid,
		&i.Idebatevolunteerid,
		&i.Firstname,
		&i.Lastname,
		&i.Dateofbirth,
		&i.Role,
		&i.Graduateyear,
		&i.Password,
		&i.Safeguardcertificate,
		&i.Userid,
	)
	return i, err
}
