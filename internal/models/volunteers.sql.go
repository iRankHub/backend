// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: volunteers.sql

package models

import (
	"context"
)

const createVolunteer = `-- name: CreateVolunteer :one
INSERT INTO Volunteers (Name, Role, UserID)
VALUES ($1, $2, $3)
RETURNING volunteerid, name, role, userid
`

type CreateVolunteerParams struct {
	Name   string `json:"name"`
	Role   string `json:"role"`
	Userid int32  `json:"userid"`
}

func (q *Queries) CreateVolunteer(ctx context.Context, arg CreateVolunteerParams) (Volunteer, error) {
	row := q.db.QueryRowContext(ctx, createVolunteer, arg.Name, arg.Role, arg.Userid)
	var i Volunteer
	err := row.Scan(
		&i.Volunteerid,
		&i.Name,
		&i.Role,
		&i.Userid,
	)
	return i, err
}

const deleteVolunteer = `-- name: DeleteVolunteer :exec
DELETE FROM Volunteers WHERE VolunteerID = $1
`

func (q *Queries) DeleteVolunteer(ctx context.Context, volunteerid int32) error {
	_, err := q.db.ExecContext(ctx, deleteVolunteer, volunteerid)
	return err
}

const getVolunteer = `-- name: GetVolunteer :one
SELECT volunteerid, name, role, userid FROM Volunteers WHERE VolunteerID = $1
`

func (q *Queries) GetVolunteer(ctx context.Context, volunteerid int32) (Volunteer, error) {
	row := q.db.QueryRowContext(ctx, getVolunteer, volunteerid)
	var i Volunteer
	err := row.Scan(
		&i.Volunteerid,
		&i.Name,
		&i.Role,
		&i.Userid,
	)
	return i, err
}

const getVolunteers = `-- name: GetVolunteers :many
SELECT volunteerid, name, role, userid FROM Volunteers
`

func (q *Queries) GetVolunteers(ctx context.Context) ([]Volunteer, error) {
	rows, err := q.db.QueryContext(ctx, getVolunteers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Volunteer{}
	for rows.Next() {
		var i Volunteer
		if err := rows.Scan(
			&i.Volunteerid,
			&i.Name,
			&i.Role,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVolunteer = `-- name: UpdateVolunteer :one
UPDATE Volunteers
SET Name = $2, Role = $3, UserID = $4
WHERE VolunteerID = $1
RETURNING volunteerid, name, role, userid
`

type UpdateVolunteerParams struct {
	Volunteerid int32  `json:"volunteerid"`
	Name        string `json:"name"`
	Role        string `json:"role"`
	Userid      int32  `json:"userid"`
}

func (q *Queries) UpdateVolunteer(ctx context.Context, arg UpdateVolunteerParams) (Volunteer, error) {
	row := q.db.QueryRowContext(ctx, updateVolunteer,
		arg.Volunteerid,
		arg.Name,
		arg.Role,
		arg.Userid,
	)
	var i Volunteer
	err := row.Scan(
		&i.Volunteerid,
		&i.Name,
		&i.Role,
		&i.Userid,
	)
	return i, err
}
