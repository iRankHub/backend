// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: schools.sql

package models

import (
	"context"
)

const createSchool = `-- name: CreateSchool :one
INSERT INTO Schools (Name, Address, ContactPersonID, ContactEmail, Category)
VALUES ($1, $2, $3, $4, $5)
RETURNING schoolid, name, address, contactpersonid, contactemail, category
`

type CreateSchoolParams struct {
	Name            string `json:"name"`
	Address         string `json:"address"`
	Contactpersonid int32  `json:"contactpersonid"`
	Contactemail    string `json:"contactemail"`
	Category        string `json:"category"`
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, createSchool,
		arg.Name,
		arg.Address,
		arg.Contactpersonid,
		arg.Contactemail,
		arg.Category,
	)
	var i School
	err := row.Scan(
		&i.Schoolid,
		&i.Name,
		&i.Address,
		&i.Contactpersonid,
		&i.Contactemail,
		&i.Category,
	)
	return i, err
}

const deleteSchool = `-- name: DeleteSchool :exec
DELETE FROM Schools WHERE SchoolID = $1
`

func (q *Queries) DeleteSchool(ctx context.Context, schoolid int32) error {
	_, err := q.db.ExecContext(ctx, deleteSchool, schoolid)
	return err
}

const getSchool = `-- name: GetSchool :one
SELECT schoolid, name, address, contactpersonid, contactemail, category FROM Schools WHERE SchoolID = $1
`

func (q *Queries) GetSchool(ctx context.Context, schoolid int32) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchool, schoolid)
	var i School
	err := row.Scan(
		&i.Schoolid,
		&i.Name,
		&i.Address,
		&i.Contactpersonid,
		&i.Contactemail,
		&i.Category,
	)
	return i, err
}

const getSchools = `-- name: GetSchools :many
SELECT schoolid, name, address, contactpersonid, contactemail, category FROM Schools
`

func (q *Queries) GetSchools(ctx context.Context) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, getSchools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []School{}
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.Schoolid,
			&i.Name,
			&i.Address,
			&i.Contactpersonid,
			&i.Contactemail,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchool = `-- name: UpdateSchool :one
UPDATE Schools
SET Name = $2, Address = $3, ContactPersonID = $4, ContactEmail = $5, Category = $6
WHERE SchoolID = $1
RETURNING schoolid, name, address, contactpersonid, contactemail, category
`

type UpdateSchoolParams struct {
	Schoolid        int32  `json:"schoolid"`
	Name            string `json:"name"`
	Address         string `json:"address"`
	Contactpersonid int32  `json:"contactpersonid"`
	Contactemail    string `json:"contactemail"`
	Category        string `json:"category"`
}

func (q *Queries) UpdateSchool(ctx context.Context, arg UpdateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, updateSchool,
		arg.Schoolid,
		arg.Name,
		arg.Address,
		arg.Contactpersonid,
		arg.Contactemail,
		arg.Category,
	)
	var i School
	err := row.Scan(
		&i.Schoolid,
		&i.Name,
		&i.Address,
		&i.Contactpersonid,
		&i.Contactemail,
		&i.Category,
	)
	return i, err
}
