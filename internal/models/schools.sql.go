// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: schools.sql

package models

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createSchool = `-- name: CreateSchool :one
INSERT INTO Schools (
  SchoolName, Address, Country, Province, District, ContactPersonID,
  ContactEmail, SchoolEmail, SchoolType, ContactPersonNationalID
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING schoolid, idebateschoolid, schoolname, address, country, province, district, contactpersonid, contactpersonnationalid, contactemail, schoolemail, schooltype
`

type CreateSchoolParams struct {
	Schoolname              string         `json:"schoolname"`
	Address                 string         `json:"address"`
	Country                 sql.NullString `json:"country"`
	Province                sql.NullString `json:"province"`
	District                sql.NullString `json:"district"`
	Contactpersonid         int32          `json:"contactpersonid"`
	Contactemail            string         `json:"contactemail"`
	Schoolemail             string         `json:"schoolemail"`
	Schooltype              string         `json:"schooltype"`
	Contactpersonnationalid sql.NullString `json:"contactpersonnationalid"`
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, createSchool,
		arg.Schoolname,
		arg.Address,
		arg.Country,
		arg.Province,
		arg.District,
		arg.Contactpersonid,
		arg.Contactemail,
		arg.Schoolemail,
		arg.Schooltype,
		arg.Contactpersonnationalid,
	)
	var i School
	err := row.Scan(
		&i.Schoolid,
		&i.Idebateschoolid,
		&i.Schoolname,
		&i.Address,
		&i.Country,
		&i.Province,
		&i.District,
		&i.Contactpersonid,
		&i.Contactpersonnationalid,
		&i.Contactemail,
		&i.Schoolemail,
		&i.Schooltype,
	)
	return i, err
}

const deleteSchool = `-- name: DeleteSchool :exec
DELETE FROM Schools
WHERE SchoolID = $1
`

func (q *Queries) DeleteSchool(ctx context.Context, schoolid int32) error {
	_, err := q.db.ExecContext(ctx, deleteSchool, schoolid)
	return err
}

const getSchoolByContactEmail = `-- name: GetSchoolByContactEmail :one
SELECT s.schoolid, s.idebateschoolid, s.schoolname, s.address, s.country, s.province, s.district, s.contactpersonid, s.contactpersonnationalid, s.contactemail, s.schoolemail, s.schooltype FROM Schools s
JOIN Users u ON s.ContactPersonID = u.UserID
WHERE s.ContactEmail = $1 AND u.deleted_at IS NULL
`

func (q *Queries) GetSchoolByContactEmail(ctx context.Context, contactemail string) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolByContactEmail, contactemail)
	var i School
	err := row.Scan(
		&i.Schoolid,
		&i.Idebateschoolid,
		&i.Schoolname,
		&i.Address,
		&i.Country,
		&i.Province,
		&i.District,
		&i.Contactpersonid,
		&i.Contactpersonnationalid,
		&i.Contactemail,
		&i.Schoolemail,
		&i.Schooltype,
	)
	return i, err
}

const getSchoolByID = `-- name: GetSchoolByID :one
SELECT s.schoolid, s.idebateschoolid, s.schoolname, s.address, s.country, s.province, s.district, s.contactpersonid, s.contactpersonnationalid, s.contactemail, s.schoolemail, s.schooltype FROM Schools s
JOIN Users u ON s.ContactPersonID = u.UserID
WHERE s.SchoolID = $1 AND u.deleted_at IS NULL
`

func (q *Queries) GetSchoolByID(ctx context.Context, schoolid int32) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolByID, schoolid)
	var i School
	err := row.Scan(
		&i.Schoolid,
		&i.Idebateschoolid,
		&i.Schoolname,
		&i.Address,
		&i.Country,
		&i.Province,
		&i.District,
		&i.Contactpersonid,
		&i.Contactpersonnationalid,
		&i.Contactemail,
		&i.Schoolemail,
		&i.Schooltype,
	)
	return i, err
}

const getSchoolByIDebateID = `-- name: GetSchoolByIDebateID :one
SELECT s.schoolid, s.idebateschoolid, s.schoolname, s.address, s.country, s.province, s.district, s.contactpersonid, s.contactpersonnationalid, s.contactemail, s.schoolemail, s.schooltype FROM Schools s
JOIN Users u ON s.ContactPersonID = u.UserID
WHERE s.iDebateSchoolID = $1 AND u.deleted_at IS NULL
`

func (q *Queries) GetSchoolByIDebateID(ctx context.Context, idebateschoolid sql.NullString) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolByIDebateID, idebateschoolid)
	var i School
	err := row.Scan(
		&i.Schoolid,
		&i.Idebateschoolid,
		&i.Schoolname,
		&i.Address,
		&i.Country,
		&i.Province,
		&i.District,
		&i.Contactpersonid,
		&i.Contactpersonnationalid,
		&i.Contactemail,
		&i.Schoolemail,
		&i.Schooltype,
	)
	return i, err
}

const getSchoolByUserID = `-- name: GetSchoolByUserID :one
SELECT s.schoolid, s.idebateschoolid, s.schoolname, s.address, s.country, s.province, s.district, s.contactpersonid, s.contactpersonnationalid, s.contactemail, s.schoolemail, s.schooltype FROM Schools s
JOIN Users u ON s.ContactPersonID = u.UserID
WHERE s.ContactPersonID = $1 AND u.deleted_at IS NULL
`

func (q *Queries) GetSchoolByUserID(ctx context.Context, contactpersonid int32) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolByUserID, contactpersonid)
	var i School
	err := row.Scan(
		&i.Schoolid,
		&i.Idebateschoolid,
		&i.Schoolname,
		&i.Address,
		&i.Country,
		&i.Province,
		&i.District,
		&i.Contactpersonid,
		&i.Contactpersonnationalid,
		&i.Contactemail,
		&i.Schoolemail,
		&i.Schooltype,
	)
	return i, err
}

const getSchoolIDByName = `-- name: GetSchoolIDByName :one
SELECT SchoolID FROM Schools WHERE SchoolName = $1
`

func (q *Queries) GetSchoolIDByName(ctx context.Context, schoolname string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getSchoolIDByName, schoolname)
	var schoolid int32
	err := row.Scan(&schoolid)
	return schoolid, err
}

const getSchoolIDByUserID = `-- name: GetSchoolIDByUserID :one
SELECT s.SchoolID
FROM Schools s
JOIN Users u ON s.ContactPersonID = u.UserID
WHERE u.UserID = $1
`

func (q *Queries) GetSchoolIDByUserID(ctx context.Context, userid int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getSchoolIDByUserID, userid)
	var schoolid int32
	err := row.Scan(&schoolid)
	return schoolid, err
}

const getSchoolIDsByNames = `-- name: GetSchoolIDsByNames :many
SELECT SchoolID, SchoolName FROM Schools WHERE LOWER(SchoolName) = ANY(ARRAY(SELECT LOWER(unnest($1::text[]))))
`

type GetSchoolIDsByNamesRow struct {
	Schoolid   int32  `json:"schoolid"`
	Schoolname string `json:"schoolname"`
}

func (q *Queries) GetSchoolIDsByNames(ctx context.Context, dollar_1 []string) ([]GetSchoolIDsByNamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getSchoolIDsByNames, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSchoolIDsByNamesRow{}
	for rows.Next() {
		var i GetSchoolIDsByNamesRow
		if err := rows.Scan(&i.Schoolid, &i.Schoolname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchoolsByCountry = `-- name: GetSchoolsByCountry :many
SELECT s.schoolid, s.idebateschoolid, s.schoolname, s.address, s.country, s.province, s.district, s.contactpersonid, s.contactpersonnationalid, s.contactemail, s.schoolemail, s.schooltype FROM Schools s
JOIN Users u ON s.ContactPersonID = u.UserID
WHERE s.Country = $1 AND u.deleted_at IS NULL
`

func (q *Queries) GetSchoolsByCountry(ctx context.Context, country sql.NullString) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, getSchoolsByCountry, country)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []School{}
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.Schoolid,
			&i.Idebateschoolid,
			&i.Schoolname,
			&i.Address,
			&i.Country,
			&i.Province,
			&i.District,
			&i.Contactpersonid,
			&i.Contactpersonnationalid,
			&i.Contactemail,
			&i.Schoolemail,
			&i.Schooltype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchoolsByDistrict = `-- name: GetSchoolsByDistrict :many
SELECT s.schoolid, s.idebateschoolid, s.schoolname, s.address, s.country, s.province, s.district, s.contactpersonid, s.contactpersonnationalid, s.contactemail, s.schoolemail, s.schooltype FROM Schools s
JOIN Users u ON s.ContactPersonID = u.UserID
WHERE s.District = $1 AND u.deleted_at IS NULL
`

func (q *Queries) GetSchoolsByDistrict(ctx context.Context, district sql.NullString) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, getSchoolsByDistrict, district)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []School{}
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.Schoolid,
			&i.Idebateschoolid,
			&i.Schoolname,
			&i.Address,
			&i.Country,
			&i.Province,
			&i.District,
			&i.Contactpersonid,
			&i.Contactpersonnationalid,
			&i.Contactemail,
			&i.Schoolemail,
			&i.Schooltype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchoolsByLeague = `-- name: GetSchoolsByLeague :many
SELECT s.schoolid, s.idebateschoolid, s.schoolname, s.address, s.country, s.province, s.district, s.contactpersonid, s.contactpersonnationalid, s.contactemail, s.schoolemail, s.schooltype
FROM Schools s
JOIN Users u ON s.ContactPersonID = u.UserID
JOIN Leagues l ON l.LeagueID = $1
WHERE u.deleted_at IS NULL
  AND (
    (l.LeagueType = 'local' AND s.District = ANY(SELECT jsonb_array_elements_text(l.Details->'districts')))
    OR
    (l.LeagueType = 'international' AND s.Country = ANY(SELECT jsonb_array_elements_text(l.Details->'countries')))
  )
`

func (q *Queries) GetSchoolsByLeague(ctx context.Context, leagueid int32) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, getSchoolsByLeague, leagueid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []School{}
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.Schoolid,
			&i.Idebateschoolid,
			&i.Schoolname,
			&i.Address,
			&i.Country,
			&i.Province,
			&i.District,
			&i.Contactpersonid,
			&i.Contactpersonnationalid,
			&i.Contactemail,
			&i.Schoolemail,
			&i.Schooltype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchoolsPaginated = `-- name: GetSchoolsPaginated :many
SELECT schoolid, idebateschoolid, schoolname, address, country, province, district, contactpersonid, contactpersonnationalid, contactemail, schoolemail, schooltype
FROM Schools
ORDER BY SchoolID
LIMIT $1 OFFSET $2
`

type GetSchoolsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetSchoolsPaginated(ctx context.Context, arg GetSchoolsPaginatedParams) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, getSchoolsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []School{}
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.Schoolid,
			&i.Idebateschoolid,
			&i.Schoolname,
			&i.Address,
			&i.Country,
			&i.Province,
			&i.District,
			&i.Contactpersonid,
			&i.Contactpersonnationalid,
			&i.Contactemail,
			&i.Schoolemail,
			&i.Schooltype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalSchoolCount = `-- name: GetTotalSchoolCount :one
SELECT COUNT(*) FROM Schools
`

func (q *Queries) GetTotalSchoolCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalSchoolCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateSchool = `-- name: UpdateSchool :one
UPDATE Schools
SET SchoolName = $2, Address = $3, Country = $4, Province = $5, District = $6,
    ContactPersonID = $7, ContactEmail = $8, SchoolEmail = $9, SchoolType = $10,
    ContactPersonNationalID = $11
WHERE SchoolID = $1
RETURNING schoolid, idebateschoolid, schoolname, address, country, province, district, contactpersonid, contactpersonnationalid, contactemail, schoolemail, schooltype
`

type UpdateSchoolParams struct {
	Schoolid                int32          `json:"schoolid"`
	Schoolname              string         `json:"schoolname"`
	Address                 string         `json:"address"`
	Country                 sql.NullString `json:"country"`
	Province                sql.NullString `json:"province"`
	District                sql.NullString `json:"district"`
	Contactpersonid         int32          `json:"contactpersonid"`
	Contactemail            string         `json:"contactemail"`
	Schoolemail             string         `json:"schoolemail"`
	Schooltype              string         `json:"schooltype"`
	Contactpersonnationalid sql.NullString `json:"contactpersonnationalid"`
}

func (q *Queries) UpdateSchool(ctx context.Context, arg UpdateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, updateSchool,
		arg.Schoolid,
		arg.Schoolname,
		arg.Address,
		arg.Country,
		arg.Province,
		arg.District,
		arg.Contactpersonid,
		arg.Contactemail,
		arg.Schoolemail,
		arg.Schooltype,
		arg.Contactpersonnationalid,
	)
	var i School
	err := row.Scan(
		&i.Schoolid,
		&i.Idebateschoolid,
		&i.Schoolname,
		&i.Address,
		&i.Country,
		&i.Province,
		&i.District,
		&i.Contactpersonid,
		&i.Contactpersonnationalid,
		&i.Contactemail,
		&i.Schoolemail,
		&i.Schooltype,
	)
	return i, err
}

const updateSchoolAddress = `-- name: UpdateSchoolAddress :one
UPDATE Schools
SET Address = $2
WHERE ContactPersonID = $1
RETURNING schoolid, idebateschoolid, schoolname, address, country, province, district, contactpersonid, contactpersonnationalid, contactemail, schoolemail, schooltype
`

type UpdateSchoolAddressParams struct {
	Contactpersonid int32  `json:"contactpersonid"`
	Address         string `json:"address"`
}

func (q *Queries) UpdateSchoolAddress(ctx context.Context, arg UpdateSchoolAddressParams) (School, error) {
	row := q.db.QueryRowContext(ctx, updateSchoolAddress, arg.Contactpersonid, arg.Address)
	var i School
	err := row.Scan(
		&i.Schoolid,
		&i.Idebateschoolid,
		&i.Schoolname,
		&i.Address,
		&i.Country,
		&i.Province,
		&i.District,
		&i.Contactpersonid,
		&i.Contactpersonnationalid,
		&i.Contactemail,
		&i.Schoolemail,
		&i.Schooltype,
	)
	return i, err
}
