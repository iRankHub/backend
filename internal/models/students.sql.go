// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: students.sql

package models

import (
	"context"
	"database/sql"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO Students (FirstName, LastName, Gender, Grade, DateOfBirth, Email, Password, SchoolID, UserID)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8,$9)
RETURNING studentid, idebatestudentid, firstname, lastname, gender, grade, dateofbirth, email, password, schoolid, userid
`

type CreateStudentParams struct {
	Firstname   string         `json:"firstname"`
	Lastname    string         `json:"lastname"`
	Gender      sql.NullString `json:"gender"`
	Grade       string         `json:"grade"`
	Dateofbirth sql.NullTime   `json:"dateofbirth"`
	Email       sql.NullString `json:"email"`
	Password    string         `json:"password"`
	Schoolid    int32          `json:"schoolid"`
	Userid      int32          `json:"userid"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.Firstname,
		arg.Lastname,
		arg.Gender,
		arg.Grade,
		arg.Dateofbirth,
		arg.Email,
		arg.Password,
		arg.Schoolid,
		arg.Userid,
	)
	var i Student
	err := row.Scan(
		&i.Studentid,
		&i.Idebatestudentid,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Grade,
		&i.Dateofbirth,
		&i.Email,
		&i.Password,
		&i.Schoolid,
		&i.Userid,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM Students
WHERE StudentID = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, studentid int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, studentid)
	return err
}

const getAllStudents = `-- name: GetAllStudents :many
SELECT s.studentid, s.idebatestudentid, s.firstname, s.lastname, s.gender, s.grade, s.dateofbirth, s.email, s.password, s.schoolid, s.userid
FROM Students s
JOIN Users u ON s.UserID = u.UserID
WHERE u.UserRole = 'student'
  AND u.Status = 'approved'
  AND u.deleted_at IS NULL
`

func (q *Queries) GetAllStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getAllStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.Studentid,
			&i.Idebatestudentid,
			&i.Firstname,
			&i.Lastname,
			&i.Gender,
			&i.Grade,
			&i.Dateofbirth,
			&i.Email,
			&i.Password,
			&i.Schoolid,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentByEmail = `-- name: GetStudentByEmail :one
SELECT studentid, idebatestudentid, firstname, lastname, gender, grade, dateofbirth, email, password, schoolid, userid FROM Students
WHERE Email = $1
`

func (q *Queries) GetStudentByEmail(ctx context.Context, email sql.NullString) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentByEmail, email)
	var i Student
	err := row.Scan(
		&i.Studentid,
		&i.Idebatestudentid,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Grade,
		&i.Dateofbirth,
		&i.Email,
		&i.Password,
		&i.Schoolid,
		&i.Userid,
	)
	return i, err
}

const getStudentByID = `-- name: GetStudentByID :one
SELECT studentid, idebatestudentid, firstname, lastname, gender, grade, dateofbirth, email, password, schoolid, userid FROM Students
WHERE StudentID = $1
`

func (q *Queries) GetStudentByID(ctx context.Context, studentid int32) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentByID, studentid)
	var i Student
	err := row.Scan(
		&i.Studentid,
		&i.Idebatestudentid,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Grade,
		&i.Dateofbirth,
		&i.Email,
		&i.Password,
		&i.Schoolid,
		&i.Userid,
	)
	return i, err
}

const getStudentByIDebateID = `-- name: GetStudentByIDebateID :one
SELECT studentid, idebatestudentid, firstname, lastname, gender, grade, dateofbirth, email, password, schoolid, userid FROM Students
WHERE iDebateStudentID = $1
`

func (q *Queries) GetStudentByIDebateID(ctx context.Context, idebatestudentid sql.NullString) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentByIDebateID, idebatestudentid)
	var i Student
	err := row.Scan(
		&i.Studentid,
		&i.Idebatestudentid,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Grade,
		&i.Dateofbirth,
		&i.Email,
		&i.Password,
		&i.Schoolid,
		&i.Userid,
	)
	return i, err
}

const getStudentByUserID = `-- name: GetStudentByUserID :one
SELECT
    s.StudentID,
    s.FirstName,
    s.LastName,
    s.Email,
    s.SchoolID
FROM
    Users u
JOIN
    Students s ON u.UserID = s.UserID
WHERE
    u.UserID = $1
    AND u.UserRole = 'student'
`

type GetStudentByUserIDRow struct {
	Studentid int32          `json:"studentid"`
	Firstname string         `json:"firstname"`
	Lastname  string         `json:"lastname"`
	Email     sql.NullString `json:"email"`
	Schoolid  int32          `json:"schoolid"`
}

func (q *Queries) GetStudentByUserID(ctx context.Context, userid int32) (GetStudentByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getStudentByUserID, userid)
	var i GetStudentByUserIDRow
	err := row.Scan(
		&i.Studentid,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Schoolid,
	)
	return i, err
}

const getStudentsPaginated = `-- name: GetStudentsPaginated :many
SELECT s.studentid, s.idebatestudentid, s.firstname, s.lastname, s.gender, s.grade, s.dateofbirth, s.email, s.password, s.schoolid, s.userid, sch.SchoolName
FROM Students s
JOIN Schools sch ON s.SchoolID = sch.SchoolID
ORDER BY s.StudentID
LIMIT $1 OFFSET $2
`

type GetStudentsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetStudentsPaginatedRow struct {
	Studentid        int32          `json:"studentid"`
	Idebatestudentid sql.NullString `json:"idebatestudentid"`
	Firstname        string         `json:"firstname"`
	Lastname         string         `json:"lastname"`
	Gender           sql.NullString `json:"gender"`
	Grade            string         `json:"grade"`
	Dateofbirth      sql.NullTime   `json:"dateofbirth"`
	Email            sql.NullString `json:"email"`
	Password         string         `json:"password"`
	Schoolid         int32          `json:"schoolid"`
	Userid           int32          `json:"userid"`
	Schoolname       string         `json:"schoolname"`
}

func (q *Queries) GetStudentsPaginated(ctx context.Context, arg GetStudentsPaginatedParams) ([]GetStudentsPaginatedRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudentsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStudentsPaginatedRow{}
	for rows.Next() {
		var i GetStudentsPaginatedRow
		if err := rows.Scan(
			&i.Studentid,
			&i.Idebatestudentid,
			&i.Firstname,
			&i.Lastname,
			&i.Gender,
			&i.Grade,
			&i.Dateofbirth,
			&i.Email,
			&i.Password,
			&i.Schoolid,
			&i.Userid,
			&i.Schoolname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalStudentCount = `-- name: GetTotalStudentCount :one
SELECT COUNT(*) FROM Students
`

func (q *Queries) GetTotalStudentCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalStudentCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE Students
SET FirstName = $2, LastName = $3, Grade = $4, DateOfBirth = $5, Email = $6, Password = $7, SchoolID = $8
WHERE StudentID = $1
RETURNING studentid, idebatestudentid, firstname, lastname, gender, grade, dateofbirth, email, password, schoolid, userid
`

type UpdateStudentParams struct {
	Studentid   int32          `json:"studentid"`
	Firstname   string         `json:"firstname"`
	Lastname    string         `json:"lastname"`
	Grade       string         `json:"grade"`
	Dateofbirth sql.NullTime   `json:"dateofbirth"`
	Email       sql.NullString `json:"email"`
	Password    string         `json:"password"`
	Schoolid    int32          `json:"schoolid"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudent,
		arg.Studentid,
		arg.Firstname,
		arg.Lastname,
		arg.Grade,
		arg.Dateofbirth,
		arg.Email,
		arg.Password,
		arg.Schoolid,
	)
	var i Student
	err := row.Scan(
		&i.Studentid,
		&i.Idebatestudentid,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Grade,
		&i.Dateofbirth,
		&i.Email,
		&i.Password,
		&i.Schoolid,
		&i.Userid,
	)
	return i, err
}
