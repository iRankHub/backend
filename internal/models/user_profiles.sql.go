// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_profiles.sql

package models

import (
	"context"
	"database/sql"
)

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO UserProfiles (UserID, Address, Phone, Bio, ProfilePicture)
VALUES ($1, $2, $3, $4, $5)
RETURNING profileid, userid, address, phone, bio, profilepicture
`

type CreateUserProfileParams struct {
	Userid         int32          `json:"userid"`
	Address        sql.NullString `json:"address"`
	Phone          sql.NullString `json:"phone"`
	Bio            sql.NullString `json:"bio"`
	Profilepicture []byte         `json:"profilepicture"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (Userprofile, error) {
	row := q.db.QueryRowContext(ctx, createUserProfile,
		arg.Userid,
		arg.Address,
		arg.Phone,
		arg.Bio,
		arg.Profilepicture,
	)
	var i Userprofile
	err := row.Scan(
		&i.Profileid,
		&i.Userid,
		&i.Address,
		&i.Phone,
		&i.Bio,
		&i.Profilepicture,
	)
	return i, err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM UserProfiles
WHERE UserID = $1
`

func (q *Queries) DeleteUserProfile(ctx context.Context, userid int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserProfile, userid)
	return err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT profileid, userid, address, phone, bio, profilepicture FROM UserProfiles
WHERE UserID = $1
`

func (q *Queries) GetUserProfile(ctx context.Context, userid int32) (Userprofile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, userid)
	var i Userprofile
	err := row.Scan(
		&i.Profileid,
		&i.Userid,
		&i.Address,
		&i.Phone,
		&i.Bio,
		&i.Profilepicture,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE UserProfiles
SET Address = $2, Phone = $3, Bio = $4, ProfilePicture = $5
WHERE UserID = $1
RETURNING profileid, userid, address, phone, bio, profilepicture
`

type UpdateUserProfileParams struct {
	Userid         int32          `json:"userid"`
	Address        sql.NullString `json:"address"`
	Phone          sql.NullString `json:"phone"`
	Bio            sql.NullString `json:"bio"`
	Profilepicture []byte         `json:"profilepicture"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (Userprofile, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile,
		arg.Userid,
		arg.Address,
		arg.Phone,
		arg.Bio,
		arg.Profilepicture,
	)
	var i Userprofile
	err := row.Scan(
		&i.Profileid,
		&i.Userid,
		&i.Address,
		&i.Phone,
		&i.Bio,
		&i.Profilepicture,
	)
	return i, err
}
