// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_profiles.sql

package models

import (
	"context"
	"database/sql"
	"time"
)

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO UserProfiles (UserID, Name, UserRole, Email, Password, VerificationStatus, Address, Phone, Bio, ProfilePicture, Gender)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING profileid, userid, name, userrole, email, password, gender, address, phone, bio, profilepicture, verificationstatus
`

type CreateUserProfileParams struct {
	Userid             int32          `json:"userid"`
	Name               string         `json:"name"`
	Userrole           string         `json:"userrole"`
	Email              string         `json:"email"`
	Password           string         `json:"password"`
	Verificationstatus sql.NullBool   `json:"verificationstatus"`
	Address            sql.NullString `json:"address"`
	Phone              sql.NullString `json:"phone"`
	Bio                sql.NullString `json:"bio"`
	Profilepicture     []byte         `json:"profilepicture"`
	Gender             sql.NullString `json:"gender"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (Userprofile, error) {
	row := q.db.QueryRowContext(ctx, createUserProfile,
		arg.Userid,
		arg.Name,
		arg.Userrole,
		arg.Email,
		arg.Password,
		arg.Verificationstatus,
		arg.Address,
		arg.Phone,
		arg.Bio,
		arg.Profilepicture,
		arg.Gender,
	)
	var i Userprofile
	err := row.Scan(
		&i.Profileid,
		&i.Userid,
		&i.Name,
		&i.Userrole,
		&i.Email,
		&i.Password,
		&i.Gender,
		&i.Address,
		&i.Phone,
		&i.Bio,
		&i.Profilepicture,
		&i.Verificationstatus,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT
    u.UserID, u.Name, u.Email, u.UserRole, u.password, u.Gender, u.VerificationStatus,
    u.two_factor_enabled, u.created_at AS SignUpDate,
    up.Address, up.Phone, up.Bio, up.ProfilePicture,
    s.Grade, s.DateOfBirth, s.SchoolID,
    sch.SchoolName, sch.Address AS SchoolAddress, sch.Country, sch.Province, sch.District, sch.SchoolType,
    v.Role AS VolunteerRole, v.GraduateYear, v.SafeGuardCertificate, v.HasInternship, v.IsEnrolledInUniversity,
    CASE WHEN EXISTS (
        SELECT 1 FROM WebAuthnCredentials wac WHERE wac.UserID = u.UserID
    ) THEN true ELSE false END AS biometric_auth_enabled
FROM Users u
LEFT JOIN UserProfiles up ON u.UserID = up.UserID
LEFT JOIN Students s ON u.UserID = s.UserID
LEFT JOIN Schools sch ON u.UserID = sch.ContactPersonID
LEFT JOIN Volunteers v ON u.UserID = v.UserID
WHERE u.UserID = $1 AND u.deleted_at IS NULL
`

type GetUserProfileRow struct {
	Userid                 int32          `json:"userid"`
	Name                   string         `json:"name"`
	Email                  string         `json:"email"`
	Userrole               string         `json:"userrole"`
	Password               string         `json:"password"`
	Gender                 sql.NullString `json:"gender"`
	Verificationstatus     sql.NullBool   `json:"verificationstatus"`
	TwoFactorEnabled       sql.NullBool   `json:"two_factor_enabled"`
	Signupdate             sql.NullTime   `json:"signupdate"`
	Address                sql.NullString `json:"address"`
	Phone                  sql.NullString `json:"phone"`
	Bio                    sql.NullString `json:"bio"`
	Profilepicture         []byte         `json:"profilepicture"`
	Grade                  sql.NullString `json:"grade"`
	Dateofbirth            sql.NullTime   `json:"dateofbirth"`
	Schoolid               sql.NullInt32  `json:"schoolid"`
	Schoolname             sql.NullString `json:"schoolname"`
	Schooladdress          sql.NullString `json:"schooladdress"`
	Country                sql.NullString `json:"country"`
	Province               sql.NullString `json:"province"`
	District               sql.NullString `json:"district"`
	Schooltype             sql.NullString `json:"schooltype"`
	Volunteerrole          sql.NullString `json:"volunteerrole"`
	Graduateyear           sql.NullInt32  `json:"graduateyear"`
	Safeguardcertificate   []byte         `json:"safeguardcertificate"`
	Hasinternship          sql.NullBool   `json:"hasinternship"`
	Isenrolledinuniversity sql.NullBool   `json:"isenrolledinuniversity"`
	BiometricAuthEnabled   bool           `json:"biometric_auth_enabled"`
}

func (q *Queries) GetUserProfile(ctx context.Context, userid int32) (GetUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, userid)
	var i GetUserProfileRow
	err := row.Scan(
		&i.Userid,
		&i.Name,
		&i.Email,
		&i.Userrole,
		&i.Password,
		&i.Gender,
		&i.Verificationstatus,
		&i.TwoFactorEnabled,
		&i.Signupdate,
		&i.Address,
		&i.Phone,
		&i.Bio,
		&i.Profilepicture,
		&i.Grade,
		&i.Dateofbirth,
		&i.Schoolid,
		&i.Schoolname,
		&i.Schooladdress,
		&i.Country,
		&i.Province,
		&i.District,
		&i.Schooltype,
		&i.Volunteerrole,
		&i.Graduateyear,
		&i.Safeguardcertificate,
		&i.Hasinternship,
		&i.Isenrolledinuniversity,
		&i.BiometricAuthEnabled,
	)
	return i, err
}

const softDeleteUserProfile = `-- name: SoftDeleteUserProfile :exec
UPDATE Users
SET deleted_at = CURRENT_TIMESTAMP
WHERE UserID = $1
`

func (q *Queries) SoftDeleteUserProfile(ctx context.Context, userid int32) error {
	_, err := q.db.ExecContext(ctx, softDeleteUserProfile, userid)
	return err
}

const updateAdminProfile = `-- name: UpdateAdminProfile :exec
WITH updated_admin AS (
    UPDATE Users
    SET Name = COALESCE($2, Name),
        Gender = COALESCE($3, Gender),
        Email = COALESCE($4, Email)
    WHERE Users.UserID = $1
    RETURNING Users.UserID
)
UPDATE UserProfiles
SET Name = COALESCE($2, Name),
    Gender = COALESCE($3, Gender),
    Email = COALESCE($4, Email),
    Address = COALESCE($5, Address),
    Bio = COALESCE($6, Bio),
    Phone = COALESCE($7, Phone),
    ProfilePicture = COALESCE($8, ProfilePicture)
WHERE UserProfiles.UserID = (SELECT UserID FROM updated_admin)
`

type UpdateAdminProfileParams struct {
	Userid         int32          `json:"userid"`
	Name           string         `json:"name"`
	Gender         sql.NullString `json:"gender"`
	Email          string         `json:"email"`
	Address        sql.NullString `json:"address"`
	Bio            sql.NullString `json:"bio"`
	Phone          sql.NullString `json:"phone"`
	Profilepicture []byte         `json:"profilepicture"`
}

func (q *Queries) UpdateAdminProfile(ctx context.Context, arg UpdateAdminProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminProfile,
		arg.Userid,
		arg.Name,
		arg.Gender,
		arg.Email,
		arg.Address,
		arg.Bio,
		arg.Phone,
		arg.Profilepicture,
	)
	return err
}

const updateSchoolDetails = `-- name: UpdateSchoolDetails :exec
UPDATE Schools
SET ContactPersonNationalID = COALESCE($2, ContactPersonNationalID),
    SchoolName = COALESCE($3, SchoolName),
    Address = COALESCE($4, Address),
    SchoolEmail = COALESCE($5, SchoolEmail),
    SchoolType = COALESCE($6, SchoolType),
    ContactEmail = COALESCE($7, ContactEmail)
WHERE ContactPersonID = $1
`

type UpdateSchoolDetailsParams struct {
	Contactpersonid         int32          `json:"contactpersonid"`
	Contactpersonnationalid sql.NullString `json:"contactpersonnationalid"`
	Schoolname              string         `json:"schoolname"`
	Address                 string         `json:"address"`
	Schoolemail             string         `json:"schoolemail"`
	Schooltype              string         `json:"schooltype"`
	Contactemail            string         `json:"contactemail"`
}

func (q *Queries) UpdateSchoolDetails(ctx context.Context, arg UpdateSchoolDetailsParams) error {
	_, err := q.db.ExecContext(ctx, updateSchoolDetails,
		arg.Contactpersonid,
		arg.Contactpersonnationalid,
		arg.Schoolname,
		arg.Address,
		arg.Schoolemail,
		arg.Schooltype,
		arg.Contactemail,
	)
	return err
}

const updateSchoolUser = `-- name: UpdateSchoolUser :exec
UPDATE Users
SET Name = COALESCE($2, Name),
    Gender = COALESCE($3, Gender),
    Email = COALESCE($4, Email)
WHERE UserID = $1
`

type UpdateSchoolUserParams struct {
	Userid int32          `json:"userid"`
	Name   string         `json:"name"`
	Gender sql.NullString `json:"gender"`
	Email  string         `json:"email"`
}

func (q *Queries) UpdateSchoolUser(ctx context.Context, arg UpdateSchoolUserParams) error {
	_, err := q.db.ExecContext(ctx, updateSchoolUser,
		arg.Userid,
		arg.Name,
		arg.Gender,
		arg.Email,
	)
	return err
}

const updateSchoolUserProfile = `-- name: UpdateSchoolUserProfile :exec
UPDATE UserProfiles
SET Name = COALESCE($2, Name),
    Email = COALESCE($3, Email),
    Gender = COALESCE($4, Gender),
    Address = COALESCE($5, Address),
    Phone = COALESCE($6, Phone),
    Bio = COALESCE($7, Bio),
    ProfilePicture = COALESCE($8, ProfilePicture)
WHERE UserProfiles.UserID = $1
`

type UpdateSchoolUserProfileParams struct {
	Userid         int32          `json:"userid"`
	Name           string         `json:"name"`
	Email          string         `json:"email"`
	Gender         sql.NullString `json:"gender"`
	Address        sql.NullString `json:"address"`
	Phone          sql.NullString `json:"phone"`
	Bio            sql.NullString `json:"bio"`
	Profilepicture []byte         `json:"profilepicture"`
}

func (q *Queries) UpdateSchoolUserProfile(ctx context.Context, arg UpdateSchoolUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateSchoolUserProfile,
		arg.Userid,
		arg.Name,
		arg.Email,
		arg.Gender,
		arg.Address,
		arg.Phone,
		arg.Bio,
		arg.Profilepicture,
	)
	return err
}

const updateStudentDetails = `-- name: UpdateStudentDetails :exec
UPDATE Students
SET FirstName = COALESCE($2, FirstName),
    LastName = COALESCE($3, LastName),
    Gender = COALESCE($4, Gender),
    Email = COALESCE($5, Email),
    Grade = COALESCE($6, Grade),
    DateOfBirth = COALESCE($7::DATE, DateOfBirth)
WHERE UserID = $1
`

type UpdateStudentDetailsParams struct {
	Userid    int32          `json:"userid"`
	Firstname string         `json:"firstname"`
	Lastname  string         `json:"lastname"`
	Gender    sql.NullString `json:"gender"`
	Email     sql.NullString `json:"email"`
	Grade     string         `json:"grade"`
	Column7   time.Time      `json:"column_7"`
}

func (q *Queries) UpdateStudentDetails(ctx context.Context, arg UpdateStudentDetailsParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentDetails,
		arg.Userid,
		arg.Firstname,
		arg.Lastname,
		arg.Gender,
		arg.Email,
		arg.Grade,
		arg.Column7,
	)
	return err
}

const updateStudentUser = `-- name: UpdateStudentUser :exec
UPDATE Users
SET Name = COALESCE($2 || ' ' || $3, Name),
    Gender = COALESCE($4, Gender),
    Email = COALESCE($5, Email)
WHERE UserID = $1
`

type UpdateStudentUserParams struct {
	Userid  int32          `json:"userid"`
	Column2 sql.NullString `json:"column_2"`
	Column3 sql.NullString `json:"column_3"`
	Gender  sql.NullString `json:"gender"`
	Email   string         `json:"email"`
}

func (q *Queries) UpdateStudentUser(ctx context.Context, arg UpdateStudentUserParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentUser,
		arg.Userid,
		arg.Column2,
		arg.Column3,
		arg.Gender,
		arg.Email,
	)
	return err
}

const updateStudentUserProfile = `-- name: UpdateStudentUserProfile :exec
UPDATE UserProfiles
SET Name = COALESCE($2 || ' ' || $3, Name),
    Gender = COALESCE($4, Gender),
    Email = COALESCE($5, Email),
    Address = COALESCE($6, Address),
    Bio = COALESCE($7, Bio),
    ProfilePicture = COALESCE($8, ProfilePicture),
    Phone = COALESCE($9, Phone)
WHERE UserID = $1
`

type UpdateStudentUserProfileParams struct {
	Userid         int32          `json:"userid"`
	Column2        sql.NullString `json:"column_2"`
	Column3        sql.NullString `json:"column_3"`
	Gender         sql.NullString `json:"gender"`
	Email          string         `json:"email"`
	Address        sql.NullString `json:"address"`
	Bio            sql.NullString `json:"bio"`
	Profilepicture []byte         `json:"profilepicture"`
	Phone          sql.NullString `json:"phone"`
}

func (q *Queries) UpdateStudentUserProfile(ctx context.Context, arg UpdateStudentUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentUserProfile,
		arg.Userid,
		arg.Column2,
		arg.Column3,
		arg.Gender,
		arg.Email,
		arg.Address,
		arg.Bio,
		arg.Profilepicture,
		arg.Phone,
	)
	return err
}

const updateUserBasicInfo = `-- name: UpdateUserBasicInfo :exec
UPDATE Users
SET
    Name = COALESCE($2, Name),
    Email = COALESCE($3, Email),
    Gender = COALESCE($4, Gender),
    updated_at = CURRENT_TIMESTAMP
WHERE UserID = $1
`

type UpdateUserBasicInfoParams struct {
	Userid int32          `json:"userid"`
	Name   string         `json:"name"`
	Email  string         `json:"email"`
	Gender sql.NullString `json:"gender"`
}

func (q *Queries) UpdateUserBasicInfo(ctx context.Context, arg UpdateUserBasicInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBasicInfo,
		arg.Userid,
		arg.Name,
		arg.Email,
		arg.Gender,
	)
	return err
}

const updateVolunteerDetails = `-- name: UpdateVolunteerDetails :exec
UPDATE Volunteers
SET FirstName = COALESCE($2, FirstName),
    LastName = COALESCE($3, LastName),
    Gender = COALESCE($4, Gender),
    NationalID = COALESCE($5, NationalID),
    GraduateYear = COALESCE($6, GraduateYear),
    IsEnrolledInUniversity = COALESCE($7, IsEnrolledInUniversity),
    HasInternship = COALESCE($8, HasInternship),
    Role = COALESCE($9, Role)
WHERE UserID = $1
`

type UpdateVolunteerDetailsParams struct {
	Userid                 int32          `json:"userid"`
	Firstname              string         `json:"firstname"`
	Lastname               string         `json:"lastname"`
	Gender                 sql.NullString `json:"gender"`
	Nationalid             sql.NullString `json:"nationalid"`
	Graduateyear           sql.NullInt32  `json:"graduateyear"`
	Isenrolledinuniversity sql.NullBool   `json:"isenrolledinuniversity"`
	Hasinternship          sql.NullBool   `json:"hasinternship"`
	Role                   string         `json:"role"`
}

func (q *Queries) UpdateVolunteerDetails(ctx context.Context, arg UpdateVolunteerDetailsParams) error {
	_, err := q.db.ExecContext(ctx, updateVolunteerDetails,
		arg.Userid,
		arg.Firstname,
		arg.Lastname,
		arg.Gender,
		arg.Nationalid,
		arg.Graduateyear,
		arg.Isenrolledinuniversity,
		arg.Hasinternship,
		arg.Role,
	)
	return err
}

const updateVolunteerUser = `-- name: UpdateVolunteerUser :exec
UPDATE Users
SET Name = COALESCE($2 || ' ' || $3, Name),
    Gender = COALESCE($4, Gender),
    Email = COALESCE($5, Email)
WHERE UserID = $1
`

type UpdateVolunteerUserParams struct {
	Userid  int32          `json:"userid"`
	Column2 sql.NullString `json:"column_2"`
	Column3 sql.NullString `json:"column_3"`
	Gender  sql.NullString `json:"gender"`
	Email   string         `json:"email"`
}

func (q *Queries) UpdateVolunteerUser(ctx context.Context, arg UpdateVolunteerUserParams) error {
	_, err := q.db.ExecContext(ctx, updateVolunteerUser,
		arg.Userid,
		arg.Column2,
		arg.Column3,
		arg.Gender,
		arg.Email,
	)
	return err
}

const updateVolunteerUserProfile = `-- name: UpdateVolunteerUserProfile :exec
UPDATE UserProfiles
SET Name = COALESCE($2 || ' ' || $3, Name),
    Gender = COALESCE($4, Gender),
    Email = COALESCE($5, Email),
    Address = COALESCE($6, Address),
    Bio = COALESCE($7, Bio),
    ProfilePicture = COALESCE($8, ProfilePicture),
    Phone = COALESCE($9, Phone)
WHERE UserID = $1
`

type UpdateVolunteerUserProfileParams struct {
	Userid         int32          `json:"userid"`
	Column2        sql.NullString `json:"column_2"`
	Column3        sql.NullString `json:"column_3"`
	Gender         sql.NullString `json:"gender"`
	Email          string         `json:"email"`
	Address        sql.NullString `json:"address"`
	Bio            sql.NullString `json:"bio"`
	Profilepicture []byte         `json:"profilepicture"`
	Phone          sql.NullString `json:"phone"`
}

func (q *Queries) UpdateVolunteerUserProfile(ctx context.Context, arg UpdateVolunteerUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateVolunteerUserProfile,
		arg.Userid,
		arg.Column2,
		arg.Column3,
		arg.Gender,
		arg.Email,
		arg.Address,
		arg.Bio,
		arg.Profilepicture,
		arg.Phone,
	)
	return err
}
