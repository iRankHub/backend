// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: teams.sql

package models

import (
	"context"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO Teams (Name, SchoolID, TournamentID)
VALUES ($1, $2, $3)
RETURNING teamid, name, schoolid, tournamentid
`

type CreateTeamParams struct {
	Name         string `json:"name"`
	Schoolid     int32  `json:"schoolid"`
	Tournamentid int32  `json:"tournamentid"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.Schoolid, arg.Tournamentid)
	var i Team
	err := row.Scan(
		&i.Teamid,
		&i.Name,
		&i.Schoolid,
		&i.Tournamentid,
	)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM Teams WHERE TeamID = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, teamid int32) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, teamid)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT teamid, name, schoolid, tournamentid FROM Teams WHERE TeamID = $1
`

func (q *Queries) GetTeam(ctx context.Context, teamid int32) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeam, teamid)
	var i Team
	err := row.Scan(
		&i.Teamid,
		&i.Name,
		&i.Schoolid,
		&i.Tournamentid,
	)
	return i, err
}

const getTeams = `-- name: GetTeams :many
SELECT teamid, name, schoolid, tournamentid FROM Teams
`

func (q *Queries) GetTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.Teamid,
			&i.Name,
			&i.Schoolid,
			&i.Tournamentid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE Teams
SET Name = $2, SchoolID = $3, TournamentID = $4
WHERE TeamID = $1
RETURNING teamid, name, schoolid, tournamentid
`

type UpdateTeamParams struct {
	Teamid       int32  `json:"teamid"`
	Name         string `json:"name"`
	Schoolid     int32  `json:"schoolid"`
	Tournamentid int32  `json:"tournamentid"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, updateTeam,
		arg.Teamid,
		arg.Name,
		arg.Schoolid,
		arg.Tournamentid,
	)
	var i Team
	err := row.Scan(
		&i.Teamid,
		&i.Name,
		&i.Schoolid,
		&i.Tournamentid,
	)
	return i, err
}
