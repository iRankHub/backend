// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: internal/grpc/proto/debate_management/debate.proto

package debate_management

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Room messages
type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      int32          `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName    string         `protobuf:"bytes,2,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	RoundStatus []*RoundStatus `protobuf:"bytes,3,rep,name=round_status,json=roundStatus,proto3" json:"round_status,omitempty"`
}

func (x *Room) Reset() {
	*x = Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{0}
}

func (x *Room) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Room) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *Room) GetRoundStatus() []*RoundStatus {
	if x != nil {
		return x.RoundStatus
	}
	return nil
}

type RoundStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber   int32 `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsElimination bool  `protobuf:"varint,2,opt,name=is_elimination,json=isElimination,proto3" json:"is_elimination,omitempty"`
	IsOccupied    bool  `protobuf:"varint,3,opt,name=is_occupied,json=isOccupied,proto3" json:"is_occupied,omitempty"`
}

func (x *RoundStatus) Reset() {
	*x = RoundStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundStatus) ProtoMessage() {}

func (x *RoundStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundStatus.ProtoReflect.Descriptor instead.
func (*RoundStatus) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{1}
}

func (x *RoundStatus) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *RoundStatus) GetIsElimination() bool {
	if x != nil {
		return x.IsElimination
	}
	return false
}

func (x *RoundStatus) GetIsOccupied() bool {
	if x != nil {
		return x.IsOccupied
	}
	return false
}

type GetRoomsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId  int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	RoundNumber   int32  `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsElimination bool   `protobuf:"varint,3,opt,name=is_elimination,json=isElimination,proto3" json:"is_elimination,omitempty"`
	Token         string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetRoomsRequest) Reset() {
	*x = GetRoomsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomsRequest) ProtoMessage() {}

func (x *GetRoomsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomsRequest.ProtoReflect.Descriptor instead.
func (*GetRoomsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{2}
}

func (x *GetRoomsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetRoomsRequest) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *GetRoomsRequest) GetIsElimination() bool {
	if x != nil {
		return x.IsElimination
	}
	return false
}

func (x *GetRoomsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetRoomsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rooms []*Room `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *GetRoomsResponse) Reset() {
	*x = GetRoomsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomsResponse) ProtoMessage() {}

func (x *GetRoomsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomsResponse.ProtoReflect.Descriptor instead.
func (*GetRoomsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{3}
}

func (x *GetRoomsResponse) GetRooms() []*Room {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type GetRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId int32  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetRoomRequest) Reset() {
	*x = GetRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomRequest) ProtoMessage() {}

func (x *GetRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomRequest.ProtoReflect.Descriptor instead.
func (*GetRoomRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{4}
}

func (x *GetRoomRequest) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *GetRoomRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room *Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *GetRoomResponse) Reset() {
	*x = GetRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomResponse) ProtoMessage() {}

func (x *GetRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomResponse.ProtoReflect.Descriptor instead.
func (*GetRoomResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{5}
}

func (x *GetRoomResponse) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

type UpdateRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room  *Room  `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateRoomRequest) Reset() {
	*x = UpdateRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoomRequest) ProtoMessage() {}

func (x *UpdateRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoomRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoomRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRoomRequest) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *UpdateRoomRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room *Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *UpdateRoomResponse) Reset() {
	*x = UpdateRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoomResponse) ProtoMessage() {}

func (x *UpdateRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoomResponse.ProtoReflect.Descriptor instead.
func (*UpdateRoomResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRoomResponse) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

// Judge messages
type Judge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeId     int32  `protobuf:"varint,1,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	IsHeadJudge bool   `protobuf:"varint,4,opt,name=is_head_judge,json=isHeadJudge,proto3" json:"is_head_judge,omitempty"`
}

func (x *Judge) Reset() {
	*x = Judge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Judge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Judge) ProtoMessage() {}

func (x *Judge) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Judge.ProtoReflect.Descriptor instead.
func (*Judge) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{8}
}

func (x *Judge) GetJudgeId() int32 {
	if x != nil {
		return x.JudgeId
	}
	return 0
}

func (x *Judge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Judge) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Judge) GetIsHeadJudge() bool {
	if x != nil {
		return x.IsHeadJudge
	}
	return false
}

type GetJudgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId  int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	RoundNumber   int32  `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsElimination bool   `protobuf:"varint,3,opt,name=is_elimination,json=isElimination,proto3" json:"is_elimination,omitempty"`
	Token         string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetJudgesRequest) Reset() {
	*x = GetJudgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgesRequest) ProtoMessage() {}

func (x *GetJudgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgesRequest.ProtoReflect.Descriptor instead.
func (*GetJudgesRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{9}
}

func (x *GetJudgesRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetJudgesRequest) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *GetJudgesRequest) GetIsElimination() bool {
	if x != nil {
		return x.IsElimination
	}
	return false
}

func (x *GetJudgesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetJudgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Judges []*Judge `protobuf:"bytes,1,rep,name=judges,proto3" json:"judges,omitempty"`
}

func (x *GetJudgesResponse) Reset() {
	*x = GetJudgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgesResponse) ProtoMessage() {}

func (x *GetJudgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgesResponse.ProtoReflect.Descriptor instead.
func (*GetJudgesResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{10}
}

func (x *GetJudgesResponse) GetJudges() []*Judge {
	if x != nil {
		return x.Judges
	}
	return nil
}

type GetJudgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeId int32  `protobuf:"varint,1,opt,name=judge_id,json=judgeId,proto3" json:"judge_id,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetJudgeRequest) Reset() {
	*x = GetJudgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgeRequest) ProtoMessage() {}

func (x *GetJudgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgeRequest.ProtoReflect.Descriptor instead.
func (*GetJudgeRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{11}
}

func (x *GetJudgeRequest) GetJudgeId() int32 {
	if x != nil {
		return x.JudgeId
	}
	return 0
}

func (x *GetJudgeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetJudgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Judge *Judge `protobuf:"bytes,1,opt,name=judge,proto3" json:"judge,omitempty"`
}

func (x *GetJudgeResponse) Reset() {
	*x = GetJudgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJudgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJudgeResponse) ProtoMessage() {}

func (x *GetJudgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJudgeResponse.ProtoReflect.Descriptor instead.
func (*GetJudgeResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{12}
}

func (x *GetJudgeResponse) GetJudge() *Judge {
	if x != nil {
		return x.Judge
	}
	return nil
}

// Pairing messages
type Pairing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairingId          int32    `protobuf:"varint,1,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	RoundNumber        int32    `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsEliminationRound bool     `protobuf:"varint,3,opt,name=is_elimination_round,json=isEliminationRound,proto3" json:"is_elimination_round,omitempty"`
	RoomId             int32    `protobuf:"varint,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName           string   `protobuf:"bytes,5,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Team1              *Team    `protobuf:"bytes,6,opt,name=team1,proto3" json:"team1,omitempty"`
	Team2              *Team    `protobuf:"bytes,7,opt,name=team2,proto3" json:"team2,omitempty"`
	Judges             []*Judge `protobuf:"bytes,8,rep,name=judges,proto3" json:"judges,omitempty"`
}

func (x *Pairing) Reset() {
	*x = Pairing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pairing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pairing) ProtoMessage() {}

func (x *Pairing) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pairing.ProtoReflect.Descriptor instead.
func (*Pairing) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{13}
}

func (x *Pairing) GetPairingId() int32 {
	if x != nil {
		return x.PairingId
	}
	return 0
}

func (x *Pairing) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *Pairing) GetIsEliminationRound() bool {
	if x != nil {
		return x.IsEliminationRound
	}
	return false
}

func (x *Pairing) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Pairing) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *Pairing) GetTeam1() *Team {
	if x != nil {
		return x.Team1
	}
	return nil
}

func (x *Pairing) GetTeam2() *Team {
	if x != nil {
		return x.Team2
	}
	return nil
}

func (x *Pairing) GetJudges() []*Judge {
	if x != nil {
		return x.Judges
	}
	return nil
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId      int32      `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Speakers    []*Speaker `protobuf:"bytes,3,rep,name=speakers,proto3" json:"speakers,omitempty"`
	TotalPoints float64    `protobuf:"fixed64,4,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	LeagueName  string     `protobuf:"bytes,5,opt,name=league_name,json=leagueName,proto3" json:"league_name,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{14}
}

func (x *Team) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetSpeakers() []*Speaker {
	if x != nil {
		return x.Speakers
	}
	return nil
}

func (x *Team) GetTotalPoints() float64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *Team) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

type Speaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeakerId int32   `protobuf:"varint,1,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ScoreId   int32   `protobuf:"varint,3,opt,name=score_id,json=scoreId,proto3" json:"score_id,omitempty"`
	Rank      int32   `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	Points    float64 `protobuf:"fixed64,5,opt,name=points,proto3" json:"points,omitempty"`
	Feedback  string  `protobuf:"bytes,6,opt,name=feedback,proto3" json:"feedback,omitempty"`
}

func (x *Speaker) Reset() {
	*x = Speaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Speaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Speaker) ProtoMessage() {}

func (x *Speaker) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Speaker.ProtoReflect.Descriptor instead.
func (*Speaker) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{15}
}

func (x *Speaker) GetSpeakerId() int32 {
	if x != nil {
		return x.SpeakerId
	}
	return 0
}

func (x *Speaker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Speaker) GetScoreId() int32 {
	if x != nil {
		return x.ScoreId
	}
	return 0
}

func (x *Speaker) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Speaker) GetPoints() float64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Speaker) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

type GetPairingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId  int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	RoundNumber   int32  `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsElimination bool   `protobuf:"varint,3,opt,name=is_elimination,json=isElimination,proto3" json:"is_elimination,omitempty"`
	Token         string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetPairingsRequest) Reset() {
	*x = GetPairingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPairingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPairingsRequest) ProtoMessage() {}

func (x *GetPairingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPairingsRequest.ProtoReflect.Descriptor instead.
func (*GetPairingsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{16}
}

func (x *GetPairingsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetPairingsRequest) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *GetPairingsRequest) GetIsElimination() bool {
	if x != nil {
		return x.IsElimination
	}
	return false
}

func (x *GetPairingsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetPairingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairings []*Pairing `protobuf:"bytes,1,rep,name=pairings,proto3" json:"pairings,omitempty"`
}

func (x *GetPairingsResponse) Reset() {
	*x = GetPairingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPairingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPairingsResponse) ProtoMessage() {}

func (x *GetPairingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPairingsResponse.ProtoReflect.Descriptor instead.
func (*GetPairingsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{17}
}

func (x *GetPairingsResponse) GetPairings() []*Pairing {
	if x != nil {
		return x.Pairings
	}
	return nil
}

type GetPairingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairingId int32  `protobuf:"varint,1,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetPairingRequest) Reset() {
	*x = GetPairingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPairingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPairingRequest) ProtoMessage() {}

func (x *GetPairingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPairingRequest.ProtoReflect.Descriptor instead.
func (*GetPairingRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{18}
}

func (x *GetPairingRequest) GetPairingId() int32 {
	if x != nil {
		return x.PairingId
	}
	return 0
}

func (x *GetPairingRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetPairingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairing *Pairing `protobuf:"bytes,1,opt,name=pairing,proto3" json:"pairing,omitempty"`
}

func (x *GetPairingResponse) Reset() {
	*x = GetPairingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPairingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPairingResponse) ProtoMessage() {}

func (x *GetPairingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPairingResponse.ProtoReflect.Descriptor instead.
func (*GetPairingResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{19}
}

func (x *GetPairingResponse) GetPairing() *Pairing {
	if x != nil {
		return x.Pairing
	}
	return nil
}

type UpdatePairingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairing *Pairing `protobuf:"bytes,1,opt,name=pairing,proto3" json:"pairing,omitempty"`
	Token   string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdatePairingRequest) Reset() {
	*x = UpdatePairingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePairingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePairingRequest) ProtoMessage() {}

func (x *UpdatePairingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePairingRequest.ProtoReflect.Descriptor instead.
func (*UpdatePairingRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{20}
}

func (x *UpdatePairingRequest) GetPairing() *Pairing {
	if x != nil {
		return x.Pairing
	}
	return nil
}

func (x *UpdatePairingRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdatePairingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairing *Pairing `protobuf:"bytes,1,opt,name=pairing,proto3" json:"pairing,omitempty"`
}

func (x *UpdatePairingResponse) Reset() {
	*x = UpdatePairingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePairingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePairingResponse) ProtoMessage() {}

func (x *UpdatePairingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePairingResponse.ProtoReflect.Descriptor instead.
func (*UpdatePairingResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{21}
}

func (x *UpdatePairingResponse) GetPairing() *Pairing {
	if x != nil {
		return x.Pairing
	}
	return nil
}

// Ballot messages
type Ballot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BallotId        int32    `protobuf:"varint,1,opt,name=ballot_id,json=ballotId,proto3" json:"ballot_id,omitempty"`
	RoundNumber     int32    `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsElimination   bool     `protobuf:"varint,3,opt,name=is_elimination,json=isElimination,proto3" json:"is_elimination,omitempty"`
	RoomId          int32    `protobuf:"varint,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName        string   `protobuf:"bytes,5,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Judges          []*Judge `protobuf:"bytes,6,rep,name=judges,proto3" json:"judges,omitempty"`
	Team1           *Team    `protobuf:"bytes,7,opt,name=team1,proto3" json:"team1,omitempty"`
	Team2           *Team    `protobuf:"bytes,8,opt,name=team2,proto3" json:"team2,omitempty"`
	RecordingStatus string   `protobuf:"bytes,9,opt,name=recording_status,json=recordingStatus,proto3" json:"recording_status,omitempty"`
	Verdict         string   `protobuf:"bytes,10,opt,name=verdict,proto3" json:"verdict,omitempty"`
}

func (x *Ballot) Reset() {
	*x = Ballot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ballot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ballot) ProtoMessage() {}

func (x *Ballot) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ballot.ProtoReflect.Descriptor instead.
func (*Ballot) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{22}
}

func (x *Ballot) GetBallotId() int32 {
	if x != nil {
		return x.BallotId
	}
	return 0
}

func (x *Ballot) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *Ballot) GetIsElimination() bool {
	if x != nil {
		return x.IsElimination
	}
	return false
}

func (x *Ballot) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Ballot) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *Ballot) GetJudges() []*Judge {
	if x != nil {
		return x.Judges
	}
	return nil
}

func (x *Ballot) GetTeam1() *Team {
	if x != nil {
		return x.Team1
	}
	return nil
}

func (x *Ballot) GetTeam2() *Team {
	if x != nil {
		return x.Team2
	}
	return nil
}

func (x *Ballot) GetRecordingStatus() string {
	if x != nil {
		return x.RecordingStatus
	}
	return ""
}

func (x *Ballot) GetVerdict() string {
	if x != nil {
		return x.Verdict
	}
	return ""
}

type GetBallotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId  int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	RoundNumber   int32  `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsElimination bool   `protobuf:"varint,3,opt,name=is_elimination,json=isElimination,proto3" json:"is_elimination,omitempty"`
	Token         string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetBallotsRequest) Reset() {
	*x = GetBallotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBallotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBallotsRequest) ProtoMessage() {}

func (x *GetBallotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBallotsRequest.ProtoReflect.Descriptor instead.
func (*GetBallotsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{23}
}

func (x *GetBallotsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetBallotsRequest) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *GetBallotsRequest) GetIsElimination() bool {
	if x != nil {
		return x.IsElimination
	}
	return false
}

func (x *GetBallotsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetBallotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ballots []*Ballot `protobuf:"bytes,1,rep,name=ballots,proto3" json:"ballots,omitempty"`
}

func (x *GetBallotsResponse) Reset() {
	*x = GetBallotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBallotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBallotsResponse) ProtoMessage() {}

func (x *GetBallotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBallotsResponse.ProtoReflect.Descriptor instead.
func (*GetBallotsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{24}
}

func (x *GetBallotsResponse) GetBallots() []*Ballot {
	if x != nil {
		return x.Ballots
	}
	return nil
}

type GetBallotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BallotId int32  `protobuf:"varint,1,opt,name=ballot_id,json=ballotId,proto3" json:"ballot_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetBallotRequest) Reset() {
	*x = GetBallotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBallotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBallotRequest) ProtoMessage() {}

func (x *GetBallotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBallotRequest.ProtoReflect.Descriptor instead.
func (*GetBallotRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{25}
}

func (x *GetBallotRequest) GetBallotId() int32 {
	if x != nil {
		return x.BallotId
	}
	return 0
}

func (x *GetBallotRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetBallotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ballot *Ballot `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot,omitempty"`
}

func (x *GetBallotResponse) Reset() {
	*x = GetBallotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBallotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBallotResponse) ProtoMessage() {}

func (x *GetBallotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBallotResponse.ProtoReflect.Descriptor instead.
func (*GetBallotResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{26}
}

func (x *GetBallotResponse) GetBallot() *Ballot {
	if x != nil {
		return x.Ballot
	}
	return nil
}

type UpdateBallotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ballot *Ballot `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot,omitempty"`
	Token  string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateBallotRequest) Reset() {
	*x = UpdateBallotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBallotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBallotRequest) ProtoMessage() {}

func (x *UpdateBallotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBallotRequest.ProtoReflect.Descriptor instead.
func (*UpdateBallotRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateBallotRequest) GetBallot() *Ballot {
	if x != nil {
		return x.Ballot
	}
	return nil
}

func (x *UpdateBallotRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateBallotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ballot *Ballot `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot,omitempty"`
}

func (x *UpdateBallotResponse) Reset() {
	*x = UpdateBallotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBallotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBallotResponse) ProtoMessage() {}

func (x *UpdateBallotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBallotResponse.ProtoReflect.Descriptor instead.
func (*UpdateBallotResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateBallotResponse) GetBallot() *Ballot {
	if x != nil {
		return x.Ballot
	}
	return nil
}

// Algorithm integration messages
type GeneratePairingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId       int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	RoundNumber        int32  `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsEliminationRound bool   `protobuf:"varint,3,opt,name=is_elimination_round,json=isEliminationRound,proto3" json:"is_elimination_round,omitempty"`
	Token              string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GeneratePairingsRequest) Reset() {
	*x = GeneratePairingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePairingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePairingsRequest) ProtoMessage() {}

func (x *GeneratePairingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePairingsRequest.ProtoReflect.Descriptor instead.
func (*GeneratePairingsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{29}
}

func (x *GeneratePairingsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GeneratePairingsRequest) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *GeneratePairingsRequest) GetIsEliminationRound() bool {
	if x != nil {
		return x.IsEliminationRound
	}
	return false
}

func (x *GeneratePairingsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GeneratePairingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairings []*Pairing `protobuf:"bytes,1,rep,name=pairings,proto3" json:"pairings,omitempty"`
}

func (x *GeneratePairingsResponse) Reset() {
	*x = GeneratePairingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePairingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePairingsResponse) ProtoMessage() {}

func (x *GeneratePairingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePairingsResponse.ProtoReflect.Descriptor instead.
func (*GeneratePairingsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{30}
}

func (x *GeneratePairingsResponse) GetPairings() []*Pairing {
	if x != nil {
		return x.Pairings
	}
	return nil
}

type AssignJudgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId  int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	RoundNumber   int32  `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	IsElimination bool   `protobuf:"varint,3,opt,name=is_elimination,json=isElimination,proto3" json:"is_elimination,omitempty"`
	Token         string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AssignJudgesRequest) Reset() {
	*x = AssignJudgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignJudgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignJudgesRequest) ProtoMessage() {}

func (x *AssignJudgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignJudgesRequest.ProtoReflect.Descriptor instead.
func (*AssignJudgesRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{31}
}

func (x *AssignJudgesRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *AssignJudgesRequest) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *AssignJudgesRequest) GetIsElimination() bool {
	if x != nil {
		return x.IsElimination
	}
	return false
}

func (x *AssignJudgesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AssignJudgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairings []*Pairing `protobuf:"bytes,1,rep,name=pairings,proto3" json:"pairings,omitempty"`
}

func (x *AssignJudgesResponse) Reset() {
	*x = AssignJudgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignJudgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignJudgesResponse) ProtoMessage() {}

func (x *AssignJudgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignJudgesResponse.ProtoReflect.Descriptor instead.
func (*AssignJudgesResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{32}
}

func (x *AssignJudgesResponse) GetPairings() []*Pairing {
	if x != nil {
		return x.Pairings
	}
	return nil
}

type CreateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TournamentId int32      `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Speakers     []*Speaker `protobuf:"bytes,3,rep,name=speakers,proto3" json:"speakers,omitempty"`
	Token        string     `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateTeamRequest) Reset() {
	*x = CreateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamRequest) ProtoMessage() {}

func (x *CreateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamRequest.ProtoReflect.Descriptor instead.
func (*CreateTeamRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{33}
}

func (x *CreateTeamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTeamRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *CreateTeamRequest) GetSpeakers() []*Speaker {
	if x != nil {
		return x.Speakers
	}
	return nil
}

func (x *CreateTeamRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId int32  `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTeamRequest) Reset() {
	*x = GetTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamRequest) ProtoMessage() {}

func (x *GetTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamRequest.ProtoReflect.Descriptor instead.
func (*GetTeamRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{34}
}

func (x *GetTeamRequest) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *GetTeamRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team  *Team  `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateTeamRequest) Reset() {
	*x = UpdateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamRequest) ProtoMessage() {}

func (x *UpdateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamRequest.ProtoReflect.Descriptor instead.
func (*UpdateTeamRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateTeamRequest) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *UpdateTeamRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeleteTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId int32  `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeleteTeamRequest) Reset() {
	*x = DeleteTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamRequest) ProtoMessage() {}

func (x *DeleteTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamRequest.ProtoReflect.Descriptor instead.
func (*DeleteTeamRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteTeamRequest) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *DeleteTeamRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeleteTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTeamResponse) Reset() {
	*x = DeleteTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamResponse) ProtoMessage() {}

func (x *DeleteTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamResponse.ProtoReflect.Descriptor instead.
func (*DeleteTeamResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteTeamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTeamResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTeamsByTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTeamsByTournamentRequest) Reset() {
	*x = GetTeamsByTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamsByTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsByTournamentRequest) ProtoMessage() {}

func (x *GetTeamsByTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsByTournamentRequest.ProtoReflect.Descriptor instead.
func (*GetTeamsByTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{38}
}

func (x *GetTeamsByTournamentRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetTeamsByTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetTeamsByTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *GetTeamsByTournamentResponse) Reset() {
	*x = GetTeamsByTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamsByTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsByTournamentResponse) ProtoMessage() {}

func (x *GetTeamsByTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsByTournamentResponse.ProtoReflect.Descriptor instead.
func (*GetTeamsByTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{39}
}

func (x *GetTeamsByTournamentResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

// Regenerate pairings message
type RegeneratePairingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RegeneratePairingsRequest) Reset() {
	*x = RegeneratePairingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegeneratePairingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegeneratePairingsRequest) ProtoMessage() {}

func (x *RegeneratePairingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_debate_management_debate_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegeneratePairingsRequest.ProtoReflect.Descriptor instead.
func (*RegeneratePairingsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP(), []int{40}
}

func (x *RegeneratePairingsRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *RegeneratePairingsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_internal_grpc_proto_debate_management_debate_proto protoreflect.FileDescriptor

var file_internal_grpc_proto_debate_management_debate_proto_rawDesc = []byte{
	0x0a, 0x32, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x78, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x41, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x3f,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22,
	0x56, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x41, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x70, 0x0a, 0x05, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x48, 0x65, 0x61, 0x64, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x22, 0x97, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x22, 0x42, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x05,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x74,
	0x65, 0x61, 0x6d, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x12, 0x30, 0x0a, 0x06, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x52, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x04,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01,
	0x0a, 0x07, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22,
	0x99, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x48, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x61,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x62, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0xfa, 0x02, 0x0a, 0x06, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x06, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x2d, 0x0a, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x22, 0x98, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x49, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x6c, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62,
	0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x46, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x62,
	0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x22, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x49, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74,
	0x22, 0xa9, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0a, 0x18,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x9a, 0x01, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e, 0x0a,
	0x14, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3f, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x42, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x48, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x58, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x56, 0x0a, 0x19, 0x52, 0x65,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x32, 0xe3, 0x0d, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73,
	0x12, 0x22, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x21, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x24, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x24,
	0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x73, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x24, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x45, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x77, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42,
	0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x2e,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x75, 0x62, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_grpc_proto_debate_management_debate_proto_rawDescOnce sync.Once
	file_internal_grpc_proto_debate_management_debate_proto_rawDescData = file_internal_grpc_proto_debate_management_debate_proto_rawDesc
)

func file_internal_grpc_proto_debate_management_debate_proto_rawDescGZIP() []byte {
	file_internal_grpc_proto_debate_management_debate_proto_rawDescOnce.Do(func() {
		file_internal_grpc_proto_debate_management_debate_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_grpc_proto_debate_management_debate_proto_rawDescData)
	})
	return file_internal_grpc_proto_debate_management_debate_proto_rawDescData
}

var file_internal_grpc_proto_debate_management_debate_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_internal_grpc_proto_debate_management_debate_proto_goTypes = []any{
	(*Room)(nil),                         // 0: debate_management.Room
	(*RoundStatus)(nil),                  // 1: debate_management.RoundStatus
	(*GetRoomsRequest)(nil),              // 2: debate_management.GetRoomsRequest
	(*GetRoomsResponse)(nil),             // 3: debate_management.GetRoomsResponse
	(*GetRoomRequest)(nil),               // 4: debate_management.GetRoomRequest
	(*GetRoomResponse)(nil),              // 5: debate_management.GetRoomResponse
	(*UpdateRoomRequest)(nil),            // 6: debate_management.UpdateRoomRequest
	(*UpdateRoomResponse)(nil),           // 7: debate_management.UpdateRoomResponse
	(*Judge)(nil),                        // 8: debate_management.Judge
	(*GetJudgesRequest)(nil),             // 9: debate_management.GetJudgesRequest
	(*GetJudgesResponse)(nil),            // 10: debate_management.GetJudgesResponse
	(*GetJudgeRequest)(nil),              // 11: debate_management.GetJudgeRequest
	(*GetJudgeResponse)(nil),             // 12: debate_management.GetJudgeResponse
	(*Pairing)(nil),                      // 13: debate_management.Pairing
	(*Team)(nil),                         // 14: debate_management.Team
	(*Speaker)(nil),                      // 15: debate_management.Speaker
	(*GetPairingsRequest)(nil),           // 16: debate_management.GetPairingsRequest
	(*GetPairingsResponse)(nil),          // 17: debate_management.GetPairingsResponse
	(*GetPairingRequest)(nil),            // 18: debate_management.GetPairingRequest
	(*GetPairingResponse)(nil),           // 19: debate_management.GetPairingResponse
	(*UpdatePairingRequest)(nil),         // 20: debate_management.UpdatePairingRequest
	(*UpdatePairingResponse)(nil),        // 21: debate_management.UpdatePairingResponse
	(*Ballot)(nil),                       // 22: debate_management.Ballot
	(*GetBallotsRequest)(nil),            // 23: debate_management.GetBallotsRequest
	(*GetBallotsResponse)(nil),           // 24: debate_management.GetBallotsResponse
	(*GetBallotRequest)(nil),             // 25: debate_management.GetBallotRequest
	(*GetBallotResponse)(nil),            // 26: debate_management.GetBallotResponse
	(*UpdateBallotRequest)(nil),          // 27: debate_management.UpdateBallotRequest
	(*UpdateBallotResponse)(nil),         // 28: debate_management.UpdateBallotResponse
	(*GeneratePairingsRequest)(nil),      // 29: debate_management.GeneratePairingsRequest
	(*GeneratePairingsResponse)(nil),     // 30: debate_management.GeneratePairingsResponse
	(*AssignJudgesRequest)(nil),          // 31: debate_management.AssignJudgesRequest
	(*AssignJudgesResponse)(nil),         // 32: debate_management.AssignJudgesResponse
	(*CreateTeamRequest)(nil),            // 33: debate_management.CreateTeamRequest
	(*GetTeamRequest)(nil),               // 34: debate_management.GetTeamRequest
	(*UpdateTeamRequest)(nil),            // 35: debate_management.UpdateTeamRequest
	(*DeleteTeamRequest)(nil),            // 36: debate_management.DeleteTeamRequest
	(*DeleteTeamResponse)(nil),           // 37: debate_management.DeleteTeamResponse
	(*GetTeamsByTournamentRequest)(nil),  // 38: debate_management.GetTeamsByTournamentRequest
	(*GetTeamsByTournamentResponse)(nil), // 39: debate_management.GetTeamsByTournamentResponse
	(*RegeneratePairingsRequest)(nil),    // 40: debate_management.RegeneratePairingsRequest
}
var file_internal_grpc_proto_debate_management_debate_proto_depIdxs = []int32{
	1,  // 0: debate_management.Room.round_status:type_name -> debate_management.RoundStatus
	0,  // 1: debate_management.GetRoomsResponse.rooms:type_name -> debate_management.Room
	0,  // 2: debate_management.GetRoomResponse.room:type_name -> debate_management.Room
	0,  // 3: debate_management.UpdateRoomRequest.room:type_name -> debate_management.Room
	0,  // 4: debate_management.UpdateRoomResponse.room:type_name -> debate_management.Room
	8,  // 5: debate_management.GetJudgesResponse.judges:type_name -> debate_management.Judge
	8,  // 6: debate_management.GetJudgeResponse.judge:type_name -> debate_management.Judge
	14, // 7: debate_management.Pairing.team1:type_name -> debate_management.Team
	14, // 8: debate_management.Pairing.team2:type_name -> debate_management.Team
	8,  // 9: debate_management.Pairing.judges:type_name -> debate_management.Judge
	15, // 10: debate_management.Team.speakers:type_name -> debate_management.Speaker
	13, // 11: debate_management.GetPairingsResponse.pairings:type_name -> debate_management.Pairing
	13, // 12: debate_management.GetPairingResponse.pairing:type_name -> debate_management.Pairing
	13, // 13: debate_management.UpdatePairingRequest.pairing:type_name -> debate_management.Pairing
	13, // 14: debate_management.UpdatePairingResponse.pairing:type_name -> debate_management.Pairing
	8,  // 15: debate_management.Ballot.judges:type_name -> debate_management.Judge
	14, // 16: debate_management.Ballot.team1:type_name -> debate_management.Team
	14, // 17: debate_management.Ballot.team2:type_name -> debate_management.Team
	22, // 18: debate_management.GetBallotsResponse.ballots:type_name -> debate_management.Ballot
	22, // 19: debate_management.GetBallotResponse.ballot:type_name -> debate_management.Ballot
	22, // 20: debate_management.UpdateBallotRequest.ballot:type_name -> debate_management.Ballot
	22, // 21: debate_management.UpdateBallotResponse.ballot:type_name -> debate_management.Ballot
	13, // 22: debate_management.GeneratePairingsResponse.pairings:type_name -> debate_management.Pairing
	13, // 23: debate_management.AssignJudgesResponse.pairings:type_name -> debate_management.Pairing
	15, // 24: debate_management.CreateTeamRequest.speakers:type_name -> debate_management.Speaker
	14, // 25: debate_management.UpdateTeamRequest.team:type_name -> debate_management.Team
	14, // 26: debate_management.GetTeamsByTournamentResponse.teams:type_name -> debate_management.Team
	2,  // 27: debate_management.DebateService.GetRooms:input_type -> debate_management.GetRoomsRequest
	4,  // 28: debate_management.DebateService.GetRoom:input_type -> debate_management.GetRoomRequest
	6,  // 29: debate_management.DebateService.UpdateRoom:input_type -> debate_management.UpdateRoomRequest
	9,  // 30: debate_management.DebateService.GetJudges:input_type -> debate_management.GetJudgesRequest
	11, // 31: debate_management.DebateService.GetJudge:input_type -> debate_management.GetJudgeRequest
	16, // 32: debate_management.DebateService.GetPairings:input_type -> debate_management.GetPairingsRequest
	18, // 33: debate_management.DebateService.GetPairing:input_type -> debate_management.GetPairingRequest
	20, // 34: debate_management.DebateService.UpdatePairing:input_type -> debate_management.UpdatePairingRequest
	23, // 35: debate_management.DebateService.GetBallots:input_type -> debate_management.GetBallotsRequest
	25, // 36: debate_management.DebateService.GetBallot:input_type -> debate_management.GetBallotRequest
	27, // 37: debate_management.DebateService.UpdateBallot:input_type -> debate_management.UpdateBallotRequest
	29, // 38: debate_management.DebateService.GeneratePairings:input_type -> debate_management.GeneratePairingsRequest
	31, // 39: debate_management.DebateService.AssignJudges:input_type -> debate_management.AssignJudgesRequest
	33, // 40: debate_management.DebateService.CreateTeam:input_type -> debate_management.CreateTeamRequest
	34, // 41: debate_management.DebateService.GetTeam:input_type -> debate_management.GetTeamRequest
	35, // 42: debate_management.DebateService.UpdateTeam:input_type -> debate_management.UpdateTeamRequest
	38, // 43: debate_management.DebateService.GetTeamsByTournament:input_type -> debate_management.GetTeamsByTournamentRequest
	36, // 44: debate_management.DebateService.DeleteTeam:input_type -> debate_management.DeleteTeamRequest
	40, // 45: debate_management.DebateService.RegeneratePairings:input_type -> debate_management.RegeneratePairingsRequest
	3,  // 46: debate_management.DebateService.GetRooms:output_type -> debate_management.GetRoomsResponse
	5,  // 47: debate_management.DebateService.GetRoom:output_type -> debate_management.GetRoomResponse
	7,  // 48: debate_management.DebateService.UpdateRoom:output_type -> debate_management.UpdateRoomResponse
	10, // 49: debate_management.DebateService.GetJudges:output_type -> debate_management.GetJudgesResponse
	12, // 50: debate_management.DebateService.GetJudge:output_type -> debate_management.GetJudgeResponse
	17, // 51: debate_management.DebateService.GetPairings:output_type -> debate_management.GetPairingsResponse
	19, // 52: debate_management.DebateService.GetPairing:output_type -> debate_management.GetPairingResponse
	21, // 53: debate_management.DebateService.UpdatePairing:output_type -> debate_management.UpdatePairingResponse
	24, // 54: debate_management.DebateService.GetBallots:output_type -> debate_management.GetBallotsResponse
	26, // 55: debate_management.DebateService.GetBallot:output_type -> debate_management.GetBallotResponse
	28, // 56: debate_management.DebateService.UpdateBallot:output_type -> debate_management.UpdateBallotResponse
	30, // 57: debate_management.DebateService.GeneratePairings:output_type -> debate_management.GeneratePairingsResponse
	32, // 58: debate_management.DebateService.AssignJudges:output_type -> debate_management.AssignJudgesResponse
	14, // 59: debate_management.DebateService.CreateTeam:output_type -> debate_management.Team
	14, // 60: debate_management.DebateService.GetTeam:output_type -> debate_management.Team
	14, // 61: debate_management.DebateService.UpdateTeam:output_type -> debate_management.Team
	39, // 62: debate_management.DebateService.GetTeamsByTournament:output_type -> debate_management.GetTeamsByTournamentResponse
	37, // 63: debate_management.DebateService.DeleteTeam:output_type -> debate_management.DeleteTeamResponse
	30, // 64: debate_management.DebateService.RegeneratePairings:output_type -> debate_management.GeneratePairingsResponse
	46, // [46:65] is the sub-list for method output_type
	27, // [27:46] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_internal_grpc_proto_debate_management_debate_proto_init() }
func file_internal_grpc_proto_debate_management_debate_proto_init() {
	if File_internal_grpc_proto_debate_management_debate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RoundStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Judge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetJudgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Pairing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Speaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetPairingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetPairingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetPairingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetPairingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePairingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePairingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Ballot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetBallotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetBallotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetBallotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetBallotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBallotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBallotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GeneratePairingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GeneratePairingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*AssignJudgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*AssignJudgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*GetTeamsByTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GetTeamsByTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_debate_management_debate_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*RegeneratePairingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_grpc_proto_debate_management_debate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_grpc_proto_debate_management_debate_proto_goTypes,
		DependencyIndexes: file_internal_grpc_proto_debate_management_debate_proto_depIdxs,
		MessageInfos:      file_internal_grpc_proto_debate_management_debate_proto_msgTypes,
	}.Build()
	File_internal_grpc_proto_debate_management_debate_proto = out.File
	file_internal_grpc_proto_debate_management_debate_proto_rawDesc = nil
	file_internal_grpc_proto_debate_management_debate_proto_goTypes = nil
	file_internal_grpc_proto_debate_management_debate_proto_depIdxs = nil
}
