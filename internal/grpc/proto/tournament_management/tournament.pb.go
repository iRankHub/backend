// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.0
// source: internal/grpc/proto/tournament_management/tournament.proto

package tournament_management

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum definitions
type LeagueType int32

const (
	LeagueType_local         LeagueType = 0
	LeagueType_international LeagueType = 1
)

// Enum value maps for LeagueType.
var (
	LeagueType_name = map[int32]string{
		0: "local",
		1: "international",
	}
	LeagueType_value = map[string]int32{
		"local":         0,
		"international": 1,
	}
)

func (x LeagueType) Enum() *LeagueType {
	p := new(LeagueType)
	*p = x
	return p
}

func (x LeagueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeagueType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_grpc_proto_tournament_management_tournament_proto_enumTypes[0].Descriptor()
}

func (LeagueType) Type() protoreflect.EnumType {
	return &file_internal_grpc_proto_tournament_management_tournament_proto_enumTypes[0]
}

func (x LeagueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeagueType.Descriptor instead.
func (LeagueType) EnumDescriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{0}
}

// Message definitions
type LocalDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provinces []string `protobuf:"bytes,1,rep,name=provinces,proto3" json:"provinces,omitempty"`
	Districts []string `protobuf:"bytes,2,rep,name=districts,proto3" json:"districts,omitempty"`
}

func (x *LocalDetails) Reset() {
	*x = LocalDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDetails) ProtoMessage() {}

func (x *LocalDetails) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDetails.ProtoReflect.Descriptor instead.
func (*LocalDetails) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{0}
}

func (x *LocalDetails) GetProvinces() []string {
	if x != nil {
		return x.Provinces
	}
	return nil
}

func (x *LocalDetails) GetDistricts() []string {
	if x != nil {
		return x.Districts
	}
	return nil
}

type InternationalDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continents []string `protobuf:"bytes,1,rep,name=continents,proto3" json:"continents,omitempty"`
	Countries  []string `protobuf:"bytes,2,rep,name=countries,proto3" json:"countries,omitempty"`
}

func (x *InternationalDetails) Reset() {
	*x = InternationalDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternationalDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternationalDetails) ProtoMessage() {}

func (x *InternationalDetails) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternationalDetails.ProtoReflect.Descriptor instead.
func (*InternationalDetails) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{1}
}

func (x *InternationalDetails) GetContinents() []string {
	if x != nil {
		return x.Continents
	}
	return nil
}

func (x *InternationalDetails) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

type League struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId   int32      `protobuf:"varint,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LeagueType LeagueType `protobuf:"varint,3,opt,name=league_type,json=leagueType,proto3,enum=tournament_management.LeagueType" json:"league_type,omitempty"`
	Details    string     `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *League) Reset() {
	*x = League{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *League) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*League) ProtoMessage() {}

func (x *League) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use League.ProtoReflect.Descriptor instead.
func (*League) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{2}
}

func (x *League) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *League) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *League) GetLeagueType() LeagueType {
	if x != nil {
		return x.LeagueType
	}
	return LeagueType_local
}

func (x *League) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type TournamentFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatId        int32  `protobuf:"varint,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	FormatName      string `protobuf:"bytes,2,opt,name=format_name,json=formatName,proto3" json:"format_name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	SpeakersPerTeam int32  `protobuf:"varint,4,opt,name=speakers_per_team,json=speakersPerTeam,proto3" json:"speakers_per_team,omitempty"`
}

func (x *TournamentFormat) Reset() {
	*x = TournamentFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentFormat) ProtoMessage() {}

func (x *TournamentFormat) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentFormat.ProtoReflect.Descriptor instead.
func (*TournamentFormat) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{3}
}

func (x *TournamentFormat) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *TournamentFormat) GetFormatName() string {
	if x != nil {
		return x.FormatName
	}
	return ""
}

func (x *TournamentFormat) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TournamentFormat) GetSpeakersPerTeam() int32 {
	if x != nil {
		return x.SpeakersPerTeam
	}
	return 0
}

type Tournament struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId               int32   `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Name                       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartDate                  string  `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate                    string  `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Location                   string  `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	FormatId                   int32   `protobuf:"varint,6,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	LeagueId                   int32   `protobuf:"varint,7,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	CoordinatorId              int32   `protobuf:"varint,8,opt,name=coordinator_id,json=coordinatorId,proto3" json:"coordinator_id,omitempty"`
	NumberOfPreliminaryRounds  int32   `protobuf:"varint,9,opt,name=number_of_preliminary_rounds,json=numberOfPreliminaryRounds,proto3" json:"number_of_preliminary_rounds,omitempty"`
	NumberOfEliminationRounds  int32   `protobuf:"varint,10,opt,name=number_of_elimination_rounds,json=numberOfEliminationRounds,proto3" json:"number_of_elimination_rounds,omitempty"`
	JudgesPerDebatePreliminary int32   `protobuf:"varint,11,opt,name=judges_per_debate_preliminary,json=judgesPerDebatePreliminary,proto3" json:"judges_per_debate_preliminary,omitempty"`
	JudgesPerDebateElimination int32   `protobuf:"varint,12,opt,name=judges_per_debate_elimination,json=judgesPerDebateElimination,proto3" json:"judges_per_debate_elimination,omitempty"`
	TournamentFee              float64 `protobuf:"fixed64,13,opt,name=tournament_fee,json=tournamentFee,proto3" json:"tournament_fee,omitempty"`
}

func (x *Tournament) Reset() {
	*x = Tournament{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament) ProtoMessage() {}

func (x *Tournament) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament.ProtoReflect.Descriptor instead.
func (*Tournament) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{4}
}

func (x *Tournament) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *Tournament) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tournament) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Tournament) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Tournament) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Tournament) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *Tournament) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *Tournament) GetCoordinatorId() int32 {
	if x != nil {
		return x.CoordinatorId
	}
	return 0
}

func (x *Tournament) GetNumberOfPreliminaryRounds() int32 {
	if x != nil {
		return x.NumberOfPreliminaryRounds
	}
	return 0
}

func (x *Tournament) GetNumberOfEliminationRounds() int32 {
	if x != nil {
		return x.NumberOfEliminationRounds
	}
	return 0
}

func (x *Tournament) GetJudgesPerDebatePreliminary() int32 {
	if x != nil {
		return x.JudgesPerDebatePreliminary
	}
	return 0
}

func (x *Tournament) GetJudgesPerDebateElimination() int32 {
	if x != nil {
		return x.JudgesPerDebateElimination
	}
	return 0
}

func (x *Tournament) GetTournamentFee() float64 {
	if x != nil {
		return x.TournamentFee
	}
	return 0
}

// Request messages
type CreateLeagueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LeagueType LeagueType `protobuf:"varint,2,opt,name=league_type,json=leagueType,proto3,enum=tournament_management.LeagueType" json:"league_type,omitempty"`
	// Types that are assignable to LeagueDetails:
	//
	//	*CreateLeagueRequest_LocalDetails
	//	*CreateLeagueRequest_InternationalDetails
	LeagueDetails isCreateLeagueRequest_LeagueDetails `protobuf_oneof:"league_details"`
	Token         string                              `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateLeagueRequest) Reset() {
	*x = CreateLeagueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLeagueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLeagueRequest) ProtoMessage() {}

func (x *CreateLeagueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLeagueRequest.ProtoReflect.Descriptor instead.
func (*CreateLeagueRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{5}
}

func (x *CreateLeagueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLeagueRequest) GetLeagueType() LeagueType {
	if x != nil {
		return x.LeagueType
	}
	return LeagueType_local
}

func (m *CreateLeagueRequest) GetLeagueDetails() isCreateLeagueRequest_LeagueDetails {
	if m != nil {
		return m.LeagueDetails
	}
	return nil
}

func (x *CreateLeagueRequest) GetLocalDetails() *LocalDetails {
	if x, ok := x.GetLeagueDetails().(*CreateLeagueRequest_LocalDetails); ok {
		return x.LocalDetails
	}
	return nil
}

func (x *CreateLeagueRequest) GetInternationalDetails() *InternationalDetails {
	if x, ok := x.GetLeagueDetails().(*CreateLeagueRequest_InternationalDetails); ok {
		return x.InternationalDetails
	}
	return nil
}

func (x *CreateLeagueRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type isCreateLeagueRequest_LeagueDetails interface {
	isCreateLeagueRequest_LeagueDetails()
}

type CreateLeagueRequest_LocalDetails struct {
	LocalDetails *LocalDetails `protobuf:"bytes,3,opt,name=local_details,json=localDetails,proto3,oneof"`
}

type CreateLeagueRequest_InternationalDetails struct {
	InternationalDetails *InternationalDetails `protobuf:"bytes,4,opt,name=international_details,json=internationalDetails,proto3,oneof"`
}

func (*CreateLeagueRequest_LocalDetails) isCreateLeagueRequest_LeagueDetails() {}

func (*CreateLeagueRequest_InternationalDetails) isCreateLeagueRequest_LeagueDetails() {}

type GetLeagueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId int32  `protobuf:"varint,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetLeagueRequest) Reset() {
	*x = GetLeagueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeagueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeagueRequest) ProtoMessage() {}

func (x *GetLeagueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeagueRequest.ProtoReflect.Descriptor instead.
func (*GetLeagueRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{6}
}

func (x *GetLeagueRequest) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *GetLeagueRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ListLeaguesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken int32  `protobuf:"varint,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListLeaguesRequest) Reset() {
	*x = ListLeaguesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLeaguesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeaguesRequest) ProtoMessage() {}

func (x *ListLeaguesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeaguesRequest.ProtoReflect.Descriptor instead.
func (*ListLeaguesRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{7}
}

func (x *ListLeaguesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLeaguesRequest) GetPageToken() int32 {
	if x != nil {
		return x.PageToken
	}
	return 0
}

func (x *ListLeaguesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateLeagueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId   int32      `protobuf:"varint,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LeagueType LeagueType `protobuf:"varint,3,opt,name=league_type,json=leagueType,proto3,enum=tournament_management.LeagueType" json:"league_type,omitempty"`
	// Types that are assignable to LeagueDetails:
	//
	//	*UpdateLeagueRequest_LocalDetails
	//	*UpdateLeagueRequest_InternationalDetails
	LeagueDetails isUpdateLeagueRequest_LeagueDetails `protobuf_oneof:"league_details"`
	Token         string                              `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateLeagueRequest) Reset() {
	*x = UpdateLeagueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLeagueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLeagueRequest) ProtoMessage() {}

func (x *UpdateLeagueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLeagueRequest.ProtoReflect.Descriptor instead.
func (*UpdateLeagueRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateLeagueRequest) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *UpdateLeagueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLeagueRequest) GetLeagueType() LeagueType {
	if x != nil {
		return x.LeagueType
	}
	return LeagueType_local
}

func (m *UpdateLeagueRequest) GetLeagueDetails() isUpdateLeagueRequest_LeagueDetails {
	if m != nil {
		return m.LeagueDetails
	}
	return nil
}

func (x *UpdateLeagueRequest) GetLocalDetails() *LocalDetails {
	if x, ok := x.GetLeagueDetails().(*UpdateLeagueRequest_LocalDetails); ok {
		return x.LocalDetails
	}
	return nil
}

func (x *UpdateLeagueRequest) GetInternationalDetails() *InternationalDetails {
	if x, ok := x.GetLeagueDetails().(*UpdateLeagueRequest_InternationalDetails); ok {
		return x.InternationalDetails
	}
	return nil
}

func (x *UpdateLeagueRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type isUpdateLeagueRequest_LeagueDetails interface {
	isUpdateLeagueRequest_LeagueDetails()
}

type UpdateLeagueRequest_LocalDetails struct {
	LocalDetails *LocalDetails `protobuf:"bytes,4,opt,name=local_details,json=localDetails,proto3,oneof"`
}

type UpdateLeagueRequest_InternationalDetails struct {
	InternationalDetails *InternationalDetails `protobuf:"bytes,5,opt,name=international_details,json=internationalDetails,proto3,oneof"`
}

func (*UpdateLeagueRequest_LocalDetails) isUpdateLeagueRequest_LeagueDetails() {}

func (*UpdateLeagueRequest_InternationalDetails) isUpdateLeagueRequest_LeagueDetails() {}

type DeleteLeagueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId int32  `protobuf:"varint,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeleteLeagueRequest) Reset() {
	*x = DeleteLeagueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLeagueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLeagueRequest) ProtoMessage() {}

func (x *DeleteLeagueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLeagueRequest.ProtoReflect.Descriptor instead.
func (*DeleteLeagueRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteLeagueRequest) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *DeleteLeagueRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateTournamentFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatName      string `protobuf:"bytes,1,opt,name=format_name,json=formatName,proto3" json:"format_name,omitempty"`
	Description     string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SpeakersPerTeam int32  `protobuf:"varint,3,opt,name=speakers_per_team,json=speakersPerTeam,proto3" json:"speakers_per_team,omitempty"`
	Token           string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateTournamentFormatRequest) Reset() {
	*x = CreateTournamentFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentFormatRequest) ProtoMessage() {}

func (x *CreateTournamentFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentFormatRequest.ProtoReflect.Descriptor instead.
func (*CreateTournamentFormatRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{10}
}

func (x *CreateTournamentFormatRequest) GetFormatName() string {
	if x != nil {
		return x.FormatName
	}
	return ""
}

func (x *CreateTournamentFormatRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTournamentFormatRequest) GetSpeakersPerTeam() int32 {
	if x != nil {
		return x.SpeakersPerTeam
	}
	return 0
}

func (x *CreateTournamentFormatRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetTournamentFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatId int32  `protobuf:"varint,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTournamentFormatRequest) Reset() {
	*x = GetTournamentFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentFormatRequest) ProtoMessage() {}

func (x *GetTournamentFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentFormatRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentFormatRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{11}
}

func (x *GetTournamentFormatRequest) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *GetTournamentFormatRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ListTournamentFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken int32  `protobuf:"varint,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListTournamentFormatsRequest) Reset() {
	*x = ListTournamentFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTournamentFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTournamentFormatsRequest) ProtoMessage() {}

func (x *ListTournamentFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTournamentFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListTournamentFormatsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{12}
}

func (x *ListTournamentFormatsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTournamentFormatsRequest) GetPageToken() int32 {
	if x != nil {
		return x.PageToken
	}
	return 0
}

func (x *ListTournamentFormatsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateTournamentFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatId        int32  `protobuf:"varint,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	FormatName      string `protobuf:"bytes,2,opt,name=format_name,json=formatName,proto3" json:"format_name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	SpeakersPerTeam int32  `protobuf:"varint,4,opt,name=speakers_per_team,json=speakersPerTeam,proto3" json:"speakers_per_team,omitempty"`
	Token           string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateTournamentFormatRequest) Reset() {
	*x = UpdateTournamentFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentFormatRequest) ProtoMessage() {}

func (x *UpdateTournamentFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentFormatRequest.ProtoReflect.Descriptor instead.
func (*UpdateTournamentFormatRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateTournamentFormatRequest) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *UpdateTournamentFormatRequest) GetFormatName() string {
	if x != nil {
		return x.FormatName
	}
	return ""
}

func (x *UpdateTournamentFormatRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTournamentFormatRequest) GetSpeakersPerTeam() int32 {
	if x != nil {
		return x.SpeakersPerTeam
	}
	return 0
}

func (x *UpdateTournamentFormatRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeleteTournamentFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatId int32  `protobuf:"varint,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeleteTournamentFormatRequest) Reset() {
	*x = DeleteTournamentFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTournamentFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTournamentFormatRequest) ProtoMessage() {}

func (x *DeleteTournamentFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTournamentFormatRequest.ProtoReflect.Descriptor instead.
func (*DeleteTournamentFormatRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteTournamentFormatRequest) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *DeleteTournamentFormatRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartDate                  string  `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate                    string  `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Location                   string  `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	FormatId                   int32   `protobuf:"varint,5,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	LeagueId                   int32   `protobuf:"varint,6,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	CoordinatorId              int32   `protobuf:"varint,7,opt,name=coordinator_id,json=coordinatorId,proto3" json:"coordinator_id,omitempty"`
	NumberOfPreliminaryRounds  int32   `protobuf:"varint,8,opt,name=number_of_preliminary_rounds,json=numberOfPreliminaryRounds,proto3" json:"number_of_preliminary_rounds,omitempty"`
	NumberOfEliminationRounds  int32   `protobuf:"varint,9,opt,name=number_of_elimination_rounds,json=numberOfEliminationRounds,proto3" json:"number_of_elimination_rounds,omitempty"`
	JudgesPerDebatePreliminary int32   `protobuf:"varint,10,opt,name=judges_per_debate_preliminary,json=judgesPerDebatePreliminary,proto3" json:"judges_per_debate_preliminary,omitempty"`
	JudgesPerDebateElimination int32   `protobuf:"varint,11,opt,name=judges_per_debate_elimination,json=judgesPerDebateElimination,proto3" json:"judges_per_debate_elimination,omitempty"`
	TournamentFee              float64 `protobuf:"fixed64,12,opt,name=tournament_fee,json=tournamentFee,proto3" json:"tournament_fee,omitempty"`
	Token                      string  `protobuf:"bytes,13,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateTournamentRequest) Reset() {
	*x = CreateTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentRequest) ProtoMessage() {}

func (x *CreateTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentRequest.ProtoReflect.Descriptor instead.
func (*CreateTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{15}
}

func (x *CreateTournamentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTournamentRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CreateTournamentRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CreateTournamentRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateTournamentRequest) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *CreateTournamentRequest) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *CreateTournamentRequest) GetCoordinatorId() int32 {
	if x != nil {
		return x.CoordinatorId
	}
	return 0
}

func (x *CreateTournamentRequest) GetNumberOfPreliminaryRounds() int32 {
	if x != nil {
		return x.NumberOfPreliminaryRounds
	}
	return 0
}

func (x *CreateTournamentRequest) GetNumberOfEliminationRounds() int32 {
	if x != nil {
		return x.NumberOfEliminationRounds
	}
	return 0
}

func (x *CreateTournamentRequest) GetJudgesPerDebatePreliminary() int32 {
	if x != nil {
		return x.JudgesPerDebatePreliminary
	}
	return 0
}

func (x *CreateTournamentRequest) GetJudgesPerDebateElimination() int32 {
	if x != nil {
		return x.JudgesPerDebateElimination
	}
	return 0
}

func (x *CreateTournamentRequest) GetTournamentFee() float64 {
	if x != nil {
		return x.TournamentFee
	}
	return 0
}

func (x *CreateTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTournamentRequest) Reset() {
	*x = GetTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentRequest) ProtoMessage() {}

func (x *GetTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{16}
}

func (x *GetTournamentRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *GetTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ListTournamentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken int32  `protobuf:"varint,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListTournamentsRequest) Reset() {
	*x = ListTournamentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTournamentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTournamentsRequest) ProtoMessage() {}

func (x *ListTournamentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTournamentsRequest.ProtoReflect.Descriptor instead.
func (*ListTournamentsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{17}
}

func (x *ListTournamentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTournamentsRequest) GetPageToken() int32 {
	if x != nil {
		return x.PageToken
	}
	return 0
}

func (x *ListTournamentsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId               int32   `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Name                       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartDate                  string  `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate                    string  `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Location                   string  `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	FormatId                   int32   `protobuf:"varint,6,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	LeagueId                   int32   `protobuf:"varint,7,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	CoordinatorId              int32   `protobuf:"varint,8,opt,name=coordinator_id,json=coordinatorId,proto3" json:"coordinator_id,omitempty"`
	NumberOfPreliminaryRounds  int32   `protobuf:"varint,9,opt,name=number_of_preliminary_rounds,json=numberOfPreliminaryRounds,proto3" json:"number_of_preliminary_rounds,omitempty"`
	NumberOfEliminationRounds  int32   `protobuf:"varint,10,opt,name=number_of_elimination_rounds,json=numberOfEliminationRounds,proto3" json:"number_of_elimination_rounds,omitempty"`
	JudgesPerDebatePreliminary int32   `protobuf:"varint,11,opt,name=judges_per_debate_preliminary,json=judgesPerDebatePreliminary,proto3" json:"judges_per_debate_preliminary,omitempty"`
	JudgesPerDebateElimination int32   `protobuf:"varint,12,opt,name=judges_per_debate_elimination,json=judgesPerDebateElimination,proto3" json:"judges_per_debate_elimination,omitempty"`
	TournamentFee              float64 `protobuf:"fixed64,13,opt,name=tournament_fee,json=tournamentFee,proto3" json:"tournament_fee,omitempty"`
	Token                      string  `protobuf:"bytes,14,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateTournamentRequest) Reset() {
	*x = UpdateTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentRequest) ProtoMessage() {}

func (x *UpdateTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentRequest.ProtoReflect.Descriptor instead.
func (*UpdateTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateTournamentRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *UpdateTournamentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTournamentRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *UpdateTournamentRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *UpdateTournamentRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UpdateTournamentRequest) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *UpdateTournamentRequest) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *UpdateTournamentRequest) GetCoordinatorId() int32 {
	if x != nil {
		return x.CoordinatorId
	}
	return 0
}

func (x *UpdateTournamentRequest) GetNumberOfPreliminaryRounds() int32 {
	if x != nil {
		return x.NumberOfPreliminaryRounds
	}
	return 0
}

func (x *UpdateTournamentRequest) GetNumberOfEliminationRounds() int32 {
	if x != nil {
		return x.NumberOfEliminationRounds
	}
	return 0
}

func (x *UpdateTournamentRequest) GetJudgesPerDebatePreliminary() int32 {
	if x != nil {
		return x.JudgesPerDebatePreliminary
	}
	return 0
}

func (x *UpdateTournamentRequest) GetJudgesPerDebateElimination() int32 {
	if x != nil {
		return x.JudgesPerDebateElimination
	}
	return 0
}

func (x *UpdateTournamentRequest) GetTournamentFee() float64 {
	if x != nil {
		return x.TournamentFee
	}
	return 0
}

func (x *UpdateTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeleteTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId int32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeleteTournamentRequest) Reset() {
	*x = DeleteTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTournamentRequest) ProtoMessage() {}

func (x *DeleteTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTournamentRequest.ProtoReflect.Descriptor instead.
func (*DeleteTournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteTournamentRequest) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *DeleteTournamentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Response messages
type CreateLeagueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	League *League `protobuf:"bytes,1,opt,name=league,proto3" json:"league,omitempty"`
}

func (x *CreateLeagueResponse) Reset() {
	*x = CreateLeagueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLeagueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLeagueResponse) ProtoMessage() {}

func (x *CreateLeagueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLeagueResponse.ProtoReflect.Descriptor instead.
func (*CreateLeagueResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{20}
}

func (x *CreateLeagueResponse) GetLeague() *League {
	if x != nil {
		return x.League
	}
	return nil
}

type GetLeagueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	League *League `protobuf:"bytes,1,opt,name=league,proto3" json:"league,omitempty"`
}

func (x *GetLeagueResponse) Reset() {
	*x = GetLeagueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeagueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeagueResponse) ProtoMessage() {}

func (x *GetLeagueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeagueResponse.ProtoReflect.Descriptor instead.
func (*GetLeagueResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{21}
}

func (x *GetLeagueResponse) GetLeague() *League {
	if x != nil {
		return x.League
	}
	return nil
}

type ListLeaguesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leagues       []*League `protobuf:"bytes,1,rep,name=leagues,proto3" json:"leagues,omitempty"`
	NextPageToken int32     `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListLeaguesResponse) Reset() {
	*x = ListLeaguesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLeaguesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeaguesResponse) ProtoMessage() {}

func (x *ListLeaguesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeaguesResponse.ProtoReflect.Descriptor instead.
func (*ListLeaguesResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{22}
}

func (x *ListLeaguesResponse) GetLeagues() []*League {
	if x != nil {
		return x.Leagues
	}
	return nil
}

func (x *ListLeaguesResponse) GetNextPageToken() int32 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

type UpdateLeagueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	League *League `protobuf:"bytes,1,opt,name=league,proto3" json:"league,omitempty"`
}

func (x *UpdateLeagueResponse) Reset() {
	*x = UpdateLeagueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLeagueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLeagueResponse) ProtoMessage() {}

func (x *UpdateLeagueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLeagueResponse.ProtoReflect.Descriptor instead.
func (*UpdateLeagueResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateLeagueResponse) GetLeague() *League {
	if x != nil {
		return x.League
	}
	return nil
}

type DeleteLeagueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteLeagueResponse) Reset() {
	*x = DeleteLeagueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLeagueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLeagueResponse) ProtoMessage() {}

func (x *DeleteLeagueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLeagueResponse.ProtoReflect.Descriptor instead.
func (*DeleteLeagueResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteLeagueResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteLeagueResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateTournamentFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *TournamentFormat `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *CreateTournamentFormatResponse) Reset() {
	*x = CreateTournamentFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentFormatResponse) ProtoMessage() {}

func (x *CreateTournamentFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentFormatResponse.ProtoReflect.Descriptor instead.
func (*CreateTournamentFormatResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{25}
}

func (x *CreateTournamentFormatResponse) GetFormat() *TournamentFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type GetTournamentFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *TournamentFormat `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *GetTournamentFormatResponse) Reset() {
	*x = GetTournamentFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentFormatResponse) ProtoMessage() {}

func (x *GetTournamentFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentFormatResponse.ProtoReflect.Descriptor instead.
func (*GetTournamentFormatResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{26}
}

func (x *GetTournamentFormatResponse) GetFormat() *TournamentFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type ListTournamentFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formats       []*TournamentFormat `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty"`
	NextPageToken int32               `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTournamentFormatsResponse) Reset() {
	*x = ListTournamentFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTournamentFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTournamentFormatsResponse) ProtoMessage() {}

func (x *ListTournamentFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTournamentFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListTournamentFormatsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{27}
}

func (x *ListTournamentFormatsResponse) GetFormats() []*TournamentFormat {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *ListTournamentFormatsResponse) GetNextPageToken() int32 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

type UpdateTournamentFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *TournamentFormat `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *UpdateTournamentFormatResponse) Reset() {
	*x = UpdateTournamentFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentFormatResponse) ProtoMessage() {}

func (x *UpdateTournamentFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentFormatResponse.ProtoReflect.Descriptor instead.
func (*UpdateTournamentFormatResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateTournamentFormatResponse) GetFormat() *TournamentFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type DeleteTournamentFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTournamentFormatResponse) Reset() {
	*x = DeleteTournamentFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTournamentFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTournamentFormatResponse) ProtoMessage() {}

func (x *DeleteTournamentFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTournamentFormatResponse.ProtoReflect.Descriptor instead.
func (*DeleteTournamentFormatResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteTournamentFormatResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTournamentFormatResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament    *Tournament `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
	InvitationIds []int32     `protobuf:"varint,2,rep,packed,name=invitation_ids,json=invitationIds,proto3" json:"invitation_ids,omitempty"`
}

func (x *CreateTournamentResponse) Reset() {
	*x = CreateTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTournamentResponse) ProtoMessage() {}

func (x *CreateTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTournamentResponse.ProtoReflect.Descriptor instead.
func (*CreateTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{30}
}

func (x *CreateTournamentResponse) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

func (x *CreateTournamentResponse) GetInvitationIds() []int32 {
	if x != nil {
		return x.InvitationIds
	}
	return nil
}

type GetTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament *Tournament `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
}

func (x *GetTournamentResponse) Reset() {
	*x = GetTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentResponse) ProtoMessage() {}

func (x *GetTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentResponse.ProtoReflect.Descriptor instead.
func (*GetTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{31}
}

func (x *GetTournamentResponse) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

type ListTournamentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournaments   []*Tournament `protobuf:"bytes,1,rep,name=tournaments,proto3" json:"tournaments,omitempty"`
	NextPageToken int32         `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTournamentsResponse) Reset() {
	*x = ListTournamentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTournamentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTournamentsResponse) ProtoMessage() {}

func (x *ListTournamentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTournamentsResponse.ProtoReflect.Descriptor instead.
func (*ListTournamentsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{32}
}

func (x *ListTournamentsResponse) GetTournaments() []*Tournament {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

func (x *ListTournamentsResponse) GetNextPageToken() int32 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

type UpdateTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournament *Tournament `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"`
}

func (x *UpdateTournamentResponse) Reset() {
	*x = UpdateTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTournamentResponse) ProtoMessage() {}

func (x *UpdateTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTournamentResponse.ProtoReflect.Descriptor instead.
func (*UpdateTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateTournamentResponse) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

type DeleteTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTournamentResponse) Reset() {
	*x = DeleteTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTournamentResponse) ProtoMessage() {}

func (x *DeleteTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTournamentResponse.ProtoReflect.Descriptor instead.
func (*DeleteTournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteTournamentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTournamentResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AcceptInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationId int32  `protobuf:"varint,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AcceptInvitationRequest) Reset() {
	*x = AcceptInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInvitationRequest) ProtoMessage() {}

func (x *AcceptInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInvitationRequest.ProtoReflect.Descriptor instead.
func (*AcceptInvitationRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{35}
}

func (x *AcceptInvitationRequest) GetInvitationId() int32 {
	if x != nil {
		return x.InvitationId
	}
	return 0
}

func (x *AcceptInvitationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AcceptInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AcceptInvitationResponse) Reset() {
	*x = AcceptInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInvitationResponse) ProtoMessage() {}

func (x *AcceptInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInvitationResponse.ProtoReflect.Descriptor instead.
func (*AcceptInvitationResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{36}
}

func (x *AcceptInvitationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AcceptInvitationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeclineInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationId int32  `protobuf:"varint,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeclineInvitationRequest) Reset() {
	*x = DeclineInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclineInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclineInvitationRequest) ProtoMessage() {}

func (x *DeclineInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclineInvitationRequest.ProtoReflect.Descriptor instead.
func (*DeclineInvitationRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{37}
}

func (x *DeclineInvitationRequest) GetInvitationId() int32 {
	if x != nil {
		return x.InvitationId
	}
	return 0
}

func (x *DeclineInvitationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeclineInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeclineInvitationResponse) Reset() {
	*x = DeclineInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclineInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclineInvitationResponse) ProtoMessage() {}

func (x *DeclineInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclineInvitationResponse.ProtoReflect.Descriptor instead.
func (*DeclineInvitationResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{38}
}

func (x *DeclineInvitationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeclineInvitationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetInvitationStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationId int32  `protobuf:"varint,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetInvitationStatusRequest) Reset() {
	*x = GetInvitationStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitationStatusRequest) ProtoMessage() {}

func (x *GetInvitationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitationStatusRequest.ProtoReflect.Descriptor instead.
func (*GetInvitationStatusRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{39}
}

func (x *GetInvitationStatusRequest) GetInvitationId() int32 {
	if x != nil {
		return x.InvitationId
	}
	return 0
}

func (x *GetInvitationStatusRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetInvitationStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetInvitationStatusResponse) Reset() {
	*x = GetInvitationStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitationStatusResponse) ProtoMessage() {}

func (x *GetInvitationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitationStatusResponse.ProtoReflect.Descriptor instead.
func (*GetInvitationStatusResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{40}
}

func (x *GetInvitationStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ResendInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationId int32  `protobuf:"varint,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ResendInvitationRequest) Reset() {
	*x = ResendInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendInvitationRequest) ProtoMessage() {}

func (x *ResendInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendInvitationRequest.ProtoReflect.Descriptor instead.
func (*ResendInvitationRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{41}
}

func (x *ResendInvitationRequest) GetInvitationId() int32 {
	if x != nil {
		return x.InvitationId
	}
	return 0
}

func (x *ResendInvitationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ResendInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResendInvitationResponse) Reset() {
	*x = ResendInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendInvitationResponse) ProtoMessage() {}

func (x *ResendInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendInvitationResponse.ProtoReflect.Descriptor instead.
func (*ResendInvitationResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{42}
}

func (x *ResendInvitationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResendInvitationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BulkResendInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationIds []int32 `protobuf:"varint,1,rep,packed,name=invitation_ids,json=invitationIds,proto3" json:"invitation_ids,omitempty"`
	Token         string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *BulkResendInvitationsRequest) Reset() {
	*x = BulkResendInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkResendInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkResendInvitationsRequest) ProtoMessage() {}

func (x *BulkResendInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkResendInvitationsRequest.ProtoReflect.Descriptor instead.
func (*BulkResendInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{43}
}

func (x *BulkResendInvitationsRequest) GetInvitationIds() []int32 {
	if x != nil {
		return x.InvitationIds
	}
	return nil
}

func (x *BulkResendInvitationsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BulkResendInvitationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BulkResendInvitationsResponse) Reset() {
	*x = BulkResendInvitationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkResendInvitationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkResendInvitationsResponse) ProtoMessage() {}

func (x *BulkResendInvitationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkResendInvitationsResponse.ProtoReflect.Descriptor instead.
func (*BulkResendInvitationsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{44}
}

func (x *BulkResendInvitationsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BulkResendInvitationsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetInvitationsByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetInvitationsByUserRequest) Reset() {
	*x = GetInvitationsByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitationsByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitationsByUserRequest) ProtoMessage() {}

func (x *GetInvitationsByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitationsByUserRequest.ProtoReflect.Descriptor instead.
func (*GetInvitationsByUserRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{45}
}

func (x *GetInvitationsByUserRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Invitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationId int32  `protobuf:"varint,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	TournamentId int32  `protobuf:"varint,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Status       string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Invitation) Reset() {
	*x = Invitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invitation) ProtoMessage() {}

func (x *Invitation) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invitation.ProtoReflect.Descriptor instead.
func (*Invitation) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{46}
}

func (x *Invitation) GetInvitationId() int32 {
	if x != nil {
		return x.InvitationId
	}
	return 0
}

func (x *Invitation) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *Invitation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetInvitationsByUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitations []*Invitation `protobuf:"bytes,1,rep,name=invitations,proto3" json:"invitations,omitempty"`
}

func (x *GetInvitationsByUserResponse) Reset() {
	*x = GetInvitationsByUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitationsByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitationsByUserResponse) ProtoMessage() {}

func (x *GetInvitationsByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitationsByUserResponse.ProtoReflect.Descriptor instead.
func (*GetInvitationsByUserResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{47}
}

func (x *GetInvitationsByUserResponse) GetInvitations() []*Invitation {
	if x != nil {
		return x.Invitations
	}
	return nil
}

type BulkAcceptInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationIds []int32 `protobuf:"varint,1,rep,packed,name=invitation_ids,json=invitationIds,proto3" json:"invitation_ids,omitempty"`
	Token         string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *BulkAcceptInvitationsRequest) Reset() {
	*x = BulkAcceptInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAcceptInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAcceptInvitationsRequest) ProtoMessage() {}

func (x *BulkAcceptInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAcceptInvitationsRequest.ProtoReflect.Descriptor instead.
func (*BulkAcceptInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{48}
}

func (x *BulkAcceptInvitationsRequest) GetInvitationIds() []int32 {
	if x != nil {
		return x.InvitationIds
	}
	return nil
}

func (x *BulkAcceptInvitationsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BulkAcceptInvitationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BulkAcceptInvitationsResponse) Reset() {
	*x = BulkAcceptInvitationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAcceptInvitationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAcceptInvitationsResponse) ProtoMessage() {}

func (x *BulkAcceptInvitationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAcceptInvitationsResponse.ProtoReflect.Descriptor instead.
func (*BulkAcceptInvitationsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{49}
}

func (x *BulkAcceptInvitationsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BulkAcceptInvitationsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BulkDeclineInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationIds []int32 `protobuf:"varint,1,rep,packed,name=invitation_ids,json=invitationIds,proto3" json:"invitation_ids,omitempty"`
	Token         string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *BulkDeclineInvitationsRequest) Reset() {
	*x = BulkDeclineInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeclineInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeclineInvitationsRequest) ProtoMessage() {}

func (x *BulkDeclineInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeclineInvitationsRequest.ProtoReflect.Descriptor instead.
func (*BulkDeclineInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{50}
}

func (x *BulkDeclineInvitationsRequest) GetInvitationIds() []int32 {
	if x != nil {
		return x.InvitationIds
	}
	return nil
}

func (x *BulkDeclineInvitationsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BulkDeclineInvitationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BulkDeclineInvitationsResponse) Reset() {
	*x = BulkDeclineInvitationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeclineInvitationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeclineInvitationsResponse) ProtoMessage() {}

func (x *BulkDeclineInvitationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeclineInvitationsResponse.ProtoReflect.Descriptor instead.
func (*BulkDeclineInvitationsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{51}
}

func (x *BulkDeclineInvitationsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BulkDeclineInvitationsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAllInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetAllInvitationsRequest) Reset() {
	*x = GetAllInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllInvitationsRequest) ProtoMessage() {}

func (x *GetAllInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllInvitationsRequest.ProtoReflect.Descriptor instead.
func (*GetAllInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{52}
}

func (x *GetAllInvitationsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetAllInvitationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitations []*Invitation `protobuf:"bytes,1,rep,name=invitations,proto3" json:"invitations,omitempty"`
}

func (x *GetAllInvitationsResponse) Reset() {
	*x = GetAllInvitationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllInvitationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllInvitationsResponse) ProtoMessage() {}

func (x *GetAllInvitationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllInvitationsResponse.ProtoReflect.Descriptor instead.
func (*GetAllInvitationsResponse) Descriptor() ([]byte, []int) {
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP(), []int{53}
}

func (x *GetAllInvitationsResponse) GetInvitations() []*Invitation {
	if x != nil {
		return x.Invitations
	}
	return nil
}

var File_internal_grpc_proto_tournament_management_tournament_proto protoreflect.FileDescriptor

var file_internal_grpc_proto_tournament_management_tournament_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x22,
	0x54, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x9e, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x22, 0xab, 0x04, 0x0a, 0x0a, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50,
	0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x41, 0x0a, 0x1d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x22, 0xc5,
	0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a,
	0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x45, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x66, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe2, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x62,
	0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x48, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65,
	0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x70, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc1,
	0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x52, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa9, 0x04, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x72, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3f,
	0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x41, 0x0a, 0x1d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x51, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xce, 0x04, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x72, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3f,
	0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x41, 0x0a, 0x1d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x62, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x54, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52,
	0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x22, 0x76, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x5e, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x61, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x54, 0x0a, 0x1e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5d, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x54, 0x0a, 0x17, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x4e, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x55, 0x0a, 0x18, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x19, 0x44, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x35, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e,
	0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5b,
	0x0a, 0x1c, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x53, 0x0a, 0x1d, 0x42,
	0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x33, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x63, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x1c, 0x42, 0x75,
	0x6c, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x53, 0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x1d,
	0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x1e, 0x42, 0x75,
	0x6c, 0x6b, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x30, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x60, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x2a, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01,
	0x32, 0xd7, 0x16, 0x0a, 0x11, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x2a, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x27, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x2a, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x2a,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x34, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x31, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x34, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x34, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x73, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x34, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x33, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x75,
	0x62, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_grpc_proto_tournament_management_tournament_proto_rawDescOnce sync.Once
	file_internal_grpc_proto_tournament_management_tournament_proto_rawDescData = file_internal_grpc_proto_tournament_management_tournament_proto_rawDesc
)

func file_internal_grpc_proto_tournament_management_tournament_proto_rawDescGZIP() []byte {
	file_internal_grpc_proto_tournament_management_tournament_proto_rawDescOnce.Do(func() {
		file_internal_grpc_proto_tournament_management_tournament_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_grpc_proto_tournament_management_tournament_proto_rawDescData)
	})
	return file_internal_grpc_proto_tournament_management_tournament_proto_rawDescData
}

var file_internal_grpc_proto_tournament_management_tournament_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_internal_grpc_proto_tournament_management_tournament_proto_goTypes = []interface{}{
	(LeagueType)(0),                        // 0: tournament_management.LeagueType
	(*LocalDetails)(nil),                   // 1: tournament_management.LocalDetails
	(*InternationalDetails)(nil),           // 2: tournament_management.InternationalDetails
	(*League)(nil),                         // 3: tournament_management.League
	(*TournamentFormat)(nil),               // 4: tournament_management.TournamentFormat
	(*Tournament)(nil),                     // 5: tournament_management.Tournament
	(*CreateLeagueRequest)(nil),            // 6: tournament_management.CreateLeagueRequest
	(*GetLeagueRequest)(nil),               // 7: tournament_management.GetLeagueRequest
	(*ListLeaguesRequest)(nil),             // 8: tournament_management.ListLeaguesRequest
	(*UpdateLeagueRequest)(nil),            // 9: tournament_management.UpdateLeagueRequest
	(*DeleteLeagueRequest)(nil),            // 10: tournament_management.DeleteLeagueRequest
	(*CreateTournamentFormatRequest)(nil),  // 11: tournament_management.CreateTournamentFormatRequest
	(*GetTournamentFormatRequest)(nil),     // 12: tournament_management.GetTournamentFormatRequest
	(*ListTournamentFormatsRequest)(nil),   // 13: tournament_management.ListTournamentFormatsRequest
	(*UpdateTournamentFormatRequest)(nil),  // 14: tournament_management.UpdateTournamentFormatRequest
	(*DeleteTournamentFormatRequest)(nil),  // 15: tournament_management.DeleteTournamentFormatRequest
	(*CreateTournamentRequest)(nil),        // 16: tournament_management.CreateTournamentRequest
	(*GetTournamentRequest)(nil),           // 17: tournament_management.GetTournamentRequest
	(*ListTournamentsRequest)(nil),         // 18: tournament_management.ListTournamentsRequest
	(*UpdateTournamentRequest)(nil),        // 19: tournament_management.UpdateTournamentRequest
	(*DeleteTournamentRequest)(nil),        // 20: tournament_management.DeleteTournamentRequest
	(*CreateLeagueResponse)(nil),           // 21: tournament_management.CreateLeagueResponse
	(*GetLeagueResponse)(nil),              // 22: tournament_management.GetLeagueResponse
	(*ListLeaguesResponse)(nil),            // 23: tournament_management.ListLeaguesResponse
	(*UpdateLeagueResponse)(nil),           // 24: tournament_management.UpdateLeagueResponse
	(*DeleteLeagueResponse)(nil),           // 25: tournament_management.DeleteLeagueResponse
	(*CreateTournamentFormatResponse)(nil), // 26: tournament_management.CreateTournamentFormatResponse
	(*GetTournamentFormatResponse)(nil),    // 27: tournament_management.GetTournamentFormatResponse
	(*ListTournamentFormatsResponse)(nil),  // 28: tournament_management.ListTournamentFormatsResponse
	(*UpdateTournamentFormatResponse)(nil), // 29: tournament_management.UpdateTournamentFormatResponse
	(*DeleteTournamentFormatResponse)(nil), // 30: tournament_management.DeleteTournamentFormatResponse
	(*CreateTournamentResponse)(nil),       // 31: tournament_management.CreateTournamentResponse
	(*GetTournamentResponse)(nil),          // 32: tournament_management.GetTournamentResponse
	(*ListTournamentsResponse)(nil),        // 33: tournament_management.ListTournamentsResponse
	(*UpdateTournamentResponse)(nil),       // 34: tournament_management.UpdateTournamentResponse
	(*DeleteTournamentResponse)(nil),       // 35: tournament_management.DeleteTournamentResponse
	(*AcceptInvitationRequest)(nil),        // 36: tournament_management.AcceptInvitationRequest
	(*AcceptInvitationResponse)(nil),       // 37: tournament_management.AcceptInvitationResponse
	(*DeclineInvitationRequest)(nil),       // 38: tournament_management.DeclineInvitationRequest
	(*DeclineInvitationResponse)(nil),      // 39: tournament_management.DeclineInvitationResponse
	(*GetInvitationStatusRequest)(nil),     // 40: tournament_management.GetInvitationStatusRequest
	(*GetInvitationStatusResponse)(nil),    // 41: tournament_management.GetInvitationStatusResponse
	(*ResendInvitationRequest)(nil),        // 42: tournament_management.ResendInvitationRequest
	(*ResendInvitationResponse)(nil),       // 43: tournament_management.ResendInvitationResponse
	(*BulkResendInvitationsRequest)(nil),   // 44: tournament_management.BulkResendInvitationsRequest
	(*BulkResendInvitationsResponse)(nil),  // 45: tournament_management.BulkResendInvitationsResponse
	(*GetInvitationsByUserRequest)(nil),    // 46: tournament_management.GetInvitationsByUserRequest
	(*Invitation)(nil),                     // 47: tournament_management.Invitation
	(*GetInvitationsByUserResponse)(nil),   // 48: tournament_management.GetInvitationsByUserResponse
	(*BulkAcceptInvitationsRequest)(nil),   // 49: tournament_management.BulkAcceptInvitationsRequest
	(*BulkAcceptInvitationsResponse)(nil),  // 50: tournament_management.BulkAcceptInvitationsResponse
	(*BulkDeclineInvitationsRequest)(nil),  // 51: tournament_management.BulkDeclineInvitationsRequest
	(*BulkDeclineInvitationsResponse)(nil), // 52: tournament_management.BulkDeclineInvitationsResponse
	(*GetAllInvitationsRequest)(nil),       // 53: tournament_management.GetAllInvitationsRequest
	(*GetAllInvitationsResponse)(nil),      // 54: tournament_management.GetAllInvitationsResponse
}
var file_internal_grpc_proto_tournament_management_tournament_proto_depIdxs = []int32{
	0,  // 0: tournament_management.League.league_type:type_name -> tournament_management.LeagueType
	0,  // 1: tournament_management.CreateLeagueRequest.league_type:type_name -> tournament_management.LeagueType
	1,  // 2: tournament_management.CreateLeagueRequest.local_details:type_name -> tournament_management.LocalDetails
	2,  // 3: tournament_management.CreateLeagueRequest.international_details:type_name -> tournament_management.InternationalDetails
	0,  // 4: tournament_management.UpdateLeagueRequest.league_type:type_name -> tournament_management.LeagueType
	1,  // 5: tournament_management.UpdateLeagueRequest.local_details:type_name -> tournament_management.LocalDetails
	2,  // 6: tournament_management.UpdateLeagueRequest.international_details:type_name -> tournament_management.InternationalDetails
	3,  // 7: tournament_management.CreateLeagueResponse.league:type_name -> tournament_management.League
	3,  // 8: tournament_management.GetLeagueResponse.league:type_name -> tournament_management.League
	3,  // 9: tournament_management.ListLeaguesResponse.leagues:type_name -> tournament_management.League
	3,  // 10: tournament_management.UpdateLeagueResponse.league:type_name -> tournament_management.League
	4,  // 11: tournament_management.CreateTournamentFormatResponse.format:type_name -> tournament_management.TournamentFormat
	4,  // 12: tournament_management.GetTournamentFormatResponse.format:type_name -> tournament_management.TournamentFormat
	4,  // 13: tournament_management.ListTournamentFormatsResponse.formats:type_name -> tournament_management.TournamentFormat
	4,  // 14: tournament_management.UpdateTournamentFormatResponse.format:type_name -> tournament_management.TournamentFormat
	5,  // 15: tournament_management.CreateTournamentResponse.tournament:type_name -> tournament_management.Tournament
	5,  // 16: tournament_management.GetTournamentResponse.tournament:type_name -> tournament_management.Tournament
	5,  // 17: tournament_management.ListTournamentsResponse.tournaments:type_name -> tournament_management.Tournament
	5,  // 18: tournament_management.UpdateTournamentResponse.tournament:type_name -> tournament_management.Tournament
	47, // 19: tournament_management.GetInvitationsByUserResponse.invitations:type_name -> tournament_management.Invitation
	47, // 20: tournament_management.GetAllInvitationsResponse.invitations:type_name -> tournament_management.Invitation
	6,  // 21: tournament_management.TournamentService.CreateLeague:input_type -> tournament_management.CreateLeagueRequest
	7,  // 22: tournament_management.TournamentService.GetLeague:input_type -> tournament_management.GetLeagueRequest
	8,  // 23: tournament_management.TournamentService.ListLeagues:input_type -> tournament_management.ListLeaguesRequest
	9,  // 24: tournament_management.TournamentService.UpdateLeague:input_type -> tournament_management.UpdateLeagueRequest
	10, // 25: tournament_management.TournamentService.DeleteLeague:input_type -> tournament_management.DeleteLeagueRequest
	11, // 26: tournament_management.TournamentService.CreateTournamentFormat:input_type -> tournament_management.CreateTournamentFormatRequest
	12, // 27: tournament_management.TournamentService.GetTournamentFormat:input_type -> tournament_management.GetTournamentFormatRequest
	13, // 28: tournament_management.TournamentService.ListTournamentFormats:input_type -> tournament_management.ListTournamentFormatsRequest
	14, // 29: tournament_management.TournamentService.UpdateTournamentFormat:input_type -> tournament_management.UpdateTournamentFormatRequest
	15, // 30: tournament_management.TournamentService.DeleteTournamentFormat:input_type -> tournament_management.DeleteTournamentFormatRequest
	16, // 31: tournament_management.TournamentService.CreateTournament:input_type -> tournament_management.CreateTournamentRequest
	17, // 32: tournament_management.TournamentService.GetTournament:input_type -> tournament_management.GetTournamentRequest
	18, // 33: tournament_management.TournamentService.ListTournaments:input_type -> tournament_management.ListTournamentsRequest
	19, // 34: tournament_management.TournamentService.UpdateTournament:input_type -> tournament_management.UpdateTournamentRequest
	20, // 35: tournament_management.TournamentService.DeleteTournament:input_type -> tournament_management.DeleteTournamentRequest
	36, // 36: tournament_management.TournamentService.AcceptInvitation:input_type -> tournament_management.AcceptInvitationRequest
	38, // 37: tournament_management.TournamentService.DeclineInvitation:input_type -> tournament_management.DeclineInvitationRequest
	40, // 38: tournament_management.TournamentService.GetInvitationStatus:input_type -> tournament_management.GetInvitationStatusRequest
	42, // 39: tournament_management.TournamentService.ResendInvitation:input_type -> tournament_management.ResendInvitationRequest
	46, // 40: tournament_management.TournamentService.GetInvitationsByUser:input_type -> tournament_management.GetInvitationsByUserRequest
	49, // 41: tournament_management.TournamentService.BulkAcceptInvitations:input_type -> tournament_management.BulkAcceptInvitationsRequest
	51, // 42: tournament_management.TournamentService.BulkDeclineInvitations:input_type -> tournament_management.BulkDeclineInvitationsRequest
	53, // 43: tournament_management.TournamentService.GetAllInvitations:input_type -> tournament_management.GetAllInvitationsRequest
	44, // 44: tournament_management.TournamentService.BulkResendInvitations:input_type -> tournament_management.BulkResendInvitationsRequest
	21, // 45: tournament_management.TournamentService.CreateLeague:output_type -> tournament_management.CreateLeagueResponse
	22, // 46: tournament_management.TournamentService.GetLeague:output_type -> tournament_management.GetLeagueResponse
	23, // 47: tournament_management.TournamentService.ListLeagues:output_type -> tournament_management.ListLeaguesResponse
	24, // 48: tournament_management.TournamentService.UpdateLeague:output_type -> tournament_management.UpdateLeagueResponse
	25, // 49: tournament_management.TournamentService.DeleteLeague:output_type -> tournament_management.DeleteLeagueResponse
	26, // 50: tournament_management.TournamentService.CreateTournamentFormat:output_type -> tournament_management.CreateTournamentFormatResponse
	27, // 51: tournament_management.TournamentService.GetTournamentFormat:output_type -> tournament_management.GetTournamentFormatResponse
	28, // 52: tournament_management.TournamentService.ListTournamentFormats:output_type -> tournament_management.ListTournamentFormatsResponse
	29, // 53: tournament_management.TournamentService.UpdateTournamentFormat:output_type -> tournament_management.UpdateTournamentFormatResponse
	30, // 54: tournament_management.TournamentService.DeleteTournamentFormat:output_type -> tournament_management.DeleteTournamentFormatResponse
	31, // 55: tournament_management.TournamentService.CreateTournament:output_type -> tournament_management.CreateTournamentResponse
	32, // 56: tournament_management.TournamentService.GetTournament:output_type -> tournament_management.GetTournamentResponse
	33, // 57: tournament_management.TournamentService.ListTournaments:output_type -> tournament_management.ListTournamentsResponse
	34, // 58: tournament_management.TournamentService.UpdateTournament:output_type -> tournament_management.UpdateTournamentResponse
	35, // 59: tournament_management.TournamentService.DeleteTournament:output_type -> tournament_management.DeleteTournamentResponse
	37, // 60: tournament_management.TournamentService.AcceptInvitation:output_type -> tournament_management.AcceptInvitationResponse
	39, // 61: tournament_management.TournamentService.DeclineInvitation:output_type -> tournament_management.DeclineInvitationResponse
	41, // 62: tournament_management.TournamentService.GetInvitationStatus:output_type -> tournament_management.GetInvitationStatusResponse
	43, // 63: tournament_management.TournamentService.ResendInvitation:output_type -> tournament_management.ResendInvitationResponse
	48, // 64: tournament_management.TournamentService.GetInvitationsByUser:output_type -> tournament_management.GetInvitationsByUserResponse
	50, // 65: tournament_management.TournamentService.BulkAcceptInvitations:output_type -> tournament_management.BulkAcceptInvitationsResponse
	52, // 66: tournament_management.TournamentService.BulkDeclineInvitations:output_type -> tournament_management.BulkDeclineInvitationsResponse
	54, // 67: tournament_management.TournamentService.GetAllInvitations:output_type -> tournament_management.GetAllInvitationsResponse
	45, // 68: tournament_management.TournamentService.BulkResendInvitations:output_type -> tournament_management.BulkResendInvitationsResponse
	45, // [45:69] is the sub-list for method output_type
	21, // [21:45] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_internal_grpc_proto_tournament_management_tournament_proto_init() }
func file_internal_grpc_proto_tournament_management_tournament_proto_init() {
	if File_internal_grpc_proto_tournament_management_tournament_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternationalDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*League); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLeagueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeagueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLeaguesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLeagueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLeagueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTournamentFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTournamentFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTournamentFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTournamentFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTournamentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLeagueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeagueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLeaguesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLeagueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLeagueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTournamentFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTournamentFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTournamentFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTournamentFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTournamentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclineInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclineInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvitationStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvitationStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkResendInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkResendInvitationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvitationsByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvitationsByUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAcceptInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAcceptInvitationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeclineInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeclineInvitationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllInvitationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CreateLeagueRequest_LocalDetails)(nil),
		(*CreateLeagueRequest_InternationalDetails)(nil),
	}
	file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UpdateLeagueRequest_LocalDetails)(nil),
		(*UpdateLeagueRequest_InternationalDetails)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_grpc_proto_tournament_management_tournament_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_grpc_proto_tournament_management_tournament_proto_goTypes,
		DependencyIndexes: file_internal_grpc_proto_tournament_management_tournament_proto_depIdxs,
		EnumInfos:         file_internal_grpc_proto_tournament_management_tournament_proto_enumTypes,
		MessageInfos:      file_internal_grpc_proto_tournament_management_tournament_proto_msgTypes,
	}.Build()
	File_internal_grpc_proto_tournament_management_tournament_proto = out.File
	file_internal_grpc_proto_tournament_management_tournament_proto_rawDesc = nil
	file_internal_grpc_proto_tournament_management_tournament_proto_goTypes = nil
	file_internal_grpc_proto_tournament_management_tournament_proto_depIdxs = nil
}
